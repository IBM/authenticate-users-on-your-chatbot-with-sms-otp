/**
 * (C) Copyright IBM Corp. 2019, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
import { FileWithMetadata } from 'ibm-cloud-sdk-core';
/**
 * IBM Watson&trade; Visual Recognition is discontinued. Existing instances are supported until 1 December 2021, but as
 * of 7 January 2021, you can't create instances. Any instance that is provisioned on 1 December 2021 will be deleted.
 * {: deprecated}
 *
 * Provide images to the IBM Watson Visual Recognition service for analysis. The service detects objects based on a set
 * of images with training data.
 */
declare class VisualRecognitionV4 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /** Release date of the API version you want to use. Specify dates in YYYY-MM-DD format. The current version is
     *  `2019-02-11`.
     */
    version: string;
    /**
     * Construct a VisualRecognitionV4 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the API version you want to use. Specify dates in YYYY-MM-DD
     * format. The current version is `2019-02-11`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.visual-recognition.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {VisualRecognitionV4}
     */
    constructor(options: UserOptions);
    /*************************
     * analysis
     ************************/
    /**
     * Analyze images.
     *
     * Analyze images by URL, by file, or both against your own collection. Make sure that
     * **training_status.objects.ready** is `true` for the feature before you use a collection to analyze images.
     *
     * Encode the image and .zip file names in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8
     * encoding if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.collectionIds - The IDs of the collections to analyze.
     * @param {string[]} params.features - The features to analyze.
     * @param {FileWithMetadata[]} [params.imagesFile] - An array of image files (.jpg or .png) or .zip files with images.
     * - Include a maximum of 20 images in a request.
     * - Limit the .zip file to 100 MB.
     * - Limit each image file to 10 MB.
     *
     * You can also include an image with the **image_url** parameter.
     * @param {string[]} [params.imageUrl] - An array of URLs of image files (.jpg or .png).
     * - Include a maximum of 20 images in a request.
     * - Limit each image file to 10 MB.
     * - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least 300
     * x 300 pixels. Maximum is 5400 pixels for either height or width.
     *
     * You can also include images with the **images_file** parameter.
     * @param {number} [params.threshold] - The minimum score a feature must have to be returned.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.AnalyzeResponse>>}
     */
    analyze(params: VisualRecognitionV4.AnalyzeParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.AnalyzeResponse>>;
    /*************************
     * collections
     ************************/
    /**
     * Create a collection.
     *
     * Create a collection that can be used to store images.
     *
     * To create a collection without specifying a name and description, include an empty JSON object in the request body.
     *
     * Encode the name and description in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8 encoding
     * if it encounters non-ASCII characters.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The name of the collection. The name can contain alphanumeric, underscore, hyphen,
     * and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.description] - The description of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    createCollection(params?: VisualRecognitionV4.CreateCollectionParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>;
    /**
     * List collections.
     *
     * Retrieves a list of collections for the service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.CollectionsList>>}
     */
    listCollections(params?: VisualRecognitionV4.ListCollectionsParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.CollectionsList>>;
    /**
     * Get collection details.
     *
     * Get details of one collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    getCollection(params: VisualRecognitionV4.GetCollectionParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>;
    /**
     * Update a collection.
     *
     * Update the name or description of a collection.
     *
     * Encode the name and description in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8 encoding
     * if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} [params.name] - The name of the collection. The name can contain alphanumeric, underscore, hyphen,
     * and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.description] - The description of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    updateCollection(params: VisualRecognitionV4.UpdateCollectionParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>;
    /**
     * Delete a collection.
     *
     * Delete a collection from the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    deleteCollection(params: VisualRecognitionV4.DeleteCollectionParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>;
    /**
     * Get a model.
     *
     * Download a model that you can deploy to detect objects in images. The collection must include a generated model,
     * which is indicated in the response for the collection details as `"rscnn_ready": true`. If the value is `false`,
     * train or retrain the collection to generate the model.
     *
     * Currently, the model format is specific to Android apps. For more information about how to deploy the model to your
     * app, see the [Watson Visual Recognition on Android](https://github.com/matt-ny/rscnn) project in GitHub.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.feature - The feature for the model.
     * @param {string} params.modelFormat - The format of the returned model.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream|Buffer>>}
     */
    getModelFile(params: VisualRecognitionV4.GetModelFileParams): Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream | Buffer>>;
    /*************************
     * images
     ************************/
    /**
     * Add images.
     *
     * Add images to a collection by URL, by file, or both.
     *
     * Encode the image and .zip file names in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8
     * encoding if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {FileWithMetadata[]} [params.imagesFile] - An array of image files (.jpg or .png) or .zip files with images.
     * - Include a maximum of 20 images in a request.
     * - Limit the .zip file to 100 MB.
     * - Limit each image file to 10 MB.
     *
     * You can also include an image with the **image_url** parameter.
     * @param {string[]} [params.imageUrl] - The array of URLs of image files (.jpg or .png).
     * - Include a maximum of 20 images in a request.
     * - Limit each image file to 10 MB.
     * - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least 300
     * x 300 pixels. Maximum is 5400 pixels for either height or width.
     *
     * You can also include images with the **images_file** parameter.
     * @param {string} [params.trainingData] - Training data for a single image. Include training data only if you add one
     * image with the request.
     *
     * The `object` property can contain alphanumeric, underscore, hyphen, space, and dot characters. It cannot begin with
     * the reserved prefix `sys-` and must be no longer than 32 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetailsList>>}
     */
    addImages(params: VisualRecognitionV4.AddImagesParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetailsList>>;
    /**
     * List images.
     *
     * Retrieves a list of images in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageSummaryList>>}
     */
    listImages(params: VisualRecognitionV4.ListImagesParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageSummaryList>>;
    /**
     * Get image details.
     *
     * Get the details of an image in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetails>>}
     */
    getImageDetails(params: VisualRecognitionV4.GetImageDetailsParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetails>>;
    /**
     * Delete an image.
     *
     * Delete one image from a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    deleteImage(params: VisualRecognitionV4.DeleteImageParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>;
    /**
     * Get a JPEG file of an image.
     *
     * Download a JPEG representation of an image.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {string} [params.size] - The image size. Specify `thumbnail` to return a version that maintains the original
     * aspect ratio but is no larger than 200 pixels in the larger dimension. For example, an original 800 x 1000 image is
     * resized to 160 x 200 pixels.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream|Buffer>>}
     */
    getJpegImage(params: VisualRecognitionV4.GetJpegImageParams): Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream | Buffer>>;
    /*************************
     * objects
     ************************/
    /**
     * List object metadata.
     *
     * Retrieves a list of object names in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadataList>>}
     */
    listObjectMetadata(params: VisualRecognitionV4.ListObjectMetadataParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadataList>>;
    /**
     * Update an object name.
     *
     * Update the name of an object. A successful request updates the training data for all images that use the object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {string} params.newObject - The updated name of the object. The name can contain alphanumeric, underscore,
     * hyphen, space, and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.UpdateObjectMetadata>>}
     */
    updateObjectMetadata(params: VisualRecognitionV4.UpdateObjectMetadataParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.UpdateObjectMetadata>>;
    /**
     * Get object metadata.
     *
     * Get the number of bounding boxes for a single object in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadata>>}
     */
    getObjectMetadata(params: VisualRecognitionV4.GetObjectMetadataParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadata>>;
    /**
     * Delete an object.
     *
     * Delete one object from a collection. A successful request deletes the training data from all images that use the
     * object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    deleteObject(params: VisualRecognitionV4.DeleteObjectParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>;
    /*************************
     * training
     ************************/
    /**
     * Train a collection.
     *
     * Start training on images in a collection. The collection must have enough training data and untrained data (the
     * **training_status.objects.data_changed** is `true`). If training is in progress, the request queues the next
     * training job.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    train(params: VisualRecognitionV4.TrainParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>;
    /**
     * Add training data to an image.
     *
     * Add, update, or delete training data for an image. Encode the object name in UTF-8 if it contains non-ASCII
     * characters. The service assumes UTF-8 encoding if it encounters non-ASCII characters.
     *
     * Elements in the request replace the existing elements.
     *
     * - To update the training data, provide both the unchanged and the new or changed values.
     *
     * - To delete the training data, provide an empty value for the training data.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {TrainingDataObject[]} [params.objects] - Training data for specific objects.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingDataObjects>>}
     */
    addImageTrainingData(params: VisualRecognitionV4.AddImageTrainingDataParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingDataObjects>>;
    /**
     * Get training usage.
     *
     * Information about the completed training events. You can use this information to determine how close you are to the
     * training limits for the month.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.startTime] - The earliest day to include training events. Specify dates in YYYY-MM-DD
     * format. If empty or not specified, the earliest training event is included.
     * @param {string} [params.endTime] - The most recent day to include training events. Specify dates in YYYY-MM-DD
     * format. All events for the day are included. If empty or not specified, the current day is used. Specify the same
     * value as `start_time` to request events for a single day.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingEvents>>}
     */
    getTrainingUsage(params?: VisualRecognitionV4.GetTrainingUsageParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingEvents>>;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/visual-recognition?topic=visual-recognition-information-security).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    deleteUserData(params: VisualRecognitionV4.DeleteUserDataParams): Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>;
}
/*************************
 * interfaces
 ************************/
declare namespace VisualRecognitionV4 {
    /** Options for the `VisualRecognitionV4` constructor. */
    interface Options extends UserOptions {
        /** Release date of the API version you want to use. Specify dates in YYYY-MM-DD format. The current version is
         *  `2019-02-11`.
         */
        version: string;
    }
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `analyze` operation. */
    interface AnalyzeParams {
        /** The IDs of the collections to analyze. */
        collectionIds: string[];
        /** The features to analyze. */
        features: AnalyzeConstants.Features[] | string[];
        /** An array of image files (.jpg or .png) or .zip files with images.
         *  - Include a maximum of 20 images in a request.
         *  - Limit the .zip file to 100 MB.
         *  - Limit each image file to 10 MB.
         *
         *  You can also include an image with the **image_url** parameter.
         */
        imagesFile?: FileWithMetadata[];
        /** An array of URLs of image files (.jpg or .png).
         *  - Include a maximum of 20 images in a request.
         *  - Limit each image file to 10 MB.
         *  - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least
         *  300 x 300 pixels. Maximum is 5400 pixels for either height or width.
         *
         *  You can also include images with the **images_file** parameter.
         */
        imageUrl?: string[];
        /** The minimum score a feature must have to be returned. */
        threshold?: number;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `analyze` operation. */
    namespace AnalyzeConstants {
        /** The features to analyze. */
        enum Features {
            OBJECTS = "objects"
        }
    }
    /** Parameters for the `createCollection` operation. */
    interface CreateCollectionParams {
        /** The name of the collection. The name can contain alphanumeric, underscore, hyphen, and dot characters. It
         *  cannot begin with the reserved prefix `sys-`.
         */
        name?: string;
        /** The description of the collection. */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listCollections` operation. */
    interface ListCollectionsParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getCollection` operation. */
    interface GetCollectionParams {
        /** The identifier of the collection. */
        collectionId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateCollection` operation. */
    interface UpdateCollectionParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The name of the collection. The name can contain alphanumeric, underscore, hyphen, and dot characters. It
         *  cannot begin with the reserved prefix `sys-`.
         */
        name?: string;
        /** The description of the collection. */
        description?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteCollection` operation. */
    interface DeleteCollectionParams {
        /** The identifier of the collection. */
        collectionId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getModelFile` operation. */
    interface GetModelFileParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The feature for the model. */
        feature: GetModelFileConstants.Feature | string;
        /** The format of the returned model. */
        modelFormat: GetModelFileConstants.ModelFormat | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getModelFile` operation. */
    namespace GetModelFileConstants {
        /** The feature for the model. */
        enum Feature {
            OBJECTS = "objects"
        }
        /** The format of the returned model. */
        enum ModelFormat {
            RSCNN = "rscnn"
        }
    }
    /** Parameters for the `addImages` operation. */
    interface AddImagesParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** An array of image files (.jpg or .png) or .zip files with images.
         *  - Include a maximum of 20 images in a request.
         *  - Limit the .zip file to 100 MB.
         *  - Limit each image file to 10 MB.
         *
         *  You can also include an image with the **image_url** parameter.
         */
        imagesFile?: FileWithMetadata[];
        /** The array of URLs of image files (.jpg or .png).
         *  - Include a maximum of 20 images in a request.
         *  - Limit each image file to 10 MB.
         *  - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least
         *  300 x 300 pixels. Maximum is 5400 pixels for either height or width.
         *
         *  You can also include images with the **images_file** parameter.
         */
        imageUrl?: string[];
        /** Training data for a single image. Include training data only if you add one image with the request.
         *
         *  The `object` property can contain alphanumeric, underscore, hyphen, space, and dot characters. It cannot begin
         *  with the reserved prefix `sys-` and must be no longer than 32 characters.
         */
        trainingData?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listImages` operation. */
    interface ListImagesParams {
        /** The identifier of the collection. */
        collectionId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getImageDetails` operation. */
    interface GetImageDetailsParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The identifier of the image. */
        imageId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteImage` operation. */
    interface DeleteImageParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The identifier of the image. */
        imageId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getJpegImage` operation. */
    interface GetJpegImageParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The identifier of the image. */
        imageId: string;
        /** The image size. Specify `thumbnail` to return a version that maintains the original aspect ratio but is no
         *  larger than 200 pixels in the larger dimension. For example, an original 800 x 1000 image is resized to 160 x
         *  200 pixels.
         */
        size?: GetJpegImageConstants.Size | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getJpegImage` operation. */
    namespace GetJpegImageConstants {
        /** The image size. Specify `thumbnail` to return a version that maintains the original aspect ratio but is no larger than 200 pixels in the larger dimension. For example, an original 800 x 1000 image is resized to 160 x 200 pixels. */
        enum Size {
            FULL = "full",
            THUMBNAIL = "thumbnail"
        }
    }
    /** Parameters for the `listObjectMetadata` operation. */
    interface ListObjectMetadataParams {
        /** The identifier of the collection. */
        collectionId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `updateObjectMetadata` operation. */
    interface UpdateObjectMetadataParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The name of the object. */
        object: string;
        /** The updated name of the object. The name can contain alphanumeric, underscore, hyphen, space, and dot
         *  characters. It cannot begin with the reserved prefix `sys-`.
         */
        newObject: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getObjectMetadata` operation. */
    interface GetObjectMetadataParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The name of the object. */
        object: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteObject` operation. */
    interface DeleteObjectParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The name of the object. */
        object: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `train` operation. */
    interface TrainParams {
        /** The identifier of the collection. */
        collectionId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `addImageTrainingData` operation. */
    interface AddImageTrainingDataParams {
        /** The identifier of the collection. */
        collectionId: string;
        /** The identifier of the image. */
        imageId: string;
        /** Training data for specific objects. */
        objects?: TrainingDataObject[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getTrainingUsage` operation. */
    interface GetTrainingUsageParams {
        /** The earliest day to include training events. Specify dates in YYYY-MM-DD format. If empty or not specified,
         *  the earliest training event is included.
         */
        startTime?: string;
        /** The most recent day to include training events. Specify dates in YYYY-MM-DD format. All events for the day
         *  are included. If empty or not specified, the current day is used. Specify the same value as `start_time` to
         *  request events for a single day.
         */
        endTime?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteUserData` operation. */
    interface DeleteUserDataParams {
        /** The customer ID for which all data is to be deleted. */
        customerId: string;
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** Results for all images. */
    interface AnalyzeResponse {
        /** Analyzed images. */
        images: Image[];
        /** Information about what might cause less than optimal output. */
        warnings?: Warning[];
        /** A unique identifier of the request. Included only when an error or warning is returned. */
        trace?: string;
    }
    /** Details about a collection. */
    interface Collection {
        /** The identifier of the collection. */
        collection_id: string;
        /** The name of the collection. */
        name: string;
        /** The description of the collection. */
        description: string;
        /** Date and time in Coordinated Universal Time (UTC) that the collection was created. */
        created: string;
        /** Date and time in Coordinated Universal Time (UTC) that the collection was most recently updated. */
        updated: string;
        /** Number of images in the collection. */
        image_count: number;
        /** Training status information for the collection. */
        training_status: CollectionTrainingStatus;
    }
    /** The objects in a collection that are detected in an image. */
    interface CollectionObjects {
        /** The identifier of the collection. */
        collection_id: string;
        /** The identified objects in a collection. */
        objects: ObjectDetail[];
    }
    /** Training status information for the collection. */
    interface CollectionTrainingStatus {
        /** Training status for the objects in the collection. */
        objects: ObjectTrainingStatus;
    }
    /** A container for the list of collections. */
    interface CollectionsList {
        /** The collections in this service instance. */
        collections: Collection[];
    }
    /** Container for the list of collections that have objects detected in an image. */
    interface DetectedObjects {
        /** The collections with identified objects. */
        collections?: CollectionObjects[];
    }
    /** Details about an error. */
    interface Error {
        /** Identifier of the problem. */
        code: string;
        /** An explanation of the problem with possible solutions. */
        message: string;
        /** A URL for more information about the solution. */
        more_info?: string;
        /** Details about the specific area of the problem. */
        target?: ErrorTarget;
    }
    /** Details about the specific area of the problem. */
    interface ErrorTarget {
        /** The parameter or property that is the focus of the problem. */
        type: string;
        /** The property that is identified with the problem. */
        name: string;
    }
    /** Details about an image. */
    interface Image {
        /** The source type of the image. */
        source: ImageSource;
        /** Height and width of an image. */
        dimensions: ImageDimensions;
        /** Container for the list of collections that have objects detected in an image. */
        objects: DetectedObjects;
        /** A container for the problems in the request. */
        errors?: Error[];
    }
    /** Details about an image. */
    interface ImageDetails {
        /** The identifier of the image. */
        image_id?: string;
        /** Date and time in Coordinated Universal Time (UTC) that the image was most recently updated. */
        updated?: string;
        /** Date and time in Coordinated Universal Time (UTC) that the image was created. */
        created?: string;
        /** The source type of the image. */
        source: ImageSource;
        /** Height and width of an image. */
        dimensions?: ImageDimensions;
        /** Details about the errors. */
        errors?: Error[];
        /** Training data for all objects. */
        training_data?: TrainingDataObjects;
    }
    /** List of information about the images. */
    interface ImageDetailsList {
        /** The images in the collection. */
        images?: ImageDetails[];
        /** Information about what might cause less than optimal output. */
        warnings?: Warning[];
        /** A unique identifier of the request. Included only when an error or warning is returned. */
        trace?: string;
    }
    /** Height and width of an image. */
    interface ImageDimensions {
        /** Height in pixels of the image. */
        height?: number;
        /** Width in pixels of the image. */
        width?: number;
    }
    /** The source type of the image. */
    interface ImageSource {
        /** The source type of the image. */
        type: string;
        /** Name of the image file if uploaded. Not returned when the image is passed by URL. */
        filename?: string;
        /** Name of the .zip file of images if uploaded. Not returned when the image is passed directly or by URL. */
        archive_filename?: string;
        /** Source of the image before any redirects. Not returned when the image is uploaded. */
        source_url?: string;
        /** Fully resolved URL of the image after redirects are followed. Not returned when the image is uploaded. */
        resolved_url?: string;
    }
    /** Basic information about an image. */
    interface ImageSummary {
        /** The identifier of the image. */
        image_id?: string;
        /** Date and time in Coordinated Universal Time (UTC) that the image was most recently updated. */
        updated?: string;
    }
    /** List of images. */
    interface ImageSummaryList {
        /** The images in the collection. */
        images: ImageSummary[];
    }
    /** Defines the location of the bounding box around the object. */
    interface Location {
        /** Y-position of top-left pixel of the bounding box. */
        top: number;
        /** X-position of top-left pixel of the bounding box. */
        left: number;
        /** Width in pixels of of the bounding box. */
        width: number;
        /** Height in pixels of the bounding box. */
        height: number;
    }
    /** Details about an object in the collection. */
    interface ObjectDetail {
        /** The label for the object. */
        object: string;
        /** Defines the location of the bounding box around the object. */
        location: ObjectDetailLocation;
        /** Confidence score for the object in the range of 0 to 1. A higher score indicates greater likelihood that the
         *  object is depicted at this location in the image.
         */
        score: number;
    }
    /** Defines the location of the bounding box around the object. */
    interface ObjectDetailLocation {
        /** Y-position of top-left pixel of the bounding box. */
        top: number;
        /** X-position of top-left pixel of the bounding box. */
        left: number;
        /** Width in pixels of of the bounding box. */
        width: number;
        /** Height in pixels of the bounding box. */
        height: number;
    }
    /** Basic information about an object. */
    interface ObjectMetadata {
        /** The name of the object. */
        object?: string;
        /** Number of bounding boxes with this object name in the collection. */
        count?: number;
    }
    /** List of objects. */
    interface ObjectMetadataList {
        /** Number of unique named objects in the collection. */
        object_count: number;
        /** The objects in the collection. */
        objects?: ObjectMetadata[];
    }
    /** Training status for the objects in the collection. */
    interface ObjectTrainingStatus {
        /** Whether you can analyze images in the collection with the **objects** feature. */
        ready: boolean;
        /** Whether training is in progress. */
        in_progress: boolean;
        /** Whether there are changes to the training data since the most recent training. */
        data_changed: boolean;
        /** Whether the most recent training failed. */
        latest_failed: boolean;
        /** Whether the model can be downloaded after the training status is `ready`. */
        rscnn_ready: boolean;
        /** Details about the training. If training is in progress, includes information about the status. If training
         *  is not in progress, includes a success message or information about why training failed.
         */
        description: string;
    }
    /** Details about the training data. */
    interface TrainingDataObject {
        /** The name of the object. */
        object?: string;
        /** Defines the location of the bounding box around the object. */
        location?: Location;
    }
    /** Training data for all objects. */
    interface TrainingDataObjects {
        /** Training data for specific objects. */
        objects?: TrainingDataObject[];
    }
    /** Details about the training event. */
    interface TrainingEvent {
        /** Trained object type. Only `objects` is currently supported. */
        type?: string;
        /** Identifier of the trained collection. */
        collection_id?: string;
        /** Date and time in Coordinated Universal Time (UTC) that training on the collection finished. */
        completion_time?: string;
        /** Training status of the training event. */
        status?: string;
        /** The total number of images that were used in training for this training event. */
        image_count?: number;
    }
    /** Details about the training events. */
    interface TrainingEvents {
        /** The starting day for the returned training events in Coordinated Universal Time (UTC). If not specified in
         *  the request, it identifies the earliest training event.
         */
        start_time?: string;
        /** The ending day for the returned training events in Coordinated Universal Time (UTC). If not specified in the
         *  request, it lists the current time.
         */
        end_time?: string;
        /** The total number of training events in the response for the start and end times. */
        completed_events?: number;
        /** The total number of images that were used in training for the start and end times. */
        trained_images?: number;
        /** The completed training events for the start and end time. */
        events?: TrainingEvent[];
    }
    /** Training status information for the collection. */
    interface TrainingStatus {
        /** Training status for the objects in the collection. */
        objects: ObjectTrainingStatus;
    }
    /** Basic information about an updated object. */
    interface UpdateObjectMetadata {
        /** The updated name of the object. The name can contain alphanumeric, underscore, hyphen, space, and dot
         *  characters. It cannot begin with the reserved prefix `sys-`.
         */
        object: string;
        /** Number of bounding boxes in the collection with the updated object name. */
        count?: number;
    }
    /** Details about a problem. */
    interface Warning {
        /** Identifier of the problem. */
        code: string;
        /** An explanation of the problem with possible solutions. */
        message: string;
        /** A URL for more information about the solution. */
        more_info?: string;
    }
}
export = VisualRecognitionV4;
