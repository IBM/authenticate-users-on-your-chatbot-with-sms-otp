"use strict";
/**
 * (C) Copyright IBM Corp. 2017, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-be3b4618-20201201-153403
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IBM Watson&trade; Visual Recognition is discontinued. Existing instances are supported until 1 December 2021, but as
 * of 7 January 2021, you can't create instances. Any instance that is provisioned on 1 December 2021 will be deleted.
 * {: deprecated}
 *
 * The IBM Watson Visual Recognition service uses deep learning algorithms to identify scenes and objects in images that
 * you upload to the service. You can create and train a custom classifier to identify subjects that suit your needs.
 */
var VisualRecognitionV3 = /** @class */ (function (_super) {
    __extends(VisualRecognitionV3, _super);
    /**
     * Construct a VisualRecognitionV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the API version you want to use. Specify dates in YYYY-MM-DD
     * format. The current version is `2018-03-19`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.visual-recognition.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {VisualRecognitionV3}
     */
    function VisualRecognitionV3(options) {
        var _this = this;
        console.warn("On 1 December 2021, Visual Recognition will no longer be available. \n    For more information, see https://github.com/watson-developer-cloud/node-sdk/tree/master#visual-recognition-deprecation");
        options = options || {};
        var requiredParams = ['version'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);
        if (missingParams) {
            throw missingParams;
        }
        if (!options.serviceName) {
            options.serviceName = VisualRecognitionV3.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * general
     ************************/
    /**
     * Classify images.
     *
     * Classify images with built-in or custom classifiers.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} [params.imagesFile] - An image file (.gif, .jpg, .png, .tif) or .zip file
     * with images. Maximum image size is 10 MB. Include no more than 20 images and limit the .zip file to 100 MB. Encode
     * the image and .zip file names in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8 encoding if
     * it encounters non-ASCII characters.
     *
     * You can also include an image with the **url** parameter.
     * @param {string} [params.imagesFilename] - The filename for imagesFile.
     * @param {string} [params.imagesFileContentType] - The content type of imagesFile.
     * @param {string} [params.url] - The URL of an image (.gif, .jpg, .png, .tif) to analyze. The minimum recommended
     * pixel density is 32X32 pixels, but the service tends to perform better with images that are at least 224 x 224
     * pixels. The maximum image size is 10 MB.
     *
     * You can also include images with the **images_file** parameter.
     * @param {number} [params.threshold] - The minimum score a class must have to be displayed in the response. Set the
     * threshold to `0.0` to return all identified classes.
     * @param {string[]} [params.owners] - The categories of classifiers to apply. The **classifier_ids** parameter
     * overrides **owners**, so make sure that **classifier_ids** is empty.
     * - Use `IBM` to classify against the `default` general classifier. You get the same result if both
     * **classifier_ids** and **owners** parameters are empty.
     * - Use `me` to classify against all your custom classifiers. However, for better performance use **classifier_ids**
     * to specify the specific custom classifiers to apply.
     * - Use both `IBM` and `me` to analyze the image against both classifier categories.
     * @param {string[]} [params.classifierIds] - Which classifiers to apply. Overrides the **owners** parameter. You can
     * specify both custom and built-in classifier IDs. The built-in `default` classifier is used if both
     * **classifier_ids** and **owners** parameters are empty.
     *
     * The following built-in classifier IDs require no training:
     * - `default`: Returns classes from thousands of general tags.
     * - `food`: Enhances specificity and accuracy for images of food items.
     * - `explicit`: Evaluates whether the image might be pornographic.
     * @param {string} [params.acceptLanguage] - The desired language of parts of the response. See the response for
     * details.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.ClassifiedImages>>}
     */
    VisualRecognitionV3.prototype.classify = function (params) {
        var _params = Object.assign({}, params);
        var formData = {
            'images_file': {
                data: _params.imagesFile,
                filename: _params.imagesFilename,
                contentType: _params.imagesFileContentType
            },
            'url': _params.url,
            'threshold': _params.threshold,
            'owners': Array.isArray(_params.owners) ? _params.owners.join(',') : _params.owners,
            'classifier_ids': Array.isArray(_params.classifierIds) ? _params.classifierIds.join(',') : _params.classifierIds
        };
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'classify');
        var parameters = {
            options: {
                url: '/v3/classify',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                    'Accept-Language': _params.acceptLanguage
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * custom
     ************************/
    /**
     * Create a classifier.
     *
     * Train a new multi-faceted classifier on the uploaded image data. Create your custom classifier with positive or
     * negative example training images. Include at least two sets of examples, either two positive example files or one
     * positive and one negative file. You can upload a maximum of 256 MB per call.
     *
     * **Tips when creating:**
     *
     * - If you set the **X-Watson-Learning-Opt-Out** header parameter to `true` when you create a classifier, the example
     * training images are not stored. Save your training images locally. For more information, see [Data
     * collection](#data-collection).
     *
     * - Encode all names in UTF-8 if they contain non-ASCII characters (.zip and image file names, and classifier and
     * class names). The service assumes UTF-8 encoding if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.name - The name of the new classifier. Encode special characters in UTF-8.
     * @param {Record<string, NodeJS.ReadableStream|Buffer>} params.positiveExamples - A dictionary that contains the
     * value for each classname. The value is a .zip file of images that depict the visual subject of a class in the new
     * classifier. You can include more than one positive example file in a call.
     *
     * Specify the parameter name by appending `_positive_examples` to the class name. For example,
     * `goldenretriever_positive_examples` creates the class **goldenretriever**. The string cannot contain the following
     * characters: ``$ * - { } \ | / ' " ` [ ]``.
     *
     * Include at least 10 images in .jpg or .png format. The minimum recommended image resolution is 32X32 pixels. The
     * maximum number of images is 10,000 images or 100 MB per .zip file.
     *
     * Encode special characters in the file name in UTF-8.
     * @param {NodeJS.ReadableStream|Buffer} [params.negativeExamples] - A .zip file of images that do not depict the
     * visual subject of any of the classes of the new classifier. Must contain a minimum of 10 images.
     *
     * Encode special characters in the file name in UTF-8.
     * @param {string} [params.negativeExamplesFilename] - The filename for negativeExamples.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Classifier>>}
     */
    VisualRecognitionV3.prototype.createClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['name', 'positiveExamples'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'name': _params.name,
            'negative_examples': {
                data: _params.negativeExamples,
                filename: _params.negativeExamplesFilename,
                contentType: 'application/octet-stream'
            }
        };
        Object.keys(_params.positiveExamples || {}).forEach(function (key) {
            var partName = key + "_positive_examples";
            formData[partName] = {
                data: _params.positiveExamples[key],
                contentType: 'application/octet-stream',
            };
        });
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'createClassifier');
        var parameters = {
            options: {
                url: '/v3/classifiers',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve a list of classifiers.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {boolean} [params.verbose] - Specify `true` to return details about the classifiers. Omit this parameter to
     * return a brief list of classifiers.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Classifiers>>}
     */
    VisualRecognitionV3.prototype.listClassifiers = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version,
            'verbose': _params.verbose
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'listClassifiers');
        var parameters = {
            options: {
                url: '/v3/classifiers',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Retrieve classifier details.
     *
     * Retrieve information about a custom classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - The ID of the classifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Classifier>>}
     */
    VisualRecognitionV3.prototype.getClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'getClassifier');
        var parameters = {
            options: {
                url: '/v3/classifiers/{classifier_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update a classifier.
     *
     * Update a custom classifier by adding new positive or negative classes or by adding new images to existing classes.
     * You must supply at least one set of positive or negative examples. For details, see [Updating custom
     * classifiers](https://cloud.ibm.com/docs/visual-recognition?topic=visual-recognition-customizing#updating-custom-classifiers).
     *
     * Encode all names in UTF-8 if they contain non-ASCII characters (.zip and image file names, and classifier and class
     * names). The service assumes UTF-8 encoding if it encounters non-ASCII characters.
     *
     * **Tips about retraining:**
     *
     * - You can't update the classifier if the **X-Watson-Learning-Opt-Out** header parameter was set to `true` when the
     * classifier was created. Training images are not stored in that case. Instead, create another classifier. For more
     * information, see [Data collection](#data-collection).
     *
     * - Don't make retraining calls on a classifier until the status is ready. When you submit retraining requests in
     * parallel, the last request overwrites the previous requests. The `retrained` property shows the last time the
     * classifier retraining finished.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - The ID of the classifier.
     * @param {Record<string, NodeJS.ReadableStream|Buffer>} [params.positiveExamples] - A dictionary that contains the
     * value for each classname. The value is a .zip file of images that depict the visual subject of a class in the
     * classifier. The positive examples create or update classes in the classifier. You can include more than one
     * positive example file in a call.
     *
     * Specify the parameter name by appending `_positive_examples` to the class name. For example,
     * `goldenretriever_positive_examples` creates the class `goldenretriever`. The string cannot contain the following
     * characters: ``$ * - { } \ | / ' " ` [ ]``.
     *
     * Include at least 10 images in .jpg or .png format. The minimum recommended image resolution is 32X32 pixels. The
     * maximum number of images is 10,000 images or 100 MB per .zip file.
     *
     * Encode special characters in the file name in UTF-8.
     * @param {NodeJS.ReadableStream|Buffer} [params.negativeExamples] - A .zip file of images that do not depict the
     * visual subject of any of the classes of the new classifier. Must contain a minimum of 10 images.
     *
     * Encode special characters in the file name in UTF-8.
     * @param {string} [params.negativeExamplesFilename] - The filename for negativeExamples.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Classifier>>}
     */
    VisualRecognitionV3.prototype.updateClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'negative_examples': {
                data: _params.negativeExamples,
                filename: _params.negativeExamplesFilename,
                contentType: 'application/octet-stream'
            }
        };
        Object.keys(_params.positiveExamples || {}).forEach(function (key) {
            var partName = key + "_positive_examples";
            formData[partName] = {
                data: _params.positiveExamples[key],
                contentType: 'application/octet-stream',
            };
        });
        var query = {
            'version': this.version
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'updateClassifier');
        var parameters = {
            options: {
                url: '/v3/classifiers/{classifier_id}',
                method: 'POST',
                qs: query,
                path: path,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - The ID of the classifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Empty>>}
     */
    VisualRecognitionV3.prototype.deleteClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteClassifier');
        var parameters = {
            options: {
                url: '/v3/classifiers/{classifier_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * coreML
     ************************/
    /**
     * Retrieve a Core ML model of a classifier.
     *
     * Download a Core ML model file (.mlmodel) of a custom classifier that returns <tt>"core_ml_enabled": true</tt> in
     * the classifier details.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - The ID of the classifier.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<NodeJS.ReadableStream|Buffer>>}
     */
    VisualRecognitionV3.prototype.getCoreMlModel = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'getCoreMlModel');
        var parameters = {
            options: {
                url: '/v3/classifiers/{classifier_id}/core_ml_model',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/octet-stream',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/visual-recognition?topic=visual-recognition-information-security).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<VisualRecognitionV3.Response<VisualRecognitionV3.Empty>>}
     */
    VisualRecognitionV3.prototype.deleteUserData = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['customerId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'customer_id': _params.customerId
        };
        var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteUserData');
        var parameters = {
            options: {
                url: '/v3/user_data',
                method: 'DELETE',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    VisualRecognitionV3.DEFAULT_SERVICE_URL = 'https://api.us-south.visual-recognition.watson.cloud.ibm.com';
    VisualRecognitionV3.DEFAULT_SERVICE_NAME = 'watson_vision_combined';
    return VisualRecognitionV3;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (VisualRecognitionV3) {
    /** Constants for the `classify` operation. */
    var ClassifyConstants;
    (function (ClassifyConstants) {
        /** The desired language of parts of the response. See the response for details. */
        var AcceptLanguage;
        (function (AcceptLanguage) {
            AcceptLanguage["EN"] = "en";
            AcceptLanguage["AR"] = "ar";
            AcceptLanguage["DE"] = "de";
            AcceptLanguage["ES"] = "es";
            AcceptLanguage["FR"] = "fr";
            AcceptLanguage["IT"] = "it";
            AcceptLanguage["JA"] = "ja";
            AcceptLanguage["KO"] = "ko";
            AcceptLanguage["PT_BR"] = "pt-br";
            AcceptLanguage["ZH_CN"] = "zh-cn";
            AcceptLanguage["ZH_TW"] = "zh-tw";
        })(AcceptLanguage = ClassifyConstants.AcceptLanguage || (ClassifyConstants.AcceptLanguage = {}));
    })(ClassifyConstants = VisualRecognitionV3.ClassifyConstants || (VisualRecognitionV3.ClassifyConstants = {}));
})(VisualRecognitionV3 || (VisualRecognitionV3 = {}));
module.exports = VisualRecognitionV3;
