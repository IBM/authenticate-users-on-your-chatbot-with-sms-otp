"use strict";
/**
 * (C) Copyright IBM Corp. 2018, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IBM Watson&trade; Language Translator translates text from one language to another. The service offers multiple
 * IBM-provided translation models that you can customize based on your unique terminology and language. Use Language
 * Translator to take news from across the globe and present it in your language, communicate with your customers in
 * their own language, and more.
 */
var LanguageTranslatorV3 = /** @class */ (function (_super) {
    __extends(LanguageTranslatorV3, _super);
    /**
     * Construct a LanguageTranslatorV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in
     * YYYY-MM-DD format. The current version is `2018-05-01`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.language-translator.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {LanguageTranslatorV3}
     */
    function LanguageTranslatorV3(options) {
        var _this = this;
        options = options || {};
        var requiredParams = ['version'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);
        if (missingParams) {
            throw missingParams;
        }
        if (!options.serviceName) {
            options.serviceName = LanguageTranslatorV3.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * languages
     ************************/
    /**
     * List supported languages.
     *
     * Lists all supported languages for translation. The method returns an array of supported languages with information
     * about each language. Languages are listed in alphabetical order by language code (for example, `af`, `ar`). In
     * addition to basic information about each language, the response indicates whether the language is
     * `supported_as_source` for translation and `supported_as_target` for translation. It also lists whether the language
     * is `identifiable`.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Languages>>}
     */
    LanguageTranslatorV3.prototype.listLanguages = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listLanguages');
        var parameters = {
            options: {
                url: '/v3/languages',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * translation
     ************************/
    /**
     * Translate.
     *
     * Translates the input text from the source language to the target language. Specify a model ID that indicates the
     * source and target languages, or specify the source and target languages individually. You can omit the source
     * language to have the service attempt to detect the language from the input text. If you omit the source language,
     * the request must contain sufficient input text for the service to identify the source language.
     *
     * You can translate a maximum of 50 KB (51,200 bytes) of text with a single request. All input text must be encoded
     * in UTF-8 format.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.text - Input text in UTF-8 encoding. Submit a maximum of 50 KB (51,200 bytes) of text with
     * a single request. Multiple elements result in multiple translations in the response.
     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided
     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is
     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.
     * @param {string} [params.source] - Language code that specifies the language of the input text. If omitted, the
     * service derives the source language from the input text. The input must contain sufficient text for the service to
     * identify the language reliably.
     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if
     * model ID is not specified.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationResult>>}
     */
    LanguageTranslatorV3.prototype.translate = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.text,
            'model_id': _params.modelId,
            'source': _params.source,
            'target': _params.target
        };
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'translate');
        var parameters = {
            options: {
                url: '/v3/translate',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * identification
     ************************/
    /**
     * List identifiable languages.
     *
     * Lists the languages that the service can identify. Returns the language code (for example, `en` for English or `es`
     * for Spanish) and name of each language.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiableLanguages>>}
     */
    LanguageTranslatorV3.prototype.listIdentifiableLanguages = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listIdentifiableLanguages');
        var parameters = {
            options: {
                url: '/v3/identifiable_languages',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Identify language.
     *
     * Identifies the language of the input text.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.text - Input text in UTF-8 format.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiedLanguages>>}
     */
    LanguageTranslatorV3.prototype.identify = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = _params.text;
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'identify');
        var parameters = {
            options: {
                url: '/v3/identify',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'text/plain',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * models
     ************************/
    /**
     * List models.
     *
     * Lists available translation models.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.source] - Specify a language code to filter results by source language.
     * @param {string} [params.target] - Specify a language code to filter results by target language.
     * @param {boolean} [params._default] - If the `default` parameter isn't specified, the service returns all models
     * (default and non-default) for each language pair. To return only default models, set this parameter to `true`. To
     * return only non-default models, set this parameter to `false`. There is exactly one default model, the IBM-provided
     * base model, per language pair.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModels>>}
     */
    LanguageTranslatorV3.prototype.listModels = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version,
            'source': _params.source,
            'target': _params.target,
            'default': _params._default
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listModels');
        var parameters = {
            options: {
                url: '/v3/models',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create model.
     *
     * Uploads training files to customize a translation model. You can customize a model with a forced glossary or with a
     * parallel corpus:
     * * Use a *forced glossary* to force certain terms and phrases to be translated in a specific way. You can upload
     * only a single forced glossary file for a model. The size of a forced glossary file for a custom model is limited to
     * 10 MB.
     * * Use a *parallel corpus* when you want your custom model to learn from general translation patterns in parallel
     * sentences in your samples. What your model learns from a parallel corpus can improve translation results for input
     * text that the model has not been trained on. You can upload multiple parallel corpora files with a request. To
     * successfully train with parallel corpora, the corpora files must contain a cumulative total of at least 5000
     * parallel sentences. The cumulative size of all uploaded corpus files for a custom model is limited to 250 MB.
     *
     * Depending on the type of customization and the size of the uploaded files, training time can range from minutes for
     * a glossary to several hours for a large parallel corpus. To create a model that is customized with a parallel
     * corpus and a forced glossary, customize the model with a parallel corpus first and then customize the resulting
     * model with a forced glossary.
     *
     * You can create a maximum of 10 custom models per language pair. For more information about customizing a
     * translation model, including the formatting and character restrictions for data files, see [Customizing your
     * model](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing).
     *
     * #### Supported file formats
     *
     *  You can provide your training data for customization in the following document formats:
     * * **TMX** (`.tmx`) - Translation Memory eXchange (TMX) is an XML specification for the exchange of translation
     * memories.
     * * **XLIFF** (`.xliff`) - XML Localization Interchange File Format (XLIFF) is an XML specification for the exchange
     * of translation memories.
     * * **CSV** (`.csv`) - Comma-separated values (CSV) file with two columns for aligned sentences and phrases. The
     * first row must have two language codes. The first column is for the source language code, and the second column is
     * for the target language code.
     * * **TSV** (`.tsv` or `.tab`) - Tab-separated values (TSV) file with two columns for aligned sentences and phrases.
     * The first row must have two language codes. The first column is for the source language code, and the second column
     * is for the target language code.
     * * **JSON** (`.json`) - Custom JSON format for specifying aligned sentences and phrases.
     * * **Microsoft Excel** (`.xls` or `.xlsx`) - Excel file with the first two columns for aligned sentences and
     * phrases. The first row contains the language code.
     *
     * You must encode all text data in UTF-8 format. For more information, see [Supported document formats for training
     * data](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing#supported-document-formats-for-training-data).
     *
     *
     * #### Specifying file formats
     *
     *  You can indicate the format of a file by including the file extension with the file name. Use the file extensions
     * shown in **Supported file formats**.
     *
     * Alternatively, you can omit the file extension and specify one of the following `content-type` specifications for
     * the file:
     * * **TMX** - `application/x-tmx+xml`
     * * **XLIFF** - `application/xliff+xml`
     * * **CSV** - `text/csv`
     * * **TSV** - `text/tab-separated-values`
     * * **JSON** - `application/json`
     * * **Microsoft Excel** - `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     * For example, with `curl`, use the following `content-type` specification to indicate the format of a CSV file named
     * **glossary**:
     *
     * `--form "forced_glossary=@glossary;type=text/csv"`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.baseModelId - The ID of the translation model to use as the base for customization. To see
     * available models and IDs, use the `List models` method. Most models that are provided with the service are
     * customizable. In addition, all models that you create with parallel corpora customization can be further customized
     * with a forced glossary.
     * @param {NodeJS.ReadableStream|Buffer} [params.forcedGlossary] - A file with forced glossary terms for the source
     * and target languages. The customizations in the file completely overwrite the domain translation data, including
     * high frequency or high confidence phrase translations.
     *
     * You can upload only one glossary file for a custom model, and the glossary can have a maximum size of 10 MB. A
     * forced glossary must contain single words or short phrases. For more information, see **Supported file formats** in
     * the method description.
     *
     * *With `curl`, use `--form forced_glossary=@{filename}`.*.
     * @param {NodeJS.ReadableStream|Buffer} [params.parallelCorpus] - A file with parallel sentences for the source and
     * target languages. You can upload multiple parallel corpus files in one request by repeating the parameter. All
     * uploaded parallel corpus files combined must contain at least 5000 parallel sentences to train successfully. You
     * can provide a maximum of 500,000 parallel sentences across all corpora.
     *
     * A single entry in a corpus file can contain a maximum of 80 words. All corpora files for a custom model can have a
     * cumulative maximum size of 250 MB. For more information, see **Supported file formats** in the method description.
     *
     * *With `curl`, use `--form parallel_corpus=@{filename}`.*.
     * @param {string} [params.name] - An optional model name that you can use to identify the model. Valid characters are
     * letters, numbers, dashes, underscores, spaces, and apostrophes. The maximum length of the name is 32 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}
     */
    LanguageTranslatorV3.prototype.createModel = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['baseModelId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'forced_glossary': {
                data: _params.forcedGlossary,
                contentType: 'application/octet-stream'
            },
            'parallel_corpus': {
                data: _params.parallelCorpus,
                contentType: 'application/octet-stream'
            }
        };
        var query = {
            'version': this.version,
            'base_model_id': _params.baseModelId,
            'name': _params.name
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'createModel');
        var parameters = {
            options: {
                url: '/v3/models',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete model.
     *
     * Deletes a custom translation model.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DeleteModelResult>>}
     */
    LanguageTranslatorV3.prototype.deleteModel = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['modelId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'model_id': _params.modelId
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteModel');
        var parameters = {
            options: {
                url: '/v3/models/{model_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get model details.
     *
     * Gets information about a translation model, including training status for custom models. Use this API call to poll
     * the status of your customization request. A successfully completed training has a status of `available`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to get.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}
     */
    LanguageTranslatorV3.prototype.getModel = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['modelId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'model_id': _params.modelId
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getModel');
        var parameters = {
            options: {
                url: '/v3/models/{model_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * documentTranslation
     ************************/
    /**
     * List documents.
     *
     * Lists documents that have been submitted for translation.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentList>>}
     */
    LanguageTranslatorV3.prototype.listDocuments = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'listDocuments');
        var parameters = {
            options: {
                url: '/v3/documents',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Translate document.
     *
     * Submit a document for translation. You can submit the document contents in the `file` parameter, or you can
     * reference a previously submitted document by document ID. The maximum file size for document translation is
     * * 20 MB for service instances on the Standard, Advanced, and Premium plans
     * * 2 MB for service instances on the Lite plan.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The contents of the source file to translate. The maximum file
     * size for document translation is 20 MB for service instances on the Standard, Advanced, and Premium plans, and 2 MB
     * for service instances on the Lite plan. For more information, see [Supported file formats
     * (Beta)](https://cloud.ibm.com/docs/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats).
     * @param {string} params.filename - The filename for file.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided
     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is
     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.
     * @param {string} [params.source] - Language code that specifies the language of the source document. If omitted, the
     * service derives the source language from the input text. The input must contain sufficient text for the service to
     * identify the language reliably.
     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if
     * model ID is not specified.
     * @param {string} [params.documentId] - To use a previously submitted document as the source for a new translation,
     * enter the `document_id` of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}
     */
    LanguageTranslatorV3.prototype.translateDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['file', 'filename'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                filename: _params.filename,
                contentType: _params.fileContentType
            },
            'model_id': _params.modelId,
            'source': _params.source,
            'target': _params.target,
            'document_id': _params.documentId
        };
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'translateDocument');
        var parameters = {
            options: {
                url: '/v3/documents',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get document status.
     *
     * Gets the translation status of a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}
     */
    LanguageTranslatorV3.prototype.getDocumentStatus = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['documentId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'document_id': _params.documentId
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getDocumentStatus');
        var parameters = {
            options: {
                url: '/v3/documents/{document_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete document.
     *
     * Deletes a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - Document ID of the document to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Empty>>}
     */
    LanguageTranslatorV3.prototype.deleteDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['documentId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'document_id': _params.documentId
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'deleteDocument');
        var parameters = {
            options: {
                url: '/v3/documents/{document_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {}, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get translated document.
     *
     * Gets the translated document associated with the given document ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document that was submitted for translation.
     * @param {string} [params.accept] - The type of the response: application/powerpoint, application/mspowerpoint,
     * application/x-rtf, application/json, application/xml, application/vnd.ms-excel,
     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,
     * application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,
     * application/vnd.openxmlformats-officedocument.wordprocessingml.document,
     * application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,
     * application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,
     * text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For
     * example, 'text/html;charset=utf-8'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<NodeJS.ReadableStream|Buffer>>}
     */
    LanguageTranslatorV3.prototype.getTranslatedDocument = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['documentId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'document_id': _params.documentId
        };
        var sdkHeaders = common_1.getSdkHeaders(LanguageTranslatorV3.DEFAULT_SERVICE_NAME, 'v3', 'getTranslatedDocument');
        var parameters = {
            options: {
                url: '/v3/documents/{document_id}/translated_document',
                method: 'GET',
                qs: query,
                path: path,
                responseType: 'stream',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': _params.accept
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    LanguageTranslatorV3.DEFAULT_SERVICE_URL = 'https://api.us-south.language-translator.watson.cloud.ibm.com';
    LanguageTranslatorV3.DEFAULT_SERVICE_NAME = 'language_translator';
    return LanguageTranslatorV3;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (LanguageTranslatorV3) {
    /** Constants for the `translateDocument` operation. */
    var TranslateDocumentConstants;
    (function (TranslateDocumentConstants) {
        /** The content type of file. */
        var FileContentType;
        (function (FileContentType) {
            FileContentType["APPLICATION_POWERPOINT"] = "application/powerpoint";
            FileContentType["APPLICATION_MSPOWERPOINT"] = "application/mspowerpoint";
            FileContentType["APPLICATION_X_RTF"] = "application/x-rtf";
            FileContentType["APPLICATION_JSON"] = "application/json";
            FileContentType["APPLICATION_XML"] = "application/xml";
            FileContentType["APPLICATION_VND_MS_EXCEL"] = "application/vnd.ms-excel";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            FileContentType["APPLICATION_VND_MS_POWERPOINT"] = "application/vnd.ms-powerpoint";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
            FileContentType["APPLICATION_MSWORD"] = "application/msword";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            FileContentType["APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET"] = "application/vnd.oasis.opendocument.spreadsheet";
            FileContentType["APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION"] = "application/vnd.oasis.opendocument.presentation";
            FileContentType["APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT"] = "application/vnd.oasis.opendocument.text";
            FileContentType["APPLICATION_PDF"] = "application/pdf";
            FileContentType["APPLICATION_RTF"] = "application/rtf";
            FileContentType["TEXT_HTML"] = "text/html";
            FileContentType["TEXT_JSON"] = "text/json";
            FileContentType["TEXT_PLAIN"] = "text/plain";
            FileContentType["TEXT_RICHTEXT"] = "text/richtext";
            FileContentType["TEXT_RTF"] = "text/rtf";
            FileContentType["TEXT_SBV"] = "text/sbv";
            FileContentType["TEXT_SRT"] = "text/srt";
            FileContentType["TEXT_VTT"] = "text/vtt";
            FileContentType["TEXT_XML"] = "text/xml";
        })(FileContentType = TranslateDocumentConstants.FileContentType || (TranslateDocumentConstants.FileContentType = {}));
    })(TranslateDocumentConstants = LanguageTranslatorV3.TranslateDocumentConstants || (LanguageTranslatorV3.TranslateDocumentConstants = {}));
    /** Constants for the `getTranslatedDocument` operation. */
    var GetTranslatedDocumentConstants;
    (function (GetTranslatedDocumentConstants) {
        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf, application/json, application/xml, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain, text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For example, 'text/html;charset=utf-8'. */
        var Accept;
        (function (Accept) {
            Accept["APPLICATION_POWERPOINT"] = "application/powerpoint";
            Accept["APPLICATION_MSPOWERPOINT"] = "application/mspowerpoint";
            Accept["APPLICATION_X_RTF"] = "application/x-rtf";
            Accept["APPLICATION_JSON"] = "application/json";
            Accept["APPLICATION_XML"] = "application/xml";
            Accept["APPLICATION_VND_MS_EXCEL"] = "application/vnd.ms-excel";
            Accept["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET"] = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Accept["APPLICATION_VND_MS_POWERPOINT"] = "application/vnd.ms-powerpoint";
            Accept["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION"] = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
            Accept["APPLICATION_MSWORD"] = "application/msword";
            Accept["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            Accept["APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET"] = "application/vnd.oasis.opendocument.spreadsheet";
            Accept["APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION"] = "application/vnd.oasis.opendocument.presentation";
            Accept["APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT"] = "application/vnd.oasis.opendocument.text";
            Accept["APPLICATION_PDF"] = "application/pdf";
            Accept["APPLICATION_RTF"] = "application/rtf";
            Accept["TEXT_HTML"] = "text/html";
            Accept["TEXT_JSON"] = "text/json";
            Accept["TEXT_PLAIN"] = "text/plain";
            Accept["TEXT_RICHTEXT"] = "text/richtext";
            Accept["TEXT_RTF"] = "text/rtf";
            Accept["TEXT_XML"] = "text/xml";
        })(Accept = GetTranslatedDocumentConstants.Accept || (GetTranslatedDocumentConstants.Accept = {}));
    })(GetTranslatedDocumentConstants = LanguageTranslatorV3.GetTranslatedDocumentConstants || (LanguageTranslatorV3.GetTranslatedDocumentConstants = {}));
})(LanguageTranslatorV3 || (LanguageTranslatorV3 = {}));
module.exports = LanguageTranslatorV3;
