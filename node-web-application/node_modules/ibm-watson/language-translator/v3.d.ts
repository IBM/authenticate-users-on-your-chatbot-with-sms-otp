/**
 * (C) Copyright IBM Corp. 2018, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * IBM Watson&trade; Language Translator translates text from one language to another. The service offers multiple
 * IBM-provided translation models that you can customize based on your unique terminology and language. Use Language
 * Translator to take news from across the globe and present it in your language, communicate with your customers in
 * their own language, and more.
 */
declare class LanguageTranslatorV3 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /** Release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. The current
     *  version is `2018-05-01`.
     */
    version: string;
    /**
     * Construct a LanguageTranslatorV3 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in
     * YYYY-MM-DD format. The current version is `2018-05-01`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.language-translator.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {LanguageTranslatorV3}
     */
    constructor(options: UserOptions);
    /*************************
     * languages
     ************************/
    /**
     * List supported languages.
     *
     * Lists all supported languages for translation. The method returns an array of supported languages with information
     * about each language. Languages are listed in alphabetical order by language code (for example, `af`, `ar`). In
     * addition to basic information about each language, the response indicates whether the language is
     * `supported_as_source` for translation and `supported_as_target` for translation. It also lists whether the language
     * is `identifiable`.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Languages>>}
     */
    listLanguages(params?: LanguageTranslatorV3.ListLanguagesParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Languages>>;
    /*************************
     * translation
     ************************/
    /**
     * Translate.
     *
     * Translates the input text from the source language to the target language. Specify a model ID that indicates the
     * source and target languages, or specify the source and target languages individually. You can omit the source
     * language to have the service attempt to detect the language from the input text. If you omit the source language,
     * the request must contain sufficient input text for the service to identify the source language.
     *
     * You can translate a maximum of 50 KB (51,200 bytes) of text with a single request. All input text must be encoded
     * in UTF-8 format.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.text - Input text in UTF-8 encoding. Submit a maximum of 50 KB (51,200 bytes) of text with
     * a single request. Multiple elements result in multiple translations in the response.
     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided
     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is
     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.
     * @param {string} [params.source] - Language code that specifies the language of the input text. If omitted, the
     * service derives the source language from the input text. The input must contain sufficient text for the service to
     * identify the language reliably.
     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if
     * model ID is not specified.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationResult>>}
     */
    translate(params: LanguageTranslatorV3.TranslateParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationResult>>;
    /*************************
     * identification
     ************************/
    /**
     * List identifiable languages.
     *
     * Lists the languages that the service can identify. Returns the language code (for example, `en` for English or `es`
     * for Spanish) and name of each language.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiableLanguages>>}
     */
    listIdentifiableLanguages(params?: LanguageTranslatorV3.ListIdentifiableLanguagesParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiableLanguages>>;
    /**
     * Identify language.
     *
     * Identifies the language of the input text.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.text - Input text in UTF-8 format.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiedLanguages>>}
     */
    identify(params: LanguageTranslatorV3.IdentifyParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.IdentifiedLanguages>>;
    /*************************
     * models
     ************************/
    /**
     * List models.
     *
     * Lists available translation models.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.source] - Specify a language code to filter results by source language.
     * @param {string} [params.target] - Specify a language code to filter results by target language.
     * @param {boolean} [params._default] - If the `default` parameter isn't specified, the service returns all models
     * (default and non-default) for each language pair. To return only default models, set this parameter to `true`. To
     * return only non-default models, set this parameter to `false`. There is exactly one default model, the IBM-provided
     * base model, per language pair.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModels>>}
     */
    listModels(params?: LanguageTranslatorV3.ListModelsParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModels>>;
    /**
     * Create model.
     *
     * Uploads training files to customize a translation model. You can customize a model with a forced glossary or with a
     * parallel corpus:
     * * Use a *forced glossary* to force certain terms and phrases to be translated in a specific way. You can upload
     * only a single forced glossary file for a model. The size of a forced glossary file for a custom model is limited to
     * 10 MB.
     * * Use a *parallel corpus* when you want your custom model to learn from general translation patterns in parallel
     * sentences in your samples. What your model learns from a parallel corpus can improve translation results for input
     * text that the model has not been trained on. You can upload multiple parallel corpora files with a request. To
     * successfully train with parallel corpora, the corpora files must contain a cumulative total of at least 5000
     * parallel sentences. The cumulative size of all uploaded corpus files for a custom model is limited to 250 MB.
     *
     * Depending on the type of customization and the size of the uploaded files, training time can range from minutes for
     * a glossary to several hours for a large parallel corpus. To create a model that is customized with a parallel
     * corpus and a forced glossary, customize the model with a parallel corpus first and then customize the resulting
     * model with a forced glossary.
     *
     * You can create a maximum of 10 custom models per language pair. For more information about customizing a
     * translation model, including the formatting and character restrictions for data files, see [Customizing your
     * model](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing).
     *
     * #### Supported file formats
     *
     *  You can provide your training data for customization in the following document formats:
     * * **TMX** (`.tmx`) - Translation Memory eXchange (TMX) is an XML specification for the exchange of translation
     * memories.
     * * **XLIFF** (`.xliff`) - XML Localization Interchange File Format (XLIFF) is an XML specification for the exchange
     * of translation memories.
     * * **CSV** (`.csv`) - Comma-separated values (CSV) file with two columns for aligned sentences and phrases. The
     * first row must have two language codes. The first column is for the source language code, and the second column is
     * for the target language code.
     * * **TSV** (`.tsv` or `.tab`) - Tab-separated values (TSV) file with two columns for aligned sentences and phrases.
     * The first row must have two language codes. The first column is for the source language code, and the second column
     * is for the target language code.
     * * **JSON** (`.json`) - Custom JSON format for specifying aligned sentences and phrases.
     * * **Microsoft Excel** (`.xls` or `.xlsx`) - Excel file with the first two columns for aligned sentences and
     * phrases. The first row contains the language code.
     *
     * You must encode all text data in UTF-8 format. For more information, see [Supported document formats for training
     * data](https://cloud.ibm.com/docs/language-translator?topic=language-translator-customizing#supported-document-formats-for-training-data).
     *
     *
     * #### Specifying file formats
     *
     *  You can indicate the format of a file by including the file extension with the file name. Use the file extensions
     * shown in **Supported file formats**.
     *
     * Alternatively, you can omit the file extension and specify one of the following `content-type` specifications for
     * the file:
     * * **TMX** - `application/x-tmx+xml`
     * * **XLIFF** - `application/xliff+xml`
     * * **CSV** - `text/csv`
     * * **TSV** - `text/tab-separated-values`
     * * **JSON** - `application/json`
     * * **Microsoft Excel** - `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`
     *
     * For example, with `curl`, use the following `content-type` specification to indicate the format of a CSV file named
     * **glossary**:
     *
     * `--form "forced_glossary=@glossary;type=text/csv"`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.baseModelId - The ID of the translation model to use as the base for customization. To see
     * available models and IDs, use the `List models` method. Most models that are provided with the service are
     * customizable. In addition, all models that you create with parallel corpora customization can be further customized
     * with a forced glossary.
     * @param {NodeJS.ReadableStream|Buffer} [params.forcedGlossary] - A file with forced glossary terms for the source
     * and target languages. The customizations in the file completely overwrite the domain translation data, including
     * high frequency or high confidence phrase translations.
     *
     * You can upload only one glossary file for a custom model, and the glossary can have a maximum size of 10 MB. A
     * forced glossary must contain single words or short phrases. For more information, see **Supported file formats** in
     * the method description.
     *
     * *With `curl`, use `--form forced_glossary=@{filename}`.*.
     * @param {NodeJS.ReadableStream|Buffer} [params.parallelCorpus] - A file with parallel sentences for the source and
     * target languages. You can upload multiple parallel corpus files in one request by repeating the parameter. All
     * uploaded parallel corpus files combined must contain at least 5000 parallel sentences to train successfully. You
     * can provide a maximum of 500,000 parallel sentences across all corpora.
     *
     * A single entry in a corpus file can contain a maximum of 80 words. All corpora files for a custom model can have a
     * cumulative maximum size of 250 MB. For more information, see **Supported file formats** in the method description.
     *
     * *With `curl`, use `--form parallel_corpus=@{filename}`.*.
     * @param {string} [params.name] - An optional model name that you can use to identify the model. Valid characters are
     * letters, numbers, dashes, underscores, spaces, and apostrophes. The maximum length of the name is 32 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}
     */
    createModel(params: LanguageTranslatorV3.CreateModelParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>;
    /**
     * Delete model.
     *
     * Deletes a custom translation model.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DeleteModelResult>>}
     */
    deleteModel(params: LanguageTranslatorV3.DeleteModelParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DeleteModelResult>>;
    /**
     * Get model details.
     *
     * Gets information about a translation model, including training status for custom models. Use this API call to poll
     * the status of your customization request. A successfully completed training has a status of `available`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to get.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>}
     */
    getModel(params: LanguageTranslatorV3.GetModelParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.TranslationModel>>;
    /*************************
     * documentTranslation
     ************************/
    /**
     * List documents.
     *
     * Lists documents that have been submitted for translation.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentList>>}
     */
    listDocuments(params?: LanguageTranslatorV3.ListDocumentsParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentList>>;
    /**
     * Translate document.
     *
     * Submit a document for translation. You can submit the document contents in the `file` parameter, or you can
     * reference a previously submitted document by document ID. The maximum file size for document translation is
     * * 20 MB for service instances on the Standard, Advanced, and Premium plans
     * * 2 MB for service instances on the Lite plan.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The contents of the source file to translate. The maximum file
     * size for document translation is 20 MB for service instances on the Standard, Advanced, and Premium plans, and 2 MB
     * for service instances on the Lite plan. For more information, see [Supported file formats
     * (Beta)](https://cloud.ibm.com/docs/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats).
     * @param {string} params.filename - The filename for file.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.modelId] - The model to use for translation. For example, `en-de` selects the IBM-provided
     * base model for English-to-German translation. A model ID overrides the `source` and `target` parameters and is
     * required if you use a custom model. If no model ID is specified, you must specify at least a target language.
     * @param {string} [params.source] - Language code that specifies the language of the source document. If omitted, the
     * service derives the source language from the input text. The input must contain sufficient text for the service to
     * identify the language reliably.
     * @param {string} [params.target] - Language code that specifies the target language for translation. Required if
     * model ID is not specified.
     * @param {string} [params.documentId] - To use a previously submitted document as the source for a new translation,
     * enter the `document_id` of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}
     */
    translateDocument(params: LanguageTranslatorV3.TranslateDocumentParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>;
    /**
     * Get document status.
     *
     * Gets the translation status of a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>}
     */
    getDocumentStatus(params: LanguageTranslatorV3.GetDocumentStatusParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.DocumentStatus>>;
    /**
     * Delete document.
     *
     * Deletes a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - Document ID of the document to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Empty>>}
     */
    deleteDocument(params: LanguageTranslatorV3.DeleteDocumentParams): Promise<LanguageTranslatorV3.Response<LanguageTranslatorV3.Empty>>;
    /**
     * Get translated document.
     *
     * Gets the translated document associated with the given document ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.documentId - The document ID of the document that was submitted for translation.
     * @param {string} [params.accept] - The type of the response: application/powerpoint, application/mspowerpoint,
     * application/x-rtf, application/json, application/xml, application/vnd.ms-excel,
     * application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,
     * application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,
     * application/vnd.openxmlformats-officedocument.wordprocessingml.document,
     * application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,
     * application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,
     * text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For
     * example, 'text/html;charset=utf-8'.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<LanguageTranslatorV3.Response<NodeJS.ReadableStream|Buffer>>}
     */
    getTranslatedDocument(params: LanguageTranslatorV3.GetTranslatedDocumentParams): Promise<LanguageTranslatorV3.Response<NodeJS.ReadableStream | Buffer>>;
}
/*************************
 * interfaces
 ************************/
declare namespace LanguageTranslatorV3 {
    /** Options for the `LanguageTranslatorV3` constructor. */
    interface Options extends UserOptions {
        /** Release date of the version of the API you want to use. Specify dates in YYYY-MM-DD format. The current
         *  version is `2018-05-01`.
         */
        version: string;
    }
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `listLanguages` operation. */
    interface ListLanguagesParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `translate` operation. */
    interface TranslateParams {
        /** Input text in UTF-8 encoding. Submit a maximum of 50 KB (51,200 bytes) of text with a single request.
         *  Multiple elements result in multiple translations in the response.
         */
        text: string[];
        /** The model to use for translation. For example, `en-de` selects the IBM-provided base model for
         *  English-to-German translation. A model ID overrides the `source` and `target` parameters and is required if you
         *  use a custom model. If no model ID is specified, you must specify at least a target language.
         */
        modelId?: string;
        /** Language code that specifies the language of the input text. If omitted, the service derives the source
         *  language from the input text. The input must contain sufficient text for the service to identify the language
         *  reliably.
         */
        source?: string;
        /** Language code that specifies the target language for translation. Required if model ID is not specified. */
        target?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listIdentifiableLanguages` operation. */
    interface ListIdentifiableLanguagesParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `identify` operation. */
    interface IdentifyParams {
        /** Input text in UTF-8 format. */
        text: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listModels` operation. */
    interface ListModelsParams {
        /** Specify a language code to filter results by source language. */
        source?: string;
        /** Specify a language code to filter results by target language. */
        target?: string;
        /** If the `default` parameter isn't specified, the service returns all models (default and non-default) for
         *  each language pair. To return only default models, set this parameter to `true`. To return only non-default
         *  models, set this parameter to `false`. There is exactly one default model, the IBM-provided base model, per
         *  language pair.
         */
        _default?: boolean;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createModel` operation. */
    interface CreateModelParams {
        /** The ID of the translation model to use as the base for customization. To see available models and IDs, use
         *  the `List models` method. Most models that are provided with the service are customizable. In addition, all
         *  models that you create with parallel corpora customization can be further customized with a forced glossary.
         */
        baseModelId: string;
        /** A file with forced glossary terms for the source and target languages. The customizations in the file
         *  completely overwrite the domain translation data, including high frequency or high confidence phrase
         *  translations.
         *
         *  You can upload only one glossary file for a custom model, and the glossary can have a maximum size of 10 MB. A
         *  forced glossary must contain single words or short phrases. For more information, see **Supported file formats**
         *  in the method description.
         *
         *  *With `curl`, use `--form forced_glossary=@{filename}`.*.
         */
        forcedGlossary?: NodeJS.ReadableStream | Buffer;
        /** A file with parallel sentences for the source and target languages. You can upload multiple parallel corpus
         *  files in one request by repeating the parameter. All uploaded parallel corpus files combined must contain at
         *  least 5000 parallel sentences to train successfully. You can provide a maximum of 500,000 parallel sentences
         *  across all corpora.
         *
         *  A single entry in a corpus file can contain a maximum of 80 words. All corpora files for a custom model can have
         *  a cumulative maximum size of 250 MB. For more information, see **Supported file formats** in the method
         *  description.
         *
         *  *With `curl`, use `--form parallel_corpus=@{filename}`.*.
         */
        parallelCorpus?: NodeJS.ReadableStream | Buffer;
        /** An optional model name that you can use to identify the model. Valid characters are letters, numbers,
         *  dashes, underscores, spaces, and apostrophes. The maximum length of the name is 32 characters.
         */
        name?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteModel` operation. */
    interface DeleteModelParams {
        /** Model ID of the model to delete. */
        modelId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getModel` operation. */
    interface GetModelParams {
        /** Model ID of the model to get. */
        modelId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listDocuments` operation. */
    interface ListDocumentsParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `translateDocument` operation. */
    interface TranslateDocumentParams {
        /** The contents of the source file to translate. The maximum file size for document translation is 20 MB for
         *  service instances on the Standard, Advanced, and Premium plans, and 2 MB for service instances on the Lite plan.
         *  For more information, see [Supported file formats
         *  (Beta)](https://cloud.ibm.com/docs/language-translator?topic=language-translator-document-translator-tutorial#supported-file-formats).
         */
        file: NodeJS.ReadableStream | Buffer;
        /** The filename for file. */
        filename: string;
        /** The content type of file. */
        fileContentType?: TranslateDocumentConstants.FileContentType | string;
        /** The model to use for translation. For example, `en-de` selects the IBM-provided base model for
         *  English-to-German translation. A model ID overrides the `source` and `target` parameters and is required if you
         *  use a custom model. If no model ID is specified, you must specify at least a target language.
         */
        modelId?: string;
        /** Language code that specifies the language of the source document. If omitted, the service derives the source
         *  language from the input text. The input must contain sufficient text for the service to identify the language
         *  reliably.
         */
        source?: string;
        /** Language code that specifies the target language for translation. Required if model ID is not specified. */
        target?: string;
        /** To use a previously submitted document as the source for a new translation, enter the `document_id` of the
         *  document.
         */
        documentId?: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `translateDocument` operation. */
    namespace TranslateDocumentConstants {
        /** The content type of file. */
        enum FileContentType {
            APPLICATION_POWERPOINT = "application/powerpoint",
            APPLICATION_MSPOWERPOINT = "application/mspowerpoint",
            APPLICATION_X_RTF = "application/x-rtf",
            APPLICATION_JSON = "application/json",
            APPLICATION_XML = "application/xml",
            APPLICATION_VND_MS_EXCEL = "application/vnd.ms-excel",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            APPLICATION_VND_MS_POWERPOINT = "application/vnd.ms-powerpoint",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "application/vnd.oasis.opendocument.spreadsheet",
            APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "application/vnd.oasis.opendocument.presentation",
            APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "application/vnd.oasis.opendocument.text",
            APPLICATION_PDF = "application/pdf",
            APPLICATION_RTF = "application/rtf",
            TEXT_HTML = "text/html",
            TEXT_JSON = "text/json",
            TEXT_PLAIN = "text/plain",
            TEXT_RICHTEXT = "text/richtext",
            TEXT_RTF = "text/rtf",
            TEXT_SBV = "text/sbv",
            TEXT_SRT = "text/srt",
            TEXT_VTT = "text/vtt",
            TEXT_XML = "text/xml"
        }
    }
    /** Parameters for the `getDocumentStatus` operation. */
    interface GetDocumentStatusParams {
        /** The document ID of the document. */
        documentId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteDocument` operation. */
    interface DeleteDocumentParams {
        /** Document ID of the document to delete. */
        documentId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getTranslatedDocument` operation. */
    interface GetTranslatedDocumentParams {
        /** The document ID of the document that was submitted for translation. */
        documentId: string;
        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf,
         *  application/json, application/xml, application/vnd.ms-excel,
         *  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint,
         *  application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword,
         *  application/vnd.openxmlformats-officedocument.wordprocessingml.document,
         *  application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation,
         *  application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain,
         *  text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter.
         *  For example, 'text/html;charset=utf-8'.
         */
        accept?: GetTranslatedDocumentConstants.Accept | string;
        headers?: OutgoingHttpHeaders;
    }
    /** Constants for the `getTranslatedDocument` operation. */
    namespace GetTranslatedDocumentConstants {
        /** The type of the response: application/powerpoint, application/mspowerpoint, application/x-rtf, application/json, application/xml, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.presentation, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.text, application/pdf, application/rtf, text/html, text/json, text/plain, text/richtext, text/rtf, or text/xml. A character encoding can be specified by including a `charset` parameter. For example, 'text/html;charset=utf-8'. */
        enum Accept {
            APPLICATION_POWERPOINT = "application/powerpoint",
            APPLICATION_MSPOWERPOINT = "application/mspowerpoint",
            APPLICATION_X_RTF = "application/x-rtf",
            APPLICATION_JSON = "application/json",
            APPLICATION_XML = "application/xml",
            APPLICATION_VND_MS_EXCEL = "application/vnd.ms-excel",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            APPLICATION_VND_MS_POWERPOINT = "application/vnd.ms-powerpoint",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "application/vnd.openxmlformats-officedocument.presentationml.presentation",
            APPLICATION_MSWORD = "application/msword",
            APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "application/vnd.oasis.opendocument.spreadsheet",
            APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "application/vnd.oasis.opendocument.presentation",
            APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "application/vnd.oasis.opendocument.text",
            APPLICATION_PDF = "application/pdf",
            APPLICATION_RTF = "application/rtf",
            TEXT_HTML = "text/html",
            TEXT_JSON = "text/json",
            TEXT_PLAIN = "text/plain",
            TEXT_RICHTEXT = "text/richtext",
            TEXT_RTF = "text/rtf",
            TEXT_XML = "text/xml"
        }
    }
    /*************************
     * model interfaces
     ************************/
    /** DeleteModelResult. */
    interface DeleteModelResult {
        /** "OK" indicates that the model was successfully deleted. */
        status: string;
    }
    /** DocumentList. */
    interface DocumentList {
        /** An array of all previously submitted documents. */
        documents: DocumentStatus[];
    }
    /** Document information, including translation status. */
    interface DocumentStatus {
        /** System generated ID identifying a document being translated using one specific translation model. */
        document_id: string;
        /** filename from the submission (if it was missing in the multipart-form, 'noname.<ext matching content type>'
         *  is used.
         */
        filename: string;
        /** The status of the translation job associated with a submitted document. */
        status: string;
        /** A globally unique string that identifies the underlying model that is used for translation. */
        model_id: string;
        /** Model ID of the base model that was used to customize the model. If the model is not a custom model, this
         *  will be absent or an empty string.
         */
        base_model_id?: string;
        /** Translation source language code. */
        source: string;
        /** A score between 0 and 1 indicating the confidence of source language detection. A higher value indicates
         *  greater confidence. This is returned only when the service automatically detects the source language.
         */
        detected_language_confidence?: number;
        /** Translation target language code. */
        target: string;
        /** The time when the document was submitted. */
        created: string;
        /** The time when the translation completed. */
        completed?: string;
        /** An estimate of the number of words in the source document. Returned only if `status` is `available`. */
        word_count?: number;
        /** The number of characters in the source document, present only if status=available. */
        character_count?: number;
    }
    /** IdentifiableLanguage. */
    interface IdentifiableLanguage {
        /** The language code for an identifiable language. */
        language: string;
        /** The name of the identifiable language. */
        name: string;
    }
    /** IdentifiableLanguages. */
    interface IdentifiableLanguages {
        /** A list of all languages that the service can identify. */
        languages: IdentifiableLanguage[];
    }
    /** IdentifiedLanguage. */
    interface IdentifiedLanguage {
        /** The language code for an identified language. */
        language: string;
        /** The confidence score for the identified language. */
        confidence: number;
    }
    /** IdentifiedLanguages. */
    interface IdentifiedLanguages {
        /** A ranking of identified languages with confidence scores. */
        languages: IdentifiedLanguage[];
    }
    /** Response payload for languages. */
    interface Language {
        /** The language code for the language (for example, `af`). */
        language?: string;
        /** The name of the language in English (for example, `Afrikaans`). */
        language_name?: string;
        /** The native name of the language (for example, `Afrikaans`). */
        native_language_name?: string;
        /** The country code for the language (for example, `ZA` for South Africa). */
        country_code?: string;
        /** Indicates whether words of the language are separated by whitespace: `true` if the words are separated;
         *  `false` otherwise.
         */
        words_separated?: boolean;
        /** Indicates the direction of the language: `right_to_left` or `left_to_right`. */
        direction?: string;
        /** Indicates whether the language can be used as the source for translation: `true` if the language can be used
         *  as the source; `false` otherwise.
         */
        supported_as_source?: boolean;
        /** Indicates whether the language can be used as the target for translation: `true` if the language can be used
         *  as the target; `false` otherwise.
         */
        supported_as_target?: boolean;
        /** Indicates whether the language supports automatic detection: `true` if the language can be detected
         *  automatically; `false` otherwise.
         */
        identifiable?: boolean;
    }
    /** The response type for listing supported languages. */
    interface Languages {
        /** An array of supported languages with information about each language. */
        languages: Language[];
    }
    /** Translation. */
    interface Translation {
        /** Translation output in UTF-8. */
        translation: string;
    }
    /** Response payload for models. */
    interface TranslationModel {
        /** A globally unique string that identifies the underlying model that is used for translation. */
        model_id: string;
        /** Optional name that can be specified when the model is created. */
        name?: string;
        /** Translation source language code. */
        source?: string;
        /** Translation target language code. */
        target?: string;
        /** Model ID of the base model that was used to customize the model. If the model is not a custom model, this
         *  will be an empty string.
         */
        base_model_id?: string;
        /** The domain of the translation model. */
        domain?: string;
        /** Whether this model can be used as a base for customization. Customized models are not further customizable,
         *  and some base models are not customizable.
         */
        customizable?: boolean;
        /** Whether or not the model is a default model. A default model is the model for a given language pair that
         *  will be used when that language pair is specified in the source and target parameters.
         */
        default_model?: boolean;
        /** Either an empty string, indicating the model is not a custom model, or the ID of the service instance that
         *  created the model.
         */
        owner?: string;
        /** Availability of a model. */
        status?: string;
    }
    /** The response type for listing existing translation models. */
    interface TranslationModels {
        /** An array of available models. */
        models: TranslationModel[];
    }
    /** TranslationResult. */
    interface TranslationResult {
        /** An estimate of the number of words in the input text. */
        word_count: number;
        /** Number of characters in the input text. */
        character_count: number;
        /** The language code of the source text if the source language was automatically detected. */
        detected_language?: string;
        /** A score between 0 and 1 indicating the confidence of source language detection. A higher value indicates
         *  greater confidence. This is returned only when the service automatically detects the source language.
         */
        detected_language_confidence?: number;
        /** List of translation output in UTF-8, corresponding to the input text entries. */
        translations: Translation[];
    }
}
export = LanguageTranslatorV3;
