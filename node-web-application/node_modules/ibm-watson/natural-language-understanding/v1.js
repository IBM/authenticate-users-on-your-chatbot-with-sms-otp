"use strict";
/**
 * (C) Copyright IBM Corp. 2017, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Analyze various features of text content at scale. Provide text, raw HTML, or a public URL and IBM Watson Natural
 * Language Understanding will give you results for the features you request. The service cleans HTML content before
 * analysis by default, so the results can ignore most advertisements and other unwanted content.
 *
 * You can create [custom
 * models](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-customizing)
 * with Watson Knowledge Studio to detect custom entities and relations in Natural Language Understanding.
 */
var NaturalLanguageUnderstandingV1 = /** @class */ (function (_super) {
    __extends(NaturalLanguageUnderstandingV1, _super);
    /**
     * Construct a NaturalLanguageUnderstandingV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the API version you want to use. Specify dates in YYYY-MM-DD
     * format. The current version is `2020-08-01`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.natural-language-understanding.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {NaturalLanguageUnderstandingV1}
     */
    function NaturalLanguageUnderstandingV1(options) {
        var _this = this;
        options = options || {};
        var requiredParams = ['version'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);
        if (missingParams) {
            throw missingParams;
        }
        if (!options.serviceName) {
            options.serviceName = NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * analyze
     ************************/
    /**
     * Analyze text.
     *
     * Analyzes text, HTML, or a public webpage for the following features:
     * - Categories
     * - Concepts
     * - Emotion
     * - Entities
     * - Keywords
     * - Metadata
     * - Relations
     * - Semantic roles
     * - Sentiment
     * - Syntax
     * - Summarization (Experimental)
     *
     * If a language for the input text is not specified with the `language` parameter, the service [automatically detects
     * the
     * language](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-detectable-languages).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {Features} params.features - Specific features to analyze the document for.
     * @param {string} [params.text] - The plain text to analyze. One of the `text`, `html`, or `url` parameters is
     * required.
     * @param {string} [params.html] - The HTML file to analyze. One of the `text`, `html`, or `url` parameters is
     * required.
     * @param {string} [params.url] - The webpage to analyze. One of the `text`, `html`, or `url` parameters is required.
     * @param {boolean} [params.clean] - Set this to `false` to disable webpage cleaning. For more information about
     * webpage cleaning, see [Analyzing
     * webpages](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-analyzing-webpages).
     * @param {string} [params.xpath] - An [XPath
     * query](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-analyzing-webpages#xpath)
     * to perform on `html` or `url` input. Results of the query will be appended to the cleaned webpage text before it is
     * analyzed. To analyze only the results of the XPath query, set the `clean` parameter to `false`.
     * @param {boolean} [params.fallbackToRaw] - Whether to use raw HTML content if text cleaning fails.
     * @param {boolean} [params.returnAnalyzedText] - Whether or not to return the analyzed text.
     * @param {string} [params.language] - ISO 639-1 code that specifies the language of your text. This overrides
     * automatic language detection. Language support differs depending on the features you include in your analysis. For
     * more information, see [Language
     * support](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-language-support).
     * @param {number} [params.limitTextCharacters] - Sets the maximum number of characters that are processed by the
     * service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageUnderstandingV1.Response<NaturalLanguageUnderstandingV1.AnalysisResults>>}
     */
    NaturalLanguageUnderstandingV1.prototype.analyze = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['features'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'features': _params.features,
            'text': _params.text,
            'html': _params.html,
            'url': _params.url,
            'clean': _params.clean,
            'xpath': _params.xpath,
            'fallback_to_raw': _params.fallbackToRaw,
            'return_analyzed_text': _params.returnAnalyzedText,
            'language': _params.language,
            'limit_text_characters': _params.limitTextCharacters
        };
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_NAME, 'v1', 'analyze');
        var parameters = {
            options: {
                url: '/v1/analyze',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * manageModels
     ************************/
    /**
     * List models.
     *
     * Lists Watson Knowledge Studio [custom entities and relations
     * models](https://cloud.ibm.com/docs/natural-language-understanding?topic=natural-language-understanding-customizing)
     * that are deployed to your Natural Language Understanding service.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageUnderstandingV1.Response<NaturalLanguageUnderstandingV1.ListModelsResults>>}
     */
    NaturalLanguageUnderstandingV1.prototype.listModels = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_NAME, 'v1', 'listModels');
        var parameters = {
            options: {
                url: '/v1/models',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete model.
     *
     * Deletes a custom model.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.modelId - Model ID of the model to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageUnderstandingV1.Response<NaturalLanguageUnderstandingV1.DeleteModelResults>>}
     */
    NaturalLanguageUnderstandingV1.prototype.deleteModel = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['modelId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'model_id': _params.modelId
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteModel');
        var parameters = {
            options: {
                url: '/v1/models/{model_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_URL = 'https://api.us-south.natural-language-understanding.watson.cloud.ibm.com';
    NaturalLanguageUnderstandingV1.DEFAULT_SERVICE_NAME = 'natural-language-understanding';
    return NaturalLanguageUnderstandingV1;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = NaturalLanguageUnderstandingV1;
