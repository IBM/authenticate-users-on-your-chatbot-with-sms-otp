"use strict";
/**
 * (C) Copyright IBM Corp. 2018, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IBM Watson&trade; Compare and Comply analyzes governing documents to provide details about critical aspects of the
 * documents.
 */
var CompareComplyV1 = /** @class */ (function (_super) {
    __extends(CompareComplyV1, _super);
    /**
     * Construct a CompareComplyV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in
     * YYYY-MM-DD format. The current version is `2018-10-15`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.compare-comply.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {CompareComplyV1}
     */
    function CompareComplyV1(options) {
        var _this = this;
        console.warn("On 30 November 2021, Compare and Comply will no longer be available. \n    For more information, see https://github.com/watson-developer-cloud/node-sdk#compare-and-comply-deprecation");
        options = options || {};
        var requiredParams = ['version'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);
        if (missingParams) {
            throw missingParams;
        }
        if (!options.serviceName) {
            options.serviceName = CompareComplyV1.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * hTMLConversion
     ************************/
    /**
     * Convert document to HTML.
     *
     * Converts a document to HTML.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The document to convert.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.HTMLReturn>>}
     */
    CompareComplyV1.prototype.convertToHtml = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['file'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                contentType: _params.fileContentType
            }
        };
        var query = {
            'version': this.version,
            'model': _params.model
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'convertToHtml');
        var parameters = {
            options: {
                url: '/v1/html_conversion',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * elementClassification
     ************************/
    /**
     * Classify the elements of a document.
     *
     * Analyzes the structural and semantic elements of a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The document to classify.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.ClassifyReturn>>}
     */
    CompareComplyV1.prototype.classifyElements = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['file'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                contentType: _params.fileContentType
            }
        };
        var query = {
            'version': this.version,
            'model': _params.model
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'classifyElements');
        var parameters = {
            options: {
                url: '/v1/element_classification',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * tables
     ************************/
    /**
     * Extract a document's tables.
     *
     * Analyzes the tables in a document.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file - The document on which to run table extraction.
     * @param {string} [params.fileContentType] - The content type of file.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.TableReturn>>}
     */
    CompareComplyV1.prototype.extractTables = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['file'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file': {
                data: _params.file,
                contentType: _params.fileContentType
            }
        };
        var query = {
            'version': this.version,
            'model': _params.model
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'extractTables');
        var parameters = {
            options: {
                url: '/v1/tables',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * comparison
     ************************/
    /**
     * Compare two documents.
     *
     * Compares two input documents. Documents must be in the same format.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.file1 - The first document to compare.
     * @param {NodeJS.ReadableStream|Buffer} params.file2 - The second document to compare.
     * @param {string} [params.file1ContentType] - The content type of file1.
     * @param {string} [params.file2ContentType] - The content type of file2.
     * @param {string} [params.file1Label] - A text label for the first document.
     * @param {string} [params.file2Label] - A text label for the second document.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.CompareReturn>>}
     */
    CompareComplyV1.prototype.compareDocuments = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['file1', 'file2'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'file_1': {
                data: _params.file1,
                contentType: _params.file1ContentType
            },
            'file_2': {
                data: _params.file2,
                contentType: _params.file2ContentType
            }
        };
        var query = {
            'version': this.version,
            'file_1_label': _params.file1Label,
            'file_2_label': _params.file2Label,
            'model': _params.model
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'compareDocuments');
        var parameters = {
            options: {
                url: '/v1/comparison',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * feedback
     ************************/
    /**
     * Add feedback.
     *
     * Adds feedback in the form of _labels_ from a subject-matter expert (SME) to a governing document.
     * **Important:** Feedback is not immediately incorporated into the training model, nor is it guaranteed to be
     * incorporated at a later date. Instead, submitted feedback is used to suggest future updates to the training model.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {FeedbackDataInput} params.feedbackData - Feedback data for submission.
     * @param {string} [params.userId] - An optional string identifying the user.
     * @param {string} [params.comment] - An optional comment on or description of the feedback.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.FeedbackReturn>>}
     */
    CompareComplyV1.prototype.addFeedback = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['feedbackData'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'feedback_data': _params.feedbackData,
            'user_id': _params.userId,
            'comment': _params.comment
        };
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'addFeedback');
        var parameters = {
            options: {
                url: '/v1/feedback',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * List the feedback in a document.
     *
     * Lists the feedback in a document.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.feedbackType] - An optional string that filters the output to include only feedback with
     * the specified feedback type. The only permitted value is `element_classification`.
     * @param {string} [params.documentTitle] - An optional string that filters the output to include only feedback from
     * the document with the specified `document_title`.
     * @param {string} [params.modelId] - An optional string that filters the output to include only feedback with the
     * specified `model_id`. The only permitted value is `contracts`.
     * @param {string} [params.modelVersion] - An optional string that filters the output to include only feedback with
     * the specified `model_version`.
     * @param {string} [params.categoryRemoved] - An optional string in the form of a comma-separated list of categories.
     * If it is specified, the service filters the output to include only feedback that has at least one category from the
     * list removed.
     * @param {string} [params.categoryAdded] - An optional string in the form of a comma-separated list of categories. If
     * this is specified, the service filters the output to include only feedback that has at least one category from the
     * list added.
     * @param {string} [params.categoryNotChanged] - An optional string in the form of a comma-separated list of
     * categories. If this is specified, the service filters the output to include only feedback that has at least one
     * category from the list unchanged.
     * @param {string} [params.typeRemoved] - An optional string of comma-separated `nature`:`party` pairs. If this is
     * specified, the service filters the output to include only feedback that has at least one `nature`:`party` pair from
     * the list removed.
     * @param {string} [params.typeAdded] - An optional string of comma-separated `nature`:`party` pairs. If this is
     * specified, the service filters the output to include only feedback that has at least one `nature`:`party` pair from
     * the list removed.
     * @param {string} [params.typeNotChanged] - An optional string of comma-separated `nature`:`party` pairs. If this is
     * specified, the service filters the output to include only feedback that has at least one `nature`:`party` pair from
     * the list unchanged.
     * @param {number} [params.pageLimit] - An optional integer specifying the number of documents that you want the
     * service to return.
     * @param {string} [params.cursor] - An optional string that returns the set of documents after the previous set. Use
     * this parameter with the `page_limit` parameter.
     * @param {string} [params.sort] - An optional comma-separated list of fields in the document to sort on. You can
     * optionally specify the sort direction by prefixing the value of the field with `-` for descending order or `+` for
     * ascending order (the default). Currently permitted sorting fields are `created`, `user_id`, and `document_title`.
     * @param {boolean} [params.includeTotal] - An optional boolean value. If specified as `true`, the `pagination` object
     * in the output includes a value called `total` that gives the total count of feedback created.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.FeedbackList>>}
     */
    CompareComplyV1.prototype.listFeedback = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version,
            'feedback_type': _params.feedbackType,
            'document_title': _params.documentTitle,
            'model_id': _params.modelId,
            'model_version': _params.modelVersion,
            'category_removed': _params.categoryRemoved,
            'category_added': _params.categoryAdded,
            'category_not_changed': _params.categoryNotChanged,
            'type_removed': _params.typeRemoved,
            'type_added': _params.typeAdded,
            'type_not_changed': _params.typeNotChanged,
            'page_limit': _params.pageLimit,
            'cursor': _params.cursor,
            'sort': _params.sort,
            'include_total': _params.includeTotal
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'listFeedback');
        var parameters = {
            options: {
                url: '/v1/feedback',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get a specified feedback entry.
     *
     * Gets a feedback entry with a specified `feedback_id`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.feedbackId - A string that specifies the feedback entry to be included in the output.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.GetFeedback>>}
     */
    CompareComplyV1.prototype.getFeedback = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['feedbackId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'model': _params.model
        };
        var path = {
            'feedback_id': _params.feedbackId
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'getFeedback');
        var parameters = {
            options: {
                url: '/v1/feedback/{feedback_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete a specified feedback entry.
     *
     * Deletes a feedback entry with a specified `feedback_id`.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.feedbackId - A string that specifies the feedback entry to be deleted from the document.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.FeedbackDeleted>>}
     */
    CompareComplyV1.prototype.deleteFeedback = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['feedbackId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'model': _params.model
        };
        var path = {
            'feedback_id': _params.feedbackId
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteFeedback');
        var parameters = {
            options: {
                url: '/v1/feedback/{feedback_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * batches
     ************************/
    /**
     * Submit a batch-processing request.
     *
     * Run Compare and Comply methods over a collection of input documents.
     *
     * **Important:** Batch processing requires the use of the [IBM Cloud Object Storage
     * service](https://cloud.ibm.com/docs/cloud-object-storage?topic=cloud-object-storage-about#about-ibm-cloud-object-storage).
     * The use of IBM Cloud Object Storage with Compare and Comply is discussed at [Using batch
     * processing](https://cloud.ibm.com/docs/compare-comply?topic=compare-comply-batching#before-you-batch).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params._function - The Compare and Comply method to run across the submitted input documents.
     * @param {NodeJS.ReadableStream|Buffer} params.inputCredentialsFile - A JSON file containing the input Cloud Object
     * Storage credentials. At a minimum, the credentials must enable `READ` permissions on the bucket defined by the
     * `input_bucket_name` parameter.
     * @param {string} params.inputBucketLocation - The geographical location of the Cloud Object Storage input bucket as
     * listed on the **Endpoint** tab of your Cloud Object Storage instance; for example, `us-geo`, `eu-geo`, or `ap-geo`.
     * @param {string} params.inputBucketName - The name of the Cloud Object Storage input bucket.
     * @param {NodeJS.ReadableStream|Buffer} params.outputCredentialsFile - A JSON file that lists the Cloud Object
     * Storage output credentials. At a minimum, the credentials must enable `READ` and `WRITE` permissions on the bucket
     * defined by the `output_bucket_name` parameter.
     * @param {string} params.outputBucketLocation - The geographical location of the Cloud Object Storage output bucket
     * as listed on the **Endpoint** tab of your Cloud Object Storage instance; for example, `us-geo`, `eu-geo`, or
     * `ap-geo`.
     * @param {string} params.outputBucketName - The name of the Cloud Object Storage output bucket.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.BatchStatus>>}
     */
    CompareComplyV1.prototype.createBatch = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['_function', 'inputCredentialsFile', 'inputBucketLocation', 'inputBucketName', 'outputCredentialsFile', 'outputBucketLocation', 'outputBucketName'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'input_credentials_file': {
                data: _params.inputCredentialsFile,
                contentType: 'application/json'
            },
            'input_bucket_location': _params.inputBucketLocation,
            'input_bucket_name': _params.inputBucketName,
            'output_credentials_file': {
                data: _params.outputCredentialsFile,
                contentType: 'application/json'
            },
            'output_bucket_location': _params.outputBucketLocation,
            'output_bucket_name': _params.outputBucketName
        };
        var query = {
            'version': this.version,
            'function': _params._function,
            'model': _params.model
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'createBatch');
        var parameters = {
            options: {
                url: '/v1/batches',
                method: 'POST',
                qs: query,
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * List submitted batch-processing jobs.
     *
     * Lists batch-processing jobs submitted by users.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.Batches>>}
     */
    CompareComplyV1.prototype.listBatches = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'listBatches');
        var parameters = {
            options: {
                url: '/v1/batches',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get information about a specific batch-processing job.
     *
     * Gets information about a batch-processing job with a specified ID.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.batchId - The ID of the batch-processing job whose information you want to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.BatchStatus>>}
     */
    CompareComplyV1.prototype.getBatch = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['batchId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'batch_id': _params.batchId
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'getBatch');
        var parameters = {
            options: {
                url: '/v1/batches/{batch_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update a pending or active batch-processing job.
     *
     * Updates a pending or active batch-processing job. You can rescan the input bucket to check for new documents or
     * cancel a job.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.batchId - The ID of the batch-processing job you want to update.
     * @param {string} params.action - The action you want to perform on the specified batch-processing job.
     * @param {string} [params.model] - The analysis model to be used by the service. For the **Element classification**
     * and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default
     * is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing
     * requests.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<CompareComplyV1.Response<CompareComplyV1.BatchStatus>>}
     */
    CompareComplyV1.prototype.updateBatch = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['batchId', 'action'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'action': _params.action,
            'model': _params.model
        };
        var path = {
            'batch_id': _params.batchId
        };
        var sdkHeaders = common_1.getSdkHeaders(CompareComplyV1.DEFAULT_SERVICE_NAME, 'v1', 'updateBatch');
        var parameters = {
            options: {
                url: '/v1/batches/{batch_id}',
                method: 'PUT',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    CompareComplyV1.DEFAULT_SERVICE_URL = 'https://api.us-south.compare-comply.watson.cloud.ibm.com';
    CompareComplyV1.DEFAULT_SERVICE_NAME = 'compare-comply';
    return CompareComplyV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (CompareComplyV1) {
    /** Constants for the `convertToHtml` operation. */
    var ConvertToHtmlConstants;
    (function (ConvertToHtmlConstants) {
        /** The content type of file. */
        var FileContentType;
        (function (FileContentType) {
            FileContentType["APPLICATION_PDF"] = "application/pdf";
            FileContentType["APPLICATION_MSWORD"] = "application/msword";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            FileContentType["IMAGE_BMP"] = "image/bmp";
            FileContentType["IMAGE_GIF"] = "image/gif";
            FileContentType["IMAGE_JPEG"] = "image/jpeg";
            FileContentType["IMAGE_PNG"] = "image/png";
            FileContentType["IMAGE_TIFF"] = "image/tiff";
            FileContentType["TEXT_PLAIN"] = "text/plain";
        })(FileContentType = ConvertToHtmlConstants.FileContentType || (ConvertToHtmlConstants.FileContentType = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = ConvertToHtmlConstants.Model || (ConvertToHtmlConstants.Model = {}));
    })(ConvertToHtmlConstants = CompareComplyV1.ConvertToHtmlConstants || (CompareComplyV1.ConvertToHtmlConstants = {}));
    /** Constants for the `classifyElements` operation. */
    var ClassifyElementsConstants;
    (function (ClassifyElementsConstants) {
        /** The content type of file. */
        var FileContentType;
        (function (FileContentType) {
            FileContentType["APPLICATION_PDF"] = "application/pdf";
            FileContentType["APPLICATION_MSWORD"] = "application/msword";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            FileContentType["IMAGE_BMP"] = "image/bmp";
            FileContentType["IMAGE_GIF"] = "image/gif";
            FileContentType["IMAGE_JPEG"] = "image/jpeg";
            FileContentType["IMAGE_PNG"] = "image/png";
            FileContentType["IMAGE_TIFF"] = "image/tiff";
        })(FileContentType = ClassifyElementsConstants.FileContentType || (ClassifyElementsConstants.FileContentType = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = ClassifyElementsConstants.Model || (ClassifyElementsConstants.Model = {}));
    })(ClassifyElementsConstants = CompareComplyV1.ClassifyElementsConstants || (CompareComplyV1.ClassifyElementsConstants = {}));
    /** Constants for the `extractTables` operation. */
    var ExtractTablesConstants;
    (function (ExtractTablesConstants) {
        /** The content type of file. */
        var FileContentType;
        (function (FileContentType) {
            FileContentType["APPLICATION_PDF"] = "application/pdf";
            FileContentType["APPLICATION_MSWORD"] = "application/msword";
            FileContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            FileContentType["IMAGE_BMP"] = "image/bmp";
            FileContentType["IMAGE_GIF"] = "image/gif";
            FileContentType["IMAGE_JPEG"] = "image/jpeg";
            FileContentType["IMAGE_PNG"] = "image/png";
            FileContentType["IMAGE_TIFF"] = "image/tiff";
            FileContentType["TEXT_PLAIN"] = "text/plain";
        })(FileContentType = ExtractTablesConstants.FileContentType || (ExtractTablesConstants.FileContentType = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = ExtractTablesConstants.Model || (ExtractTablesConstants.Model = {}));
    })(ExtractTablesConstants = CompareComplyV1.ExtractTablesConstants || (CompareComplyV1.ExtractTablesConstants = {}));
    /** Constants for the `compareDocuments` operation. */
    var CompareDocumentsConstants;
    (function (CompareDocumentsConstants) {
        /** The content type of file1. */
        var File1ContentType;
        (function (File1ContentType) {
            File1ContentType["APPLICATION_PDF"] = "application/pdf";
            File1ContentType["APPLICATION_JSON"] = "application/json";
            File1ContentType["APPLICATION_MSWORD"] = "application/msword";
            File1ContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            File1ContentType["IMAGE_BMP"] = "image/bmp";
            File1ContentType["IMAGE_GIF"] = "image/gif";
            File1ContentType["IMAGE_JPEG"] = "image/jpeg";
            File1ContentType["IMAGE_PNG"] = "image/png";
            File1ContentType["IMAGE_TIFF"] = "image/tiff";
        })(File1ContentType = CompareDocumentsConstants.File1ContentType || (CompareDocumentsConstants.File1ContentType = {}));
        /** The content type of file2. */
        var File2ContentType;
        (function (File2ContentType) {
            File2ContentType["APPLICATION_PDF"] = "application/pdf";
            File2ContentType["APPLICATION_JSON"] = "application/json";
            File2ContentType["APPLICATION_MSWORD"] = "application/msword";
            File2ContentType["APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT"] = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
            File2ContentType["IMAGE_BMP"] = "image/bmp";
            File2ContentType["IMAGE_GIF"] = "image/gif";
            File2ContentType["IMAGE_JPEG"] = "image/jpeg";
            File2ContentType["IMAGE_PNG"] = "image/png";
            File2ContentType["IMAGE_TIFF"] = "image/tiff";
        })(File2ContentType = CompareDocumentsConstants.File2ContentType || (CompareDocumentsConstants.File2ContentType = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = CompareDocumentsConstants.Model || (CompareDocumentsConstants.Model = {}));
    })(CompareDocumentsConstants = CompareComplyV1.CompareDocumentsConstants || (CompareComplyV1.CompareDocumentsConstants = {}));
    /** Constants for the `getFeedback` operation. */
    var GetFeedbackConstants;
    (function (GetFeedbackConstants) {
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = GetFeedbackConstants.Model || (GetFeedbackConstants.Model = {}));
    })(GetFeedbackConstants = CompareComplyV1.GetFeedbackConstants || (CompareComplyV1.GetFeedbackConstants = {}));
    /** Constants for the `deleteFeedback` operation. */
    var DeleteFeedbackConstants;
    (function (DeleteFeedbackConstants) {
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = DeleteFeedbackConstants.Model || (DeleteFeedbackConstants.Model = {}));
    })(DeleteFeedbackConstants = CompareComplyV1.DeleteFeedbackConstants || (CompareComplyV1.DeleteFeedbackConstants = {}));
    /** Constants for the `createBatch` operation. */
    var CreateBatchConstants;
    (function (CreateBatchConstants) {
        /** The Compare and Comply method to run across the submitted input documents. */
        var Function;
        (function (Function) {
            Function["HTML_CONVERSION"] = "html_conversion";
            Function["ELEMENT_CLASSIFICATION"] = "element_classification";
            Function["TABLES"] = "tables";
        })(Function = CreateBatchConstants.Function || (CreateBatchConstants.Function = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = CreateBatchConstants.Model || (CreateBatchConstants.Model = {}));
    })(CreateBatchConstants = CompareComplyV1.CreateBatchConstants || (CompareComplyV1.CreateBatchConstants = {}));
    /** Constants for the `updateBatch` operation. */
    var UpdateBatchConstants;
    (function (UpdateBatchConstants) {
        /** The action you want to perform on the specified batch-processing job. */
        var Action;
        (function (Action) {
            Action["RESCAN"] = "rescan";
            Action["CANCEL"] = "cancel";
        })(Action = UpdateBatchConstants.Action || (UpdateBatchConstants.Action = {}));
        /** The analysis model to be used by the service. For the **Element classification** and **Compare two documents** methods, the default is `contracts`. For the **Extract tables** method, the default is `tables`. These defaults apply to the standalone methods as well as to the methods' use in batch-processing requests. */
        var Model;
        (function (Model) {
            Model["CONTRACTS"] = "contracts";
            Model["TABLES"] = "tables";
        })(Model = UpdateBatchConstants.Model || (UpdateBatchConstants.Model = {}));
    })(UpdateBatchConstants = CompareComplyV1.UpdateBatchConstants || (CompareComplyV1.UpdateBatchConstants = {}));
})(CompareComplyV1 || (CompareComplyV1 = {}));
module.exports = CompareComplyV1;
