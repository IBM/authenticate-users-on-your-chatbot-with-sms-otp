/**
 * (C) Copyright IBM Corp. 2017, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import { BaseService, UserOptions } from 'ibm-cloud-sdk-core';
/**
 * IBM Watson&trade; Natural Language Classifier uses machine learning algorithms to return the top matching predefined
 * classes for short text input. You create and train a classifier to connect predefined classes to example texts so
 * that the service can apply those classes to new inputs.
 */
declare class NaturalLanguageClassifierV1 extends BaseService {
    static DEFAULT_SERVICE_URL: string;
    static DEFAULT_SERVICE_NAME: string;
    /**
     * Construct a NaturalLanguageClassifierV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {NaturalLanguageClassifierV1}
     */
    constructor(options: UserOptions);
    /*************************
     * classifyText
     ************************/
    /**
     * Classify a phrase.
     *
     * Returns label information for the input. The status must be `Available` before you can use the classifier to
     * classify text.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to use.
     * @param {string} params.text - The submitted phrase. The maximum length is 2048 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classification>>}
     */
    classify(params: NaturalLanguageClassifierV1.ClassifyParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classification>>;
    /**
     * Classify multiple phrases.
     *
     * Returns label information for multiple phrases. The status must be `Available` before you can use the classifier to
     * classify text.
     *
     * Note that classifying Japanese texts is a beta feature.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to use.
     * @param {ClassifyInput[]} params.collection - The submitted phrases.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassificationCollection>>}
     */
    classifyCollection(params: NaturalLanguageClassifierV1.ClassifyCollectionParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassificationCollection>>;
    /*************************
     * manageClassifiers
     ************************/
    /**
     * Create classifier.
     *
     * Sends data to create and train a classifier and returns information about the new classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.trainingMetadata - Metadata in JSON format. The metadata identifies
     * the language of the data, and an optional name to identify the classifier. Specify the language with the 2-letter
     * primary language code as assigned in ISO standard 639.
     *
     * Supported languages are English (`en`), Arabic (`ar`), French (`fr`), German, (`de`), Italian (`it`), Japanese
     * (`ja`), Korean (`ko`), Brazilian Portuguese (`pt`), and Spanish (`es`).
     * @param {NodeJS.ReadableStream|Buffer} params.trainingData - Training data in CSV format. Each text value must have
     * at least one class. The data can include up to 3,000 classes and 20,000 records. For details, see [Data
     * preparation](https://cloud.ibm.com/docs/natural-language-classifier?topic=natural-language-classifier-using-your-data).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>}
     */
    createClassifier(params: NaturalLanguageClassifierV1.CreateClassifierParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>;
    /**
     * List classifiers.
     *
     * Returns an empty array if no classifiers are available.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassifierList>>}
     */
    listClassifiers(params?: NaturalLanguageClassifierV1.ListClassifiersParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassifierList>>;
    /**
     * Get information about a classifier.
     *
     * Returns status and other information about a classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to query.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>}
     */
    getClassifier(params: NaturalLanguageClassifierV1.GetClassifierParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>;
    /**
     * Delete classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Empty>>}
     */
    deleteClassifier(params: NaturalLanguageClassifierV1.DeleteClassifierParams): Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Empty>>;
}
/*************************
 * interfaces
 ************************/
declare namespace NaturalLanguageClassifierV1 {
    /** An operation response. */
    interface Response<T = any> {
        result: T;
        status: number;
        statusText: string;
        headers: IncomingHttpHeaders;
    }
    /** The callback for a service request. */
    type Callback<T> = (error: any, response?: Response<T>) => void;
    /** The body of a service request that returns no response data. */
    interface Empty {
    }
    /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
    interface JsonObject {
        [key: string]: any;
    }
    /*************************
     * request interfaces
     ************************/
    /** Parameters for the `classify` operation. */
    interface ClassifyParams {
        /** Classifier ID to use. */
        classifierId: string;
        /** The submitted phrase. The maximum length is 2048 characters. */
        text: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `classifyCollection` operation. */
    interface ClassifyCollectionParams {
        /** Classifier ID to use. */
        classifierId: string;
        /** The submitted phrases. */
        collection: ClassifyInput[];
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `createClassifier` operation. */
    interface CreateClassifierParams {
        /** Metadata in JSON format. The metadata identifies the language of the data, and an optional name to identify
         *  the classifier. Specify the language with the 2-letter primary language code as assigned in ISO standard 639.
         *
         *  Supported languages are English (`en`), Arabic (`ar`), French (`fr`), German, (`de`), Italian (`it`), Japanese
         *  (`ja`), Korean (`ko`), Brazilian Portuguese (`pt`), and Spanish (`es`).
         */
        trainingMetadata: NodeJS.ReadableStream | Buffer;
        /** Training data in CSV format. Each text value must have at least one class. The data can include up to 3,000
         *  classes and 20,000 records. For details, see [Data
         *  preparation](https://cloud.ibm.com/docs/natural-language-classifier?topic=natural-language-classifier-using-your-data).
         */
        trainingData: NodeJS.ReadableStream | Buffer;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `listClassifiers` operation. */
    interface ListClassifiersParams {
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `getClassifier` operation. */
    interface GetClassifierParams {
        /** Classifier ID to query. */
        classifierId: string;
        headers?: OutgoingHttpHeaders;
    }
    /** Parameters for the `deleteClassifier` operation. */
    interface DeleteClassifierParams {
        /** Classifier ID to delete. */
        classifierId: string;
        headers?: OutgoingHttpHeaders;
    }
    /*************************
     * model interfaces
     ************************/
    /** Response from the classifier for a phrase. */
    interface Classification {
        /** Unique identifier for this classifier. */
        classifier_id?: string;
        /** Link to the classifier. */
        url?: string;
        /** The submitted phrase. */
        text?: string;
        /** The class with the highest confidence. */
        top_class?: string;
        /** An array of up to ten class-confidence pairs sorted in descending order of confidence. */
        classes?: ClassifiedClass[];
    }
    /** Response from the classifier for multiple phrases. */
    interface ClassificationCollection {
        /** Unique identifier for this classifier. */
        classifier_id?: string;
        /** Link to the classifier. */
        url?: string;
        /** An array of classifier responses for each submitted phrase. */
        collection?: CollectionItem[];
    }
    /** Class and confidence. */
    interface ClassifiedClass {
        /** A decimal percentage that represents the confidence that Watson has in this class. Higher values represent
         *  higher confidences.
         */
        confidence?: number;
        /** Class label. */
        class_name?: string;
    }
    /** A classifier for natural language phrases. */
    interface Classifier {
        /** User-supplied name for the classifier. */
        name?: string;
        /** Link to the classifier. */
        url: string;
        /** The state of the classifier. */
        status?: string;
        /** Unique identifier for this classifier. */
        classifier_id: string;
        /** Date and time (UTC) the classifier was created. */
        created?: string;
        /** Additional detail about the status. */
        status_description?: string;
        /** The language used for the classifier. */
        language?: string;
    }
    /** List of available classifiers. */
    interface ClassifierList {
        /** The classifiers available to the user. Returns an empty array if no classifiers are available. */
        classifiers: Classifier[];
    }
    /** Request payload to classify. */
    interface ClassifyInput {
        /** The submitted phrase. The maximum length is 2048 characters. */
        text: string;
    }
    /** Response from the classifier for a phrase in a collection. */
    interface CollectionItem {
        /** The submitted phrase. The maximum length is 2048 characters. */
        text?: string;
        /** The class with the highest confidence. */
        top_class?: string;
        /** An array of up to ten class-confidence pairs sorted in descending order of confidence. */
        classes?: ClassifiedClass[];
    }
}
export = NaturalLanguageClassifierV1;
