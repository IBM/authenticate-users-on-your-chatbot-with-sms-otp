"use strict";
/**
 * (C) Copyright IBM Corp. 2017, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * IBM Watson&trade; Natural Language Classifier uses machine learning algorithms to return the top matching predefined
 * classes for short text input. You create and train a classifier to connect predefined classes to example texts so
 * that the service can apply those classes to new inputs.
 */
var NaturalLanguageClassifierV1 = /** @class */ (function (_super) {
    __extends(NaturalLanguageClassifierV1, _super);
    /**
     * Construct a NaturalLanguageClassifierV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {NaturalLanguageClassifierV1}
     */
    function NaturalLanguageClassifierV1(options) {
        var _this = this;
        options = options || {};
        if (!options.serviceName) {
            options.serviceName = NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        return _this;
    }
    /*************************
     * classifyText
     ************************/
    /**
     * Classify a phrase.
     *
     * Returns label information for the input. The status must be `Available` before you can use the classifier to
     * classify text.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to use.
     * @param {string} params.text - The submitted phrase. The maximum length is 2048 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classification>>}
     */
    NaturalLanguageClassifierV1.prototype.classify = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.text
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'classify');
        var parameters = {
            options: {
                url: '/v1/classifiers/{classifier_id}/classify',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Classify multiple phrases.
     *
     * Returns label information for multiple phrases. The status must be `Available` before you can use the classifier to
     * classify text.
     *
     * Note that classifying Japanese texts is a beta feature.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to use.
     * @param {ClassifyInput[]} params.collection - The submitted phrases.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassificationCollection>>}
     */
    NaturalLanguageClassifierV1.prototype.classifyCollection = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId', 'collection'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'collection': _params.collection
        };
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'classifyCollection');
        var parameters = {
            options: {
                url: '/v1/classifiers/{classifier_id}/classify_collection',
                method: 'POST',
                body: body,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * manageClassifiers
     ************************/
    /**
     * Create classifier.
     *
     * Sends data to create and train a classifier and returns information about the new classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {NodeJS.ReadableStream|Buffer} params.trainingMetadata - Metadata in JSON format. The metadata identifies
     * the language of the data, and an optional name to identify the classifier. Specify the language with the 2-letter
     * primary language code as assigned in ISO standard 639.
     *
     * Supported languages are English (`en`), Arabic (`ar`), French (`fr`), German, (`de`), Italian (`it`), Japanese
     * (`ja`), Korean (`ko`), Brazilian Portuguese (`pt`), and Spanish (`es`).
     * @param {NodeJS.ReadableStream|Buffer} params.trainingData - Training data in CSV format. Each text value must have
     * at least one class. The data can include up to 3,000 classes and 20,000 records. For details, see [Data
     * preparation](https://cloud.ibm.com/docs/natural-language-classifier?topic=natural-language-classifier-using-your-data).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>}
     */
    NaturalLanguageClassifierV1.prototype.createClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['trainingMetadata', 'trainingData'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var formData = {
            'training_metadata': {
                data: _params.trainingMetadata,
                contentType: 'application/json'
            },
            'training_data': {
                data: _params.trainingData,
                contentType: 'text/csv'
            }
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'createClassifier');
        var parameters = {
            options: {
                url: '/v1/classifiers',
                method: 'POST',
                formData: formData
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'multipart/form-data',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * List classifiers.
     *
     * Returns an empty array if no classifiers are available.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.ClassifierList>>}
     */
    NaturalLanguageClassifierV1.prototype.listClassifiers = function (params) {
        var _params = Object.assign({}, params);
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'listClassifiers');
        var parameters = {
            options: {
                url: '/v1/classifiers',
                method: 'GET',
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get information about a classifier.
     *
     * Returns status and other information about a classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to query.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Classifier>>}
     */
    NaturalLanguageClassifierV1.prototype.getClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'getClassifier');
        var parameters = {
            options: {
                url: '/v1/classifiers/{classifier_id}',
                method: 'GET',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete classifier.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.classifierId - Classifier ID to delete.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<NaturalLanguageClassifierV1.Response<NaturalLanguageClassifierV1.Empty>>}
     */
    NaturalLanguageClassifierV1.prototype.deleteClassifier = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['classifierId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var path = {
            'classifier_id': _params.classifierId
        };
        var sdkHeaders = common_1.getSdkHeaders(NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteClassifier');
        var parameters = {
            options: {
                url: '/v1/classifiers/{classifier_id}',
                method: 'DELETE',
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    NaturalLanguageClassifierV1.DEFAULT_SERVICE_URL = 'https://api.us-south.natural-language-classifier.watson.cloud.ibm.com';
    NaturalLanguageClassifierV1.DEFAULT_SERVICE_NAME = 'natural_language_classifier';
    return NaturalLanguageClassifierV1;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = NaturalLanguageClassifierV1;
