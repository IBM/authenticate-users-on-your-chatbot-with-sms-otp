"use strict";
/**
 * (C) Copyright IBM Corp. 2018, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-be3b4618-20201221-123327
 */
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated
 * dialog editor to create conversation flows between your apps and your users.
 *
 * The Assistant v1 API provides authoring methods your application can use to create or update a workspace.
 */
var AssistantV1 = /** @class */ (function (_super) {
    __extends(AssistantV1, _super);
    /**
     * Construct a AssistantV1 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - Release date of the API version you want to use. Specify dates in YYYY-MM-DD
     * format. The current version is `2020-04-01`.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.assistant.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {AssistantV1}
     */
    function AssistantV1(options) {
        var _this = this;
        options = options || {};
        var requiredParams = ['version'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);
        if (missingParams) {
            throw missingParams;
        }
        if (!options.serviceName) {
            options.serviceName = AssistantV1.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        _this.version = options.version;
        return _this;
    }
    /*************************
     * message
     ************************/
    /**
     * Get response to user input.
     *
     * Send user input to a workspace and receive a response.
     *
     * **Important:** This method has been superseded by the new v2 runtime API. The v2 API offers significant advantages,
     * including ease of deployment, automatic state management, versioning, and search capabilities. For more
     * information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-api-overview).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {RuntimeIntent[]} [params.intents] - Intents to use when evaluating the user input. Include intents from the
     * previous response to continue using those intents rather than trying to recognize intents in the new input.
     * @param {RuntimeEntity[]} [params.entities] - Entities to use when evaluating the message. Include entities from the
     * previous response to continue using those entities rather than detecting entities in the new input.
     * @param {boolean} [params.alternateIntents] - Whether to return more than one intent. A value of `true` indicates
     * that all matching intents are returned.
     * @param {Context} [params.context] - State information for the conversation. To maintain state, include the context
     * from the previous response.
     * @param {OutputData} [params.output] - An output object that includes the response to the user, the dialog nodes
     * that were triggered, and messages from the log.
     * @param {boolean} [params.nodesVisitedDetails] - Whether to include additional diagnostic information about the
     * dialog nodes that were visited during processing of the message.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.MessageResponse>>}
     */
    AssistantV1.prototype.message = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'input': _params.input,
            'intents': _params.intents,
            'entities': _params.entities,
            'alternate_intents': _params.alternateIntents,
            'context': _params.context,
            'output': _params.output
        };
        var query = {
            'version': this.version,
            'nodes_visited_details': _params.nodesVisitedDetails
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'message');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/message',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * bulkClassify
     ************************/
    /**
     * Identify intents and entities in multiple user utterances.
     *
     * Send multiple user inputs to a workspace in a single request and receive information about the intents and entities
     * recognized in each input. This method is useful for testing and comparing the performance of different workspaces.
     *
     * This method is available only with Premium plans.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {BulkClassifyUtterance[]} [params.input] - An array of input utterances to classify.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.BulkClassifyResponse>>}
     */
    AssistantV1.prototype.bulkClassify = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'input': _params.input
        };
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'bulkClassify');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/bulk_classify',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * workspaces
     ************************/
    /**
     * List workspaces.
     *
     * List the workspaces associated with a Watson Assistant service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned workspaces will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.WorkspaceCollection>>}
     */
    AssistantV1.prototype.listWorkspaces = function (params) {
        var _params = Object.assign({}, params);
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listWorkspaces');
        var parameters = {
            options: {
                url: '/v1/workspaces',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create workspace.
     *
     * Create a workspace based on component objects. You must provide workspace components defining the content of the
     * new workspace.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The name of the workspace. This string cannot contain carriage return, newline, or
     * tab characters.
     * @param {string} [params.description] - The description of the workspace. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {string} [params.language] - The language of the workspace.
     * @param {DialogNode[]} [params.dialogNodes] - An array of objects describing the dialog nodes in the workspace.
     * @param {Counterexample[]} [params.counterexamples] - An array of objects defining input examples that have been
     * marked as irrelevant input.
     * @param {JsonObject} [params.metadata] - Any metadata related to the workspace.
     * @param {boolean} [params.learningOptOut] - Whether training data from the workspace (including artifacts such as
     * intents and entities) can be used by IBM for general service improvements. `true` indicates that workspace training
     * data is not to be used.
     * @param {WorkspaceSystemSettings} [params.systemSettings] - Global settings for the workspace.
     * @param {Webhook[]} [params.webhooks] -
     * @param {CreateIntent[]} [params.intents] - An array of objects defining the intents for the workspace.
     * @param {CreateEntity[]} [params.entities] - An array of objects describing the entities for the workspace.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Workspace>>}
     */
    AssistantV1.prototype.createWorkspace = function (params) {
        var _params = Object.assign({}, params);
        var body = {
            'name': _params.name,
            'description': _params.description,
            'language': _params.language,
            'dialog_nodes': _params.dialogNodes,
            'counterexamples': _params.counterexamples,
            'metadata': _params.metadata,
            'learning_opt_out': _params.learningOptOut,
            'system_settings': _params.systemSettings,
            'webhooks': _params.webhooks,
            'intents': _params.intents,
            'entities': _params.entities
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces',
                method: 'POST',
                body: body,
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get information about a workspace.
     *
     * Get information about a workspace, optionally including all workspace content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {string} [params.sort] - Indicates how the returned workspace data will be sorted. This parameter is valid
     * only if **export**=`true`. Specify `sort=stable` to sort all workspace objects by unique identifier, in ascending
     * alphabetical order.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Workspace>>}
     */
    AssistantV1.prototype.getWorkspace = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'include_audit': _params.includeAudit,
            'sort': _params.sort
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update workspace.
     *
     * Update an existing workspace with new or modified data. You must provide component objects defining the content of
     * the updated workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} [params.name] - The name of the workspace. This string cannot contain carriage return, newline, or
     * tab characters.
     * @param {string} [params.description] - The description of the workspace. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {string} [params.language] - The language of the workspace.
     * @param {DialogNode[]} [params.dialogNodes] - An array of objects describing the dialog nodes in the workspace.
     * @param {Counterexample[]} [params.counterexamples] - An array of objects defining input examples that have been
     * marked as irrelevant input.
     * @param {JsonObject} [params.metadata] - Any metadata related to the workspace.
     * @param {boolean} [params.learningOptOut] - Whether training data from the workspace (including artifacts such as
     * intents and entities) can be used by IBM for general service improvements. `true` indicates that workspace training
     * data is not to be used.
     * @param {WorkspaceSystemSettings} [params.systemSettings] - Global settings for the workspace.
     * @param {Webhook[]} [params.webhooks] -
     * @param {CreateIntent[]} [params.intents] - An array of objects defining the intents for the workspace.
     * @param {CreateEntity[]} [params.entities] - An array of objects describing the entities for the workspace.
     * @param {boolean} [params.append] - Whether the new data is to be appended to the existing data in the object. If
     * **append**=`false`, elements included in the new data completely replace the corresponding existing elements,
     * including all subelements. For example, if the new data for a workspace includes **entities** and
     * **append**=`false`, all existing entities in the workspace are discarded and replaced with the new entities.
     *
     * If **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new
     * data collide with existing elements, the update request fails.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Workspace>>}
     */
    AssistantV1.prototype.updateWorkspace = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'name': _params.name,
            'description': _params.description,
            'language': _params.language,
            'dialog_nodes': _params.dialogNodes,
            'counterexamples': _params.counterexamples,
            'metadata': _params.metadata,
            'learning_opt_out': _params.learningOptOut,
            'system_settings': _params.systemSettings,
            'webhooks': _params.webhooks,
            'intents': _params.intents,
            'entities': _params.entities
        };
        var query = {
            'version': this.version,
            'append': _params.append,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete workspace.
     *
     * Delete a workspace from the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteWorkspace = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteWorkspace');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * intents
     ************************/
    /**
     * List intents.
     *
     * List the intents for a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned intents will be sorted. To reverse the sort order,
     * prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.IntentCollection>>}
     */
    AssistantV1.prototype.listIntents = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listIntents');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create intent.
     *
     * Create a new intent.
     *
     * If you want to create multiple intents with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The name of the intent. This string must conform to the following restrictions:
     * - It can contain only Unicode alphanumeric, underscore, hyphen, and dot characters.
     * - It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.description] - The description of the intent. This string cannot contain carriage return,
     * newline, or tab characters.
     * @param {Example[]} [params.examples] - An array of user input examples for the intent.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Intent>>}
     */
    AssistantV1.prototype.createIntent = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'intent': _params.intent,
            'description': _params.description,
            'examples': _params.examples
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createIntent');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get intent.
     *
     * Get information about an intent, optionally including all intent content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Intent>>}
     */
    AssistantV1.prototype.getIntent = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getIntent');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update intent.
     *
     * Update an existing intent with new or modified data. You must provide component objects defining the content of the
     * updated intent.
     *
     * If you want to update multiple intents with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {string} [params.newIntent] - The name of the intent. This string must conform to the following
     * restrictions:
     * - It can contain only Unicode alphanumeric, underscore, hyphen, and dot characters.
     * - It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.newDescription] - The description of the intent. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {Example[]} [params.newExamples] - An array of user input examples for the intent.
     * @param {boolean} [params.append] - Whether the new data is to be appended to the existing data in the object. If
     * **append**=`false`, elements included in the new data completely replace the corresponding existing elements,
     * including all subelements. For example, if the new data for the intent includes **examples** and
     * **append**=`false`, all existing examples for the intent are discarded and replaced with the new examples.
     *
     * If **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new
     * data collide with existing elements, the update request fails.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Intent>>}
     */
    AssistantV1.prototype.updateIntent = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'intent': _params.newIntent,
            'description': _params.newDescription,
            'examples': _params.newExamples
        };
        var query = {
            'version': this.version,
            'append': _params.append,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateIntent');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete intent.
     *
     * Delete an intent from a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteIntent = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteIntent');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * examples
     ************************/
    /**
     * List user input examples.
     *
     * List the user input examples for an intent, optionally including contextual entity mentions.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned examples will be sorted. To reverse the sort order,
     * prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.ExampleCollection>>}
     */
    AssistantV1.prototype.listExamples = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listExamples');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create user input example.
     *
     * Add a new user input example to an intent.
     *
     * If you want to add multiple examples with a single API call, consider using the **[Update intent](#update-intent)**
     * method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {string} params.text - The text of a user input example. This string must conform to the following
     * restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {Mention[]} [params.mentions] - An array of contextual entity mentions.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Example>>}
     */
    AssistantV1.prototype.createExample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.text,
            'mentions': _params.mentions
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createExample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get user input example.
     *
     * Get information about a user input example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {string} params.text - The text of the user input example.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Example>>}
     */
    AssistantV1.prototype.getExample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getExample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update user input example.
     *
     * Update the text of a user input example.
     *
     * If you want to update multiple examples with a single API call, consider using the **[Update
     * intent](#update-intent)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {string} params.text - The text of the user input example.
     * @param {string} [params.newText] - The text of the user input example. This string must conform to the following
     * restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {Mention[]} [params.newMentions] - An array of contextual entity mentions.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Example>>}
     */
    AssistantV1.prototype.updateExample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.newText,
            'mentions': _params.newMentions
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateExample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete user input example.
     *
     * Delete a user input example from an intent.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.intent - The intent name.
     * @param {string} params.text - The text of the user input example.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteExample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'intent', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'intent': _params.intent,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteExample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * counterexamples
     ************************/
    /**
     * List counterexamples.
     *
     * List the counterexamples for a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned counterexamples will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.CounterexampleCollection>>}
     */
    AssistantV1.prototype.listCounterexamples = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listCounterexamples');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/counterexamples',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create counterexample.
     *
     * Add a new counterexample to a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * If you want to add multiple counterexamples with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.text - The text of a user input marked as irrelevant input. This string must conform to the
     * following restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Counterexample>>}
     */
    AssistantV1.prototype.createCounterexample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.text
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createCounterexample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/counterexamples',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get counterexample.
     *
     * Get information about a counterexample. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Counterexample>>}
     */
    AssistantV1.prototype.getCounterexample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getCounterexample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/counterexamples/{text}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update counterexample.
     *
     * Update the text of a counterexample. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {string} [params.newText] - The text of a user input marked as irrelevant input. This string must conform to
     * the following restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Counterexample>>}
     */
    AssistantV1.prototype.updateCounterexample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'text': _params.newText
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateCounterexample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/counterexamples/{text}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete counterexample.
     *
     * Delete a counterexample from a workspace. Counterexamples are examples that have been marked as irrelevant input.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.text - The text of a user input counterexample (for example, `What are you wearing?`).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteCounterexample = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'text'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'text': _params.text
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteCounterexample');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/counterexamples/{text}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * entities
     ************************/
    /**
     * List entities.
     *
     * List the entities for a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned entities will be sorted. To reverse the sort order,
     * prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.EntityCollection>>}
     */
    AssistantV1.prototype.listEntities = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listEntities');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create entity.
     *
     * Create a new entity, or enable a system entity.
     *
     * If you want to create multiple entities with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity. This string must conform to the following restrictions:
     * - It can contain only Unicode alphanumeric, underscore, and hyphen characters.
     * - If you specify an entity name beginning with the reserved prefix `sys-`, it must be the name of a system entity
     * that you want to enable. (Any entity content specified with the request is ignored.).
     * @param {string} [params.description] - The description of the entity. This string cannot contain carriage return,
     * newline, or tab characters.
     * @param {JsonObject} [params.metadata] - Any metadata related to the entity.
     * @param {boolean} [params.fuzzyMatch] - Whether to use fuzzy matching for the entity.
     * @param {CreateValue[]} [params.values] - An array of objects describing the entity values.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Entity>>}
     */
    AssistantV1.prototype.createEntity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'entity': _params.entity,
            'description': _params.description,
            'metadata': _params.metadata,
            'fuzzy_match': _params.fuzzyMatch,
            'values': _params.values
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createEntity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get entity.
     *
     * Get information about an entity, optionally including all entity content.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Entity>>}
     */
    AssistantV1.prototype.getEntity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getEntity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update entity.
     *
     * Update an existing entity with new or modified data. You must provide component objects defining the content of the
     * updated entity.
     *
     * If you want to update multiple entities with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} [params.newEntity] - The name of the entity. This string must conform to the following
     * restrictions:
     * - It can contain only Unicode alphanumeric, underscore, and hyphen characters.
     * - It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.newDescription] - The description of the entity. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {JsonObject} [params.newMetadata] - Any metadata related to the entity.
     * @param {boolean} [params.newFuzzyMatch] - Whether to use fuzzy matching for the entity.
     * @param {CreateValue[]} [params.newValues] - An array of objects describing the entity values.
     * @param {boolean} [params.append] - Whether the new data is to be appended to the existing data in the entity. If
     * **append**=`false`, elements included in the new data completely replace the corresponding existing elements,
     * including all subelements. For example, if the new data for the entity includes **values** and **append**=`false`,
     * all existing values for the entity are discarded and replaced with the new values.
     *
     * If **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new
     * data collide with existing elements, the update request fails.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Entity>>}
     */
    AssistantV1.prototype.updateEntity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'entity': _params.newEntity,
            'description': _params.newDescription,
            'metadata': _params.newMetadata,
            'fuzzy_match': _params.newFuzzyMatch,
            'values': _params.newValues
        };
        var query = {
            'version': this.version,
            'append': _params.append,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateEntity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete entity.
     *
     * Delete an entity from a workspace, or disable a system entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteEntity = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteEntity');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * mentions
     ************************/
    /**
     * List entity mentions.
     *
     * List mentions for a contextual entity. An entity mention is an occurrence of a contextual entity in the context of
     * an intent user input example.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.EntityMentionCollection>>}
     */
    AssistantV1.prototype.listMentions = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listMentions');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/mentions',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * values
     ************************/
    /**
     * List entity values.
     *
     * List the values for an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned entity values will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.ValueCollection>>}
     */
    AssistantV1.prototype.listValues = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listValues');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create entity value.
     *
     * Create a new value for an entity.
     *
     * If you want to create multiple entity values with a single API call, consider using the **[Update
     * entity](#update-entity)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value. This string must conform to the following
     * restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {JsonObject} [params.metadata] - Any metadata related to the entity value.
     * @param {string} [params.type] - Specifies the type of entity value.
     * @param {string[]} [params.synonyms] - An array of synonyms for the entity value. A value can specify either
     * synonyms or patterns (depending on the value type), but not both. A synonym must conform to the following
     * resrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {string[]} [params.patterns] - An array of patterns for the entity value. A value can specify either
     * synonyms or patterns (depending on the value type), but not both. A pattern is a regular expression; for more
     * information about how to specify a pattern, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-entities#entities-create-dictionary-based).
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Value>>}
     */
    AssistantV1.prototype.createValue = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'value': _params.value,
            'metadata': _params.metadata,
            'type': _params.type,
            'synonyms': _params.synonyms,
            'patterns': _params.patterns
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createValue');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get entity value.
     *
     * Get information about an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {boolean} [params._export] - Whether to include all element content in the returned data. If
     * **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all
     * content, including subelements, is included.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Value>>}
     */
    AssistantV1.prototype.getValue = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'export': _params._export,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getValue');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update entity value.
     *
     * Update an existing entity value with new or modified data. You must provide component objects defining the content
     * of the updated entity value.
     *
     * If you want to update multiple entity values with a single API call, consider using the **[Update
     * entity](#update-entity)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} [params.newValue] - The text of the entity value. This string must conform to the following
     * restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {JsonObject} [params.newMetadata] - Any metadata related to the entity value.
     * @param {string} [params.newType] - Specifies the type of entity value.
     * @param {string[]} [params.newSynonyms] - An array of synonyms for the entity value. A value can specify either
     * synonyms or patterns (depending on the value type), but not both. A synonym must conform to the following
     * resrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {string[]} [params.newPatterns] - An array of patterns for the entity value. A value can specify either
     * synonyms or patterns (depending on the value type), but not both. A pattern is a regular expression; for more
     * information about how to specify a pattern, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-entities#entities-create-dictionary-based).
     * @param {boolean} [params.append] - Whether the new data is to be appended to the existing data in the entity value.
     * If **append**=`false`, elements included in the new data completely replace the corresponding existing elements,
     * including all subelements. For example, if the new data for the entity value includes **synonyms** and
     * **append**=`false`, all existing synonyms for the entity value are discarded and replaced with the new synonyms.
     *
     * If **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new
     * data collide with existing elements, the update request fails.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Value>>}
     */
    AssistantV1.prototype.updateValue = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'value': _params.newValue,
            'metadata': _params.newMetadata,
            'type': _params.newType,
            'synonyms': _params.newSynonyms,
            'patterns': _params.newPatterns
        };
        var query = {
            'version': this.version,
            'append': _params.append,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateValue');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete entity value.
     *
     * Delete a value from an entity.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteValue = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteValue');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * synonyms
     ************************/
    /**
     * List entity value synonyms.
     *
     * List the synonyms for an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned entity value synonyms will be sorted. To reverse
     * the sort order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.SynonymCollection>>}
     */
    AssistantV1.prototype.listSynonyms = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listSynonyms');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create entity value synonym.
     *
     * Add a new synonym to an entity value.
     *
     * If you want to create multiple synonyms with a single API call, consider using the **[Update
     * entity](#update-entity)** or **[Update entity value](#update-entity-value)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym. This string must conform to the following restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Synonym>>}
     */
    AssistantV1.prototype.createSynonym = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value', 'synonym'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'synonym': _params.synonym
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createSynonym');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get entity value synonym.
     *
     * Get information about a synonym of an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Synonym>>}
     */
    AssistantV1.prototype.getSynonym = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value', 'synonym'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value,
            'synonym': _params.synonym
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getSynonym');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms/{synonym}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update entity value synonym.
     *
     * Update an existing entity value synonym with new text.
     *
     * If you want to update multiple synonyms with a single API call, consider using the **[Update
     * entity](#update-entity)** or **[Update entity value](#update-entity-value)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {string} [params.newSynonym] - The text of the synonym. This string must conform to the following
     * restrictions:
     * - It cannot contain carriage return, newline, or tab characters.
     * - It cannot consist of only whitespace characters.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Synonym>>}
     */
    AssistantV1.prototype.updateSynonym = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value', 'synonym'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'synonym': _params.newSynonym
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value,
            'synonym': _params.synonym
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateSynonym');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms/{synonym}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete entity value synonym.
     *
     * Delete a synonym from an entity value.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.entity - The name of the entity.
     * @param {string} params.value - The text of the entity value.
     * @param {string} params.synonym - The text of the synonym.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteSynonym = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'entity', 'value', 'synonym'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'entity': _params.entity,
            'value': _params.value,
            'synonym': _params.synonym
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteSynonym');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms/{synonym}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * dialogNodes
     ************************/
    /**
     * List dialog nodes.
     *
     * List the dialog nodes for a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {boolean} [params.includeCount] - Whether to include information about the number of records that satisfy
     * the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response
     * includes the `total` property.
     * @param {string} [params.sort] - The attribute by which returned dialog nodes will be sorted. To reverse the sort
     * order, prefix the value with a minus sign (`-`).
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.DialogNodeCollection>>}
     */
    AssistantV1.prototype.listDialogNodes = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'page_limit': _params.pageLimit,
            'include_count': _params.includeCount,
            'sort': _params.sort,
            'cursor': _params.cursor,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listDialogNodes');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/dialog_nodes',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Create dialog node.
     *
     * Create a new dialog node.
     *
     * If you want to create multiple dialog nodes with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.dialogNode - The dialog node ID. This string must conform to the following restrictions:
     * - It can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters.
     * @param {string} [params.description] - The description of the dialog node. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {string} [params.conditions] - The condition that will trigger the dialog node. This string cannot contain
     * carriage return, newline, or tab characters.
     * @param {string} [params.parent] - The ID of the parent dialog node. This property is omitted if the dialog node has
     * no parent.
     * @param {string} [params.previousSibling] - The ID of the previous sibling dialog node. This property is omitted if
     * the dialog node has no previous sibling.
     * @param {DialogNodeOutput} [params.output] - The output of the dialog node. For more information about how to
     * specify dialog node output, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-dialog-overview#dialog-overview-responses).
     * @param {DialogNodeContext} [params.context] - The context for the dialog node.
     * @param {JsonObject} [params.metadata] - The metadata for the dialog node.
     * @param {DialogNodeNextStep} [params.nextStep] - The next step to execute following this dialog node.
     * @param {string} [params.title] - The alias used to identify the dialog node. This string must conform to the
     * following restrictions:
     * - It can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters.
     * @param {string} [params.type] - How the dialog node is processed.
     * @param {string} [params.eventName] - How an `event_handler` node is processed.
     * @param {string} [params.variable] - The location in the dialog context where output is stored.
     * @param {DialogNodeAction[]} [params.actions] - An array of objects describing any actions to be invoked by the
     * dialog node.
     * @param {string} [params.digressIn] - Whether this top-level dialog node can be digressed into.
     * @param {string} [params.digressOut] - Whether this dialog node can be returned to after a digression.
     * @param {string} [params.digressOutSlots] - Whether the user can digress to top-level nodes while filling out slots.
     * @param {string} [params.userLabel] - A label that can be displayed externally to describe the purpose of the node
     * to users.
     * @param {boolean} [params.disambiguationOptOut] - Whether the dialog node should be excluded from disambiguation
     * suggestions. Valid only when **type**=`standard` or `frame`.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.DialogNode>>}
     */
    AssistantV1.prototype.createDialogNode = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'dialogNode'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'dialog_node': _params.dialogNode,
            'description': _params.description,
            'conditions': _params.conditions,
            'parent': _params.parent,
            'previous_sibling': _params.previousSibling,
            'output': _params.output,
            'context': _params.context,
            'metadata': _params.metadata,
            'next_step': _params.nextStep,
            'title': _params.title,
            'type': _params.type,
            'event_name': _params.eventName,
            'variable': _params.variable,
            'actions': _params.actions,
            'digress_in': _params.digressIn,
            'digress_out': _params.digressOut,
            'digress_out_slots': _params.digressOutSlots,
            'user_label': _params.userLabel,
            'disambiguation_opt_out': _params.disambiguationOptOut
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'createDialogNode');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/dialog_nodes',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Get dialog node.
     *
     * Get information about a dialog node.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.dialogNode - The dialog node ID (for example, `get_order`).
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.DialogNode>>}
     */
    AssistantV1.prototype.getDialogNode = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'dialogNode'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'dialog_node': _params.dialogNode
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'getDialogNode');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/dialog_nodes/{dialog_node}',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Update dialog node.
     *
     * Update an existing dialog node with new or modified data.
     *
     * If you want to update multiple dialog nodes with a single API call, consider using the **[Update
     * workspace](#update-workspace)** method instead.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.dialogNode - The dialog node ID (for example, `get_order`).
     * @param {string} [params.newDialogNode] - The dialog node ID. This string must conform to the following
     * restrictions:
     * - It can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters.
     * @param {string} [params.newDescription] - The description of the dialog node. This string cannot contain carriage
     * return, newline, or tab characters.
     * @param {string} [params.newConditions] - The condition that will trigger the dialog node. This string cannot
     * contain carriage return, newline, or tab characters.
     * @param {string} [params.newParent] - The ID of the parent dialog node. This property is omitted if the dialog node
     * has no parent.
     * @param {string} [params.newPreviousSibling] - The ID of the previous sibling dialog node. This property is omitted
     * if the dialog node has no previous sibling.
     * @param {DialogNodeOutput} [params.newOutput] - The output of the dialog node. For more information about how to
     * specify dialog node output, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-dialog-overview#dialog-overview-responses).
     * @param {DialogNodeContext} [params.newContext] - The context for the dialog node.
     * @param {JsonObject} [params.newMetadata] - The metadata for the dialog node.
     * @param {DialogNodeNextStep} [params.newNextStep] - The next step to execute following this dialog node.
     * @param {string} [params.newTitle] - The alias used to identify the dialog node. This string must conform to the
     * following restrictions:
     * - It can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters.
     * @param {string} [params.newType] - How the dialog node is processed.
     * @param {string} [params.newEventName] - How an `event_handler` node is processed.
     * @param {string} [params.newVariable] - The location in the dialog context where output is stored.
     * @param {DialogNodeAction[]} [params.newActions] - An array of objects describing any actions to be invoked by the
     * dialog node.
     * @param {string} [params.newDigressIn] - Whether this top-level dialog node can be digressed into.
     * @param {string} [params.newDigressOut] - Whether this dialog node can be returned to after a digression.
     * @param {string} [params.newDigressOutSlots] - Whether the user can digress to top-level nodes while filling out
     * slots.
     * @param {string} [params.newUserLabel] - A label that can be displayed externally to describe the purpose of the
     * node to users.
     * @param {boolean} [params.newDisambiguationOptOut] - Whether the dialog node should be excluded from disambiguation
     * suggestions. Valid only when **type**=`standard` or `frame`.
     * @param {boolean} [params.includeAudit] - Whether to include the audit properties (`created` and `updated`
     * timestamps) in the response.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.DialogNode>>}
     */
    AssistantV1.prototype.updateDialogNode = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'dialogNode'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var body = {
            'dialog_node': _params.newDialogNode,
            'description': _params.newDescription,
            'conditions': _params.newConditions,
            'parent': _params.newParent,
            'previous_sibling': _params.newPreviousSibling,
            'output': _params.newOutput,
            'context': _params.newContext,
            'metadata': _params.newMetadata,
            'next_step': _params.newNextStep,
            'title': _params.newTitle,
            'type': _params.newType,
            'event_name': _params.newEventName,
            'variable': _params.newVariable,
            'actions': _params.newActions,
            'digress_in': _params.newDigressIn,
            'digress_out': _params.newDigressOut,
            'digress_out_slots': _params.newDigressOutSlots,
            'user_label': _params.newUserLabel,
            'disambiguation_opt_out': _params.newDisambiguationOptOut
        };
        var query = {
            'version': this.version,
            'include_audit': _params.includeAudit
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'dialog_node': _params.dialogNode
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'updateDialogNode');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/dialog_nodes/{dialog_node}',
                method: 'POST',
                body: body,
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * Delete dialog node.
     *
     * Delete a dialog node from a workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} params.dialogNode - The dialog node ID (for example, `get_order`).
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteDialogNode = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId', 'dialogNode'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version
        };
        var path = {
            'workspace_id': _params.workspaceId,
            'dialog_node': _params.dialogNode
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteDialogNode');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/dialog_nodes/{dialog_node}',
                method: 'DELETE',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * logs
     ************************/
    /**
     * List log events in a workspace.
     *
     * List the events from the log of a specific workspace.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.workspaceId - Unique identifier of the workspace.
     * @param {string} [params.sort] - How to sort the returned log events. You can sort by **request_timestamp**. To
     * reverse the sort order, prefix the parameter value with a minus sign (`-`).
     * @param {string} [params.filter] - A cacheable parameter that limits the results to those matching the specified
     * filter. For more information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.LogCollection>>}
     */
    AssistantV1.prototype.listLogs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['workspaceId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'sort': _params.sort,
            'filter': _params.filter,
            'page_limit': _params.pageLimit,
            'cursor': _params.cursor
        };
        var path = {
            'workspace_id': _params.workspaceId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listLogs');
        var parameters = {
            options: {
                url: '/v1/workspaces/{workspace_id}/logs',
                method: 'GET',
                qs: query,
                path: path,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /**
     * List log events in all workspaces.
     *
     * List the events from the logs of all workspaces in the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.filter - A cacheable parameter that limits the results to those matching the specified
     * filter. You must specify a filter query that includes a value for `language`, as well as a value for
     * `request.context.system.assistant_id`, `workspace_id`, or `request.context.metadata.deployment`. For more
     * information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).
     * @param {string} [params.sort] - How to sort the returned log events. You can sort by **request_timestamp**. To
     * reverse the sort order, prefix the parameter value with a minus sign (`-`).
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.LogCollection>>}
     */
    AssistantV1.prototype.listAllLogs = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['filter'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'filter': _params.filter,
            'sort': _params.sort,
            'page_limit': _params.pageLimit,
            'cursor': _params.cursor
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'listAllLogs');
        var parameters = {
            options: {
                url: '/v1/logs',
                method: 'GET',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @returns {Promise<AssistantV1.Response<AssistantV1.Empty>>}
     */
    AssistantV1.prototype.deleteUserData = function (params) {
        var _params = Object.assign({}, params);
        var requiredParams = ['customerId'];
        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
        if (missingParams) {
            return Promise.reject(missingParams);
        }
        var query = {
            'version': this.version,
            'customer_id': _params.customerId
        };
        var sdkHeaders = common_1.getSdkHeaders(AssistantV1.DEFAULT_SERVICE_NAME, 'v1', 'deleteUserData');
        var parameters = {
            options: {
                url: '/v1/user_data',
                method: 'DELETE',
                qs: query,
            },
            defaultOptions: extend(true, {}, this.baseOptions, {
                headers: extend(true, sdkHeaders, {
                    'Accept': 'application/json',
                }, _params.headers),
            }),
        };
        return this.createRequest(parameters);
    };
    ;
    AssistantV1.DEFAULT_SERVICE_URL = 'https://api.us-south.assistant.watson.cloud.ibm.com';
    AssistantV1.DEFAULT_SERVICE_NAME = 'conversation';
    return AssistantV1;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (AssistantV1) {
    /** Constants for the `listWorkspaces` operation. */
    var ListWorkspacesConstants;
    (function (ListWorkspacesConstants) {
        /** The attribute by which returned workspaces will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["NAME"] = "name";
            Sort["UPDATED"] = "updated";
        })(Sort = ListWorkspacesConstants.Sort || (ListWorkspacesConstants.Sort = {}));
    })(ListWorkspacesConstants = AssistantV1.ListWorkspacesConstants || (AssistantV1.ListWorkspacesConstants = {}));
    /** Constants for the `getWorkspace` operation. */
    var GetWorkspaceConstants;
    (function (GetWorkspaceConstants) {
        /** Indicates how the returned workspace data will be sorted. This parameter is valid only if **export**=`true`. Specify `sort=stable` to sort all workspace objects by unique identifier, in ascending alphabetical order. */
        var Sort;
        (function (Sort) {
            Sort["STABLE"] = "stable";
        })(Sort = GetWorkspaceConstants.Sort || (GetWorkspaceConstants.Sort = {}));
    })(GetWorkspaceConstants = AssistantV1.GetWorkspaceConstants || (AssistantV1.GetWorkspaceConstants = {}));
    /** Constants for the `listIntents` operation. */
    var ListIntentsConstants;
    (function (ListIntentsConstants) {
        /** The attribute by which returned intents will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["INTENT"] = "intent";
            Sort["UPDATED"] = "updated";
        })(Sort = ListIntentsConstants.Sort || (ListIntentsConstants.Sort = {}));
    })(ListIntentsConstants = AssistantV1.ListIntentsConstants || (AssistantV1.ListIntentsConstants = {}));
    /** Constants for the `listExamples` operation. */
    var ListExamplesConstants;
    (function (ListExamplesConstants) {
        /** The attribute by which returned examples will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["TEXT"] = "text";
            Sort["UPDATED"] = "updated";
        })(Sort = ListExamplesConstants.Sort || (ListExamplesConstants.Sort = {}));
    })(ListExamplesConstants = AssistantV1.ListExamplesConstants || (AssistantV1.ListExamplesConstants = {}));
    /** Constants for the `listCounterexamples` operation. */
    var ListCounterexamplesConstants;
    (function (ListCounterexamplesConstants) {
        /** The attribute by which returned counterexamples will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["TEXT"] = "text";
            Sort["UPDATED"] = "updated";
        })(Sort = ListCounterexamplesConstants.Sort || (ListCounterexamplesConstants.Sort = {}));
    })(ListCounterexamplesConstants = AssistantV1.ListCounterexamplesConstants || (AssistantV1.ListCounterexamplesConstants = {}));
    /** Constants for the `listEntities` operation. */
    var ListEntitiesConstants;
    (function (ListEntitiesConstants) {
        /** The attribute by which returned entities will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["ENTITY"] = "entity";
            Sort["UPDATED"] = "updated";
        })(Sort = ListEntitiesConstants.Sort || (ListEntitiesConstants.Sort = {}));
    })(ListEntitiesConstants = AssistantV1.ListEntitiesConstants || (AssistantV1.ListEntitiesConstants = {}));
    /** Constants for the `listValues` operation. */
    var ListValuesConstants;
    (function (ListValuesConstants) {
        /** The attribute by which returned entity values will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["VALUE"] = "value";
            Sort["UPDATED"] = "updated";
        })(Sort = ListValuesConstants.Sort || (ListValuesConstants.Sort = {}));
    })(ListValuesConstants = AssistantV1.ListValuesConstants || (AssistantV1.ListValuesConstants = {}));
    /** Constants for the `createValue` operation. */
    var CreateValueConstants;
    (function (CreateValueConstants) {
        /** Specifies the type of entity value. */
        var Type;
        (function (Type) {
            Type["SYNONYMS"] = "synonyms";
            Type["PATTERNS"] = "patterns";
        })(Type = CreateValueConstants.Type || (CreateValueConstants.Type = {}));
    })(CreateValueConstants = AssistantV1.CreateValueConstants || (AssistantV1.CreateValueConstants = {}));
    /** Constants for the `updateValue` operation. */
    var UpdateValueConstants;
    (function (UpdateValueConstants) {
        /** Specifies the type of entity value. */
        var Type;
        (function (Type) {
            Type["SYNONYMS"] = "synonyms";
            Type["PATTERNS"] = "patterns";
        })(Type = UpdateValueConstants.Type || (UpdateValueConstants.Type = {}));
    })(UpdateValueConstants = AssistantV1.UpdateValueConstants || (AssistantV1.UpdateValueConstants = {}));
    /** Constants for the `listSynonyms` operation. */
    var ListSynonymsConstants;
    (function (ListSynonymsConstants) {
        /** The attribute by which returned entity value synonyms will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["SYNONYM"] = "synonym";
            Sort["UPDATED"] = "updated";
        })(Sort = ListSynonymsConstants.Sort || (ListSynonymsConstants.Sort = {}));
    })(ListSynonymsConstants = AssistantV1.ListSynonymsConstants || (AssistantV1.ListSynonymsConstants = {}));
    /** Constants for the `listDialogNodes` operation. */
    var ListDialogNodesConstants;
    (function (ListDialogNodesConstants) {
        /** The attribute by which returned dialog nodes will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`). */
        var Sort;
        (function (Sort) {
            Sort["DIALOG_NODE"] = "dialog_node";
            Sort["UPDATED"] = "updated";
        })(Sort = ListDialogNodesConstants.Sort || (ListDialogNodesConstants.Sort = {}));
    })(ListDialogNodesConstants = AssistantV1.ListDialogNodesConstants || (AssistantV1.ListDialogNodesConstants = {}));
    /** Constants for the `createDialogNode` operation. */
    var CreateDialogNodeConstants;
    (function (CreateDialogNodeConstants) {
        /** How the dialog node is processed. */
        var Type;
        (function (Type) {
            Type["STANDARD"] = "standard";
            Type["EVENT_HANDLER"] = "event_handler";
            Type["FRAME"] = "frame";
            Type["SLOT"] = "slot";
            Type["RESPONSE_CONDITION"] = "response_condition";
            Type["FOLDER"] = "folder";
        })(Type = CreateDialogNodeConstants.Type || (CreateDialogNodeConstants.Type = {}));
        /** How an `event_handler` node is processed. */
        var EventName;
        (function (EventName) {
            EventName["FOCUS"] = "focus";
            EventName["INPUT"] = "input";
            EventName["FILLED"] = "filled";
            EventName["VALIDATE"] = "validate";
            EventName["FILLED_MULTIPLE"] = "filled_multiple";
            EventName["GENERIC"] = "generic";
            EventName["NOMATCH"] = "nomatch";
            EventName["NOMATCH_RESPONSES_DEPLETED"] = "nomatch_responses_depleted";
            EventName["DIGRESSION_RETURN_PROMPT"] = "digression_return_prompt";
        })(EventName = CreateDialogNodeConstants.EventName || (CreateDialogNodeConstants.EventName = {}));
        /** Whether this top-level dialog node can be digressed into. */
        var DigressIn;
        (function (DigressIn) {
            DigressIn["NOT_AVAILABLE"] = "not_available";
            DigressIn["RETURNS"] = "returns";
            DigressIn["DOES_NOT_RETURN"] = "does_not_return";
        })(DigressIn = CreateDialogNodeConstants.DigressIn || (CreateDialogNodeConstants.DigressIn = {}));
        /** Whether this dialog node can be returned to after a digression. */
        var DigressOut;
        (function (DigressOut) {
            DigressOut["ALLOW_RETURNING"] = "allow_returning";
            DigressOut["ALLOW_ALL"] = "allow_all";
            DigressOut["ALLOW_ALL_NEVER_RETURN"] = "allow_all_never_return";
        })(DigressOut = CreateDialogNodeConstants.DigressOut || (CreateDialogNodeConstants.DigressOut = {}));
        /** Whether the user can digress to top-level nodes while filling out slots. */
        var DigressOutSlots;
        (function (DigressOutSlots) {
            DigressOutSlots["NOT_ALLOWED"] = "not_allowed";
            DigressOutSlots["ALLOW_RETURNING"] = "allow_returning";
            DigressOutSlots["ALLOW_ALL"] = "allow_all";
        })(DigressOutSlots = CreateDialogNodeConstants.DigressOutSlots || (CreateDialogNodeConstants.DigressOutSlots = {}));
    })(CreateDialogNodeConstants = AssistantV1.CreateDialogNodeConstants || (AssistantV1.CreateDialogNodeConstants = {}));
    /** Constants for the `updateDialogNode` operation. */
    var UpdateDialogNodeConstants;
    (function (UpdateDialogNodeConstants) {
        /** How the dialog node is processed. */
        var Type;
        (function (Type) {
            Type["STANDARD"] = "standard";
            Type["EVENT_HANDLER"] = "event_handler";
            Type["FRAME"] = "frame";
            Type["SLOT"] = "slot";
            Type["RESPONSE_CONDITION"] = "response_condition";
            Type["FOLDER"] = "folder";
        })(Type = UpdateDialogNodeConstants.Type || (UpdateDialogNodeConstants.Type = {}));
        /** How an `event_handler` node is processed. */
        var EventName;
        (function (EventName) {
            EventName["FOCUS"] = "focus";
            EventName["INPUT"] = "input";
            EventName["FILLED"] = "filled";
            EventName["VALIDATE"] = "validate";
            EventName["FILLED_MULTIPLE"] = "filled_multiple";
            EventName["GENERIC"] = "generic";
            EventName["NOMATCH"] = "nomatch";
            EventName["NOMATCH_RESPONSES_DEPLETED"] = "nomatch_responses_depleted";
            EventName["DIGRESSION_RETURN_PROMPT"] = "digression_return_prompt";
        })(EventName = UpdateDialogNodeConstants.EventName || (UpdateDialogNodeConstants.EventName = {}));
        /** Whether this top-level dialog node can be digressed into. */
        var DigressIn;
        (function (DigressIn) {
            DigressIn["NOT_AVAILABLE"] = "not_available";
            DigressIn["RETURNS"] = "returns";
            DigressIn["DOES_NOT_RETURN"] = "does_not_return";
        })(DigressIn = UpdateDialogNodeConstants.DigressIn || (UpdateDialogNodeConstants.DigressIn = {}));
        /** Whether this dialog node can be returned to after a digression. */
        var DigressOut;
        (function (DigressOut) {
            DigressOut["ALLOW_RETURNING"] = "allow_returning";
            DigressOut["ALLOW_ALL"] = "allow_all";
            DigressOut["ALLOW_ALL_NEVER_RETURN"] = "allow_all_never_return";
        })(DigressOut = UpdateDialogNodeConstants.DigressOut || (UpdateDialogNodeConstants.DigressOut = {}));
        /** Whether the user can digress to top-level nodes while filling out slots. */
        var DigressOutSlots;
        (function (DigressOutSlots) {
            DigressOutSlots["NOT_ALLOWED"] = "not_allowed";
            DigressOutSlots["ALLOW_RETURNING"] = "allow_returning";
            DigressOutSlots["ALLOW_ALL"] = "allow_all";
        })(DigressOutSlots = UpdateDialogNodeConstants.DigressOutSlots || (UpdateDialogNodeConstants.DigressOutSlots = {}));
    })(UpdateDialogNodeConstants = AssistantV1.UpdateDialogNodeConstants || (AssistantV1.UpdateDialogNodeConstants = {}));
})(AssistantV1 || (AssistantV1 = {}));
module.exports = AssistantV1;
