{"version":3,"sources":["logo.svg","components/Header/index.js","components/Header/Header.js","assets/sampleImage1.jpg","components/ChatMessage/ChatMessage.js","components/ChatOption/ChatOption.js","images/arrow-right.svg","images/arrow-left.svg","images/circle-arrow-right.svg","images/code.svg","images/grid.svg","images/restart.svg","images/share.svg","images/calendar.svg","images/credit-card.svg","components/Icon/Icon.js","components/CreditCardOption/CreditCardOption.js","components/ChatUnorderedList/ChatUnorderedList.js","components/ChatOptionList/ChatOptionList.js","components/BalanceCard/BalanceCard.js","components/ApptCard/ApptCard.js","images/linda.png","components/AgentCard/AgentCard.js","components/StatementCard/StatementCard.js","constants.js","images/map-bank.png","components/ImageOption/ImageOption.js","components/SearchResults/SearchResultsList.js","components/ChatList/ChatList.js","components/ChatContainer/ChatContainer.js","utils.js","conversation.js","content/LandingPage/LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderC","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","aria-label","onClick","isActive","HeaderName","href","prefix","SideNav","expanded","isPersistent","SideNavItems","HeaderNavigation","style","padding","HeaderMenuItem","ChatMessage","type","text","className","disabled","defaultProps","ChatOption","option","onUserInput","isSelected","classes","label","Icon","size","width","height","CreditCardOption","cardName","description","ChatUnorderedList","options","map","role","ChatOptionList","props","state","this","setState","Object","assign","value","input","isLastMessage","selectedOption","optionSelect","React","Component","BalanceCard","balance","minPay","recPay","accountId","currencyFormatter","Intl","NumberFormat","currency","minimumFractionDigits","formattedBalance","format","formattedMinPayment","formattedRecPayment","ApptCard","zip","apptDate","apptTime","AgentCard","time","backgroundImage","LindaPic","StatementCard","startDate","endDate","IN_PROGRESS","COMPLETED","FAILED","getIcon","url","includes","MapBank","ImageOption","src","alt","SearchResultsList","res","slice","id","title","body","length","substring","target","rel","hidden","lastBotMessage","i","messages","isLastBotMessage","x","ChatList","chatListClasses","botMessageStatus","message","display","content","Account","address","date","reason","startingDate","endingDate","ChatContainer","paddingLeft","onSubmit","e","placeholder","trackEvent","action","objectType","object","window","bluemixAnalytics","productTitle","digitalData","page","pageInfo","sessionId","getMessage","context","firstCallVal","callback","location","hostname","port","method","headers","Accept","data","session_id","isFirstCall","axios","then","console","log","catch","err","fetchMessage","clearSession","fetch","json","code","result","getSessionId","a","JSON","stringify","executeWorkspaceAction","actionObj","keys","cc_displaystatement","appointment_display","Date","toLocaleTimeString","triggeredCards","cc_selecteddisplay","CardCriteria","filter","card","statement_display","notification_display","DisplayText","link","DisplayURL","require","polyfill","LandingPage","getTable","get","dbUrl","key","item","darr","split","getDate","getFullYear","toString","separateWord","charAt","toUpperCase","join","loading","table","handleChange","name","handleSubmit","phone","invalidName","invalidPhone","invalidAddress","random","Math","floor","start","policy","getTime","curDate","setMonth","getMonth","dateAdd","premiumDate","Number","amount","flag","success","sameNumber","modalOpen","section1","current","scrollIntoView","initBot","updateMessageStatus","undefined","updateChatList","Error","botMessageHandler","updateOptionsSidebar","updateConversationContext","parseNonGenericResponsesFromBotOutput","genericObj","responses","forEach","response","response_type","push","preference","typing","source","header","results","createRef","section2","section3","payment","alert","replace","trim","sendMessageToConversation","lastMessageContext","fullOutputObj","outputObj","isNotificationPresent","output","generic","concat","actions","act","endpoint","parameters","chosen_acc","zip_value","statement_date","parameterizedEndpoint","Promise","resolve","reject","executeClientAction","dates","user_defined","actionResponse","displayNotification","ui_action","system","iterateResponese","lastMessageJson","index","inputField","document","getElementById","setTimeout","messageObj","chatList","scroll","top","scrollHeight","behavior","scrollTop","clientHeight","cardOptions","base","Loading","justifyContent","alignItems","backgroundColor","ref","color","paddingTop","lowContrast","kind","iconDescription","caption","minWidth","marginBottom","subtitle","maxHeight","chatOptions","userMessageHandler","paddingBottom","Modal","open","modalHeading","modalLabel","primaryButtonText","onRequestSubmit","onRequestClose","onSecondarySubmit","secondaryButtonText","Form","withOverlay","TextInput","invalidText","invalid","labelText","onChange","for","class","maxWidth","Dropdown","titleText","helperText","direction","items","light","itemToString","selectedItem","Tile","image","alignContent","position","lineHeight","UnorderedList","ListItem","Button","selected","margin","Table","TableHead","TableRow","TableHeader","TableBody","row","TableCell","App","marginTop","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"2KAAe,I,yGCCAA,ECgBC,kBACd,cAACC,EAAA,EAAD,CACEC,OAAQ,gBAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,qBAAtB,OACN,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEC,aAAW,YACXC,QAASL,EACTM,SAAUP,IAEZ,cAACQ,EAAA,EAAD,CAAYC,KAAK,IAAIC,OAAO,eAA5B,uCAGA,cAACC,EAAA,EAAD,CACEN,aAAW,kBACXO,SAAUZ,EACVa,cAAc,EAHhB,SAIE,cAACC,EAAA,EAAD,MAKE,cAACC,EAAA,EAAD,CAAkBC,MAAO,CAACC,QAAQ,KAAlC,SACE,cAACC,EAAA,EAAD,CAAgBT,KAAK,YAArB,+BAEF,cAACM,EAAA,EAAD,CAAkBC,MAAO,CAACC,QAAQ,KAAlC,SACE,cAACC,EAAA,EAAD,CAAgBT,KAAK,YAArB,oC,gOC3CC,MAA0B,yC,QCGnCU,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC3B,MAAa,QAATD,EAEA,qBAAKE,UAAU,iCAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,MAIpB,SAATD,EAEA,qBAAKE,UAAU,0CAAf,SACE,mBAAGA,UAAU,gCAAb,SAA8CD,MAIvC,WAATD,EAEA,qBAAKE,UAAU,cAAf,SACE,wBACEF,KAAK,SACLE,UAAU,oDACVC,UAAQ,EAHV,SAKGF,MAMF,MAQTF,EAAYK,aAAe,CACzBH,KAAM,IAGOF,QCzCTM,EAAa,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAEnCC,EAAO,yCADWD,EAAa,gCAAkC,IAEvE,OACE,wBACER,KAAK,SACLE,UAAWO,EACXN,SAAUK,EACVtB,QAAS,WACPqB,EAAYD,IALhB,SAQGA,EAAOI,SAWdL,EAAWD,aAAe,CACxBI,YAAY,GAGCH,QC9BA,MAA0B,wCCA1B,MAA0B,uCCA1B,MAA0B,+CCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,OAA0B,oCCA1B,OAA0B,kCCA1B,OAA0B,qCCA1B,OAA0B,wCC2C1BM,GA/BF,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,KAAMY,EAAW,EAAXA,KACpB,OAAQZ,GACN,IAAK,cACH,OAAQ,cAAC,EAAD,CAAYa,MAAOD,EAAME,OAAQF,IAC3C,IAAK,aACH,OAAQ,cAAC,EAAD,CAAWC,MAAOD,EAAME,OAAQF,IAC1C,IAAK,qBACH,OAAQ,cAAC,EAAD,CAAkBC,MAAOD,EAAME,OAAQF,IACjD,IAAK,OACH,OAAQ,cAAC,EAAD,CAAMC,MAAOD,EAAME,OAAQF,IACrC,IAAK,OACH,OAAQ,cAAC,EAAD,CAAMC,MAAOD,EAAME,OAAQF,IACrC,IAAK,UACH,OAAQ,cAAC,GAAD,CAASC,MAAOD,EAAME,OAAQF,IACxC,IAAK,QACH,OAAQ,cAAC,GAAD,CAAOC,MAAOD,EAAME,OAAQF,IACtC,IAAK,WACH,OAAQ,cAAC,GAAD,CAAUC,MAAOD,EAAME,OAAQF,IACzC,IAAK,cACH,OAAQ,cAAC,GAAD,CAAYC,MAAOD,EAAME,OAAQF,IAC3C,QACE,OAAQ,cAAC,EAAD,CAAMC,MAAOD,EAAME,OAAQF,MC7BnCG,GAAmB,SAAC,GAEnB,IADLR,EACI,EADJA,YAAaS,EACT,EADSA,SAAUC,EACnB,EADmBA,YAAaT,EAChC,EADgCA,WAG9BC,EAAO,wCADWD,EAAa,oDAAsD,IAG3F,OACE,yBACER,KAAK,SACLE,UAAWO,EACXvB,QAAS,WACPqB,EAAYS,IAJhB,UAOE,sBAAKd,UAAU,4BAAf,UACE,cAAC,GAAD,CAAMU,KAAM,IAAKZ,KAAK,gBACtB,2BAEF,sBAAKE,UAAU,kDAAf,UACE,mBAAGA,UAAU,+BAAb,SAA6Cc,IAC7C,mBAAGd,UAAU,aAAb,SAA2Be,IAC3B,mBAAGf,UAAU,sCAAb,sCAaRa,GAAiBX,aAAe,CAC9BI,YAAY,GAGCO,UCrCTG,GAAoB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAASZ,EAA8B,EAA9BA,YACpC,OADkE,EAAjBC,WAG7C,cAAC,EAAD,CACER,KAAK,OACLC,KAAMkB,EAAQ,GAAGT,QAKrB,6BACGS,EAAQC,KAAI,SAAAd,GAAM,OACjB,oBACEJ,UAAU,mBACVmB,KAAK,eACLnC,QAAS,WAAQqB,EAAYD,IAH/B,SAKGA,EAAOI,cAalBQ,GAAkBd,aAAe,CAC/BI,YAAY,GAGCU,UC2CAI,G,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXL,QAAS,IAJM,E,sDAQnB,WACEM,KAAKC,SAAS,CAAEP,QAASM,KAAKF,MAAMJ,Y,0BAGtC,SAAab,GACXmB,KAAKC,SAAS,CAAEP,QAAS,CAACQ,OAAOC,OAAOtB,EAAQ,CAAEE,YAAY,OAC9DiB,KAAKF,MAAMhB,YAAY,SAAUD,EAAOuB,MAAMC,MAAM7B,Q,oBAGtD,WAAU,IAAD,OACDkB,EAAUM,KAAKF,MAAMQ,eAAiBN,KAAKD,MAAML,QAAQ,GAAGX,WAAaiB,KAAKD,MAAML,QAAU,GAEpG,MAAwB,eAApBM,KAAKF,MAAMvB,KAEX,8BACGmB,EAAQC,KAAI,SAAAd,GAAM,OACjB,cAAC,GAAD,CACEU,SAAUV,EAAOU,SACjBC,YAAaX,EAAOW,YACpBV,YAAa,SAACsB,GACZ,EAAKtB,YAAYsB,WAOL,WAApBJ,KAAKF,MAAMvB,KAEX,qBAAKE,UAAU,mBAAf,SACGiB,EAAQC,KAAI,SAAAd,GAAM,OACjB,cAAC,EAAD,CAEEA,OAAQA,EACRC,YAAa,SAACyB,GACZ,EAAKC,aAAaD,IAEpBxB,WAAYF,EAAOE,YALdF,EAAOuB,MAAMC,MAAM7B,WAWV,SAApBwB,KAAKF,MAAMvB,KAEX,qBAAKE,UAAU,mBAAf,SACE,cAAC,GAAD,CACEiB,QAASA,EACTZ,YAAa,SAACyB,GACZ,EAAKC,aAAaD,IAEpBxB,WAAYiB,KAAKD,MAAML,QAAQ,GAAGX,eAKnC,S,GAjEkB0B,IAAMC,WCH7BC,GAAc,SAAC,GAKd,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAGMC,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACvD/C,MAAO,WACPgD,SAAU,MACVC,sBAAuB,IAInBC,EAAmBL,EAAkBM,OAAOV,GAC5CW,EAAsBP,EAAkBM,OAAOT,GAC/CW,EAAsBR,EAAkBM,OAAOR,GAErD,OACE,sBAAKrC,UAAU,eAAf,UACE,sBAAKA,UAAU,mCAAf,UACE,mBAAGA,UAAU,+BAAb,yCACA,mBAAGA,UAAU,+BAAb,SAA6C4C,OAE/C,sBAAK5C,UAAU,wBAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,kDAEGsC,OAGL,sBAAKtC,UAAU,qBAAf,UACE,oDACA,4BAAI8C,OAEN,sBAAK9C,UAAU,qBAAf,UACE,gDACA,4BAAI+C,cAedb,GAAYhC,aAAe,CACzBkC,OAAQ,GAGKF,UC5BAc,GA3BE,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAlB,OACf,sBAAKnD,UAAU,sBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,2CACA,8CACA,2CAEGiD,QAGL,cAAC,GAAD,CAAMnD,KAAK,WAAWY,KAAM,QAE9B,sBAAKV,UAAU,qBAAf,UACE,4BAAIkD,IACJ,4BAAIC,IACJ,wDCpBS,OAA0B,kCC0B1BC,GAtBG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAChB,sBAAKrD,UAAU,wBAAf,UACE,qBACEA,UAAU,sCACVN,MAAO,CAAE4D,gBAAgB,OAAD,OAASC,GAAT,MAF1B,SAIE,0BAEF,qBAAKvD,UAAU,0CAAf,SACE,oBAAGA,UAAU,aAAb,0CAEGqD,EAFH,kDCyBSG,GAnCO,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAd,OACpB,sBAAK1D,UAAU,eAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,mBAAGA,UAAU,+BAAb,+BACA,oBAAGA,UAAU,+BAAb,UACGyD,EADH,IAGGC,QAGL,sBAAK1D,UAAU,wBAAf,UACE,qBAAKA,UAAU,qBAAf,SACE,qDAEF,sBAAKA,UAAU,qBAAf,UACE,wCACA,6CAEF,sBAAKA,UAAU,qBAAf,UACE,oDACA,0CAEF,sBAAKA,UAAU,qBAAf,UACE,iDACA,mDC1BK2D,GAAc,cACdC,GAAY,WACZC,GAAS,SCHP,OAA0B,qCCKzC,SAASC,GAAQC,GACf,OAAIA,EAAIC,SAAS,gBACRC,GAEF,GAGT,IAMeC,GANK,SAAC,GAAD,IAAGH,EAAH,EAAGA,IAAH,OAAa,qBAAKI,IAAKL,GAAQC,GAAMpD,MAAM,MAAMyD,IAAKL,KCU3DM,GAnBW,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACxB,8BACGA,EAAIC,MAAM,EAAG,GAAGrD,KAAI,SAAAS,GAAK,OACxB,sBAAK6C,GAAG,aAAaxE,UAAU,cAA/B,UACE,iCAAS2B,EAAM8C,QACf,uBACE9C,EAAM+C,KAAKC,OAAS,IAArB,UAA+BhD,EAAM+C,KAAKE,UAAU,EAAG,KAAvD,OAAmEjD,EAAM+C,KAC1E,uBACA,mBAAGvF,KAAI,qBAAgBwC,EAAM6C,IAAMK,OAAO,SAASC,IAAI,sBAAvD,2BACA,qBAAKN,GAAI7C,EAAM6C,GAAIO,QAAM,EAAzB,SAA2BpD,EAAM+C,gBCDzC,SAASM,GAAeC,EAAGC,GAGzB,IAFA,IAAIC,GAAmB,EAEdC,EAAIH,EAAGG,EAAIF,EAASP,SAA+B,IAArBQ,EAA2BC,GAAK,EAC5C,SAArBF,EAASE,GAAGtF,OACdqF,GAAmB,GAGvB,OAAOA,EAGT,IAwGeE,GAxGE,SAAC,GAAiD,IAA/CH,EAA8C,EAA9CA,SAAU7E,EAAoC,EAApCA,YAGtBiF,EAH0D,EAAvBC,mBAEE5B,GACJ,wDAA0D,qCACjG,OACE,sBAAKa,GAAG,YAAYxE,UAAWsF,EAAiB5F,MAAO,CAACkB,OAAO,QAA/D,UACGsE,EAAShE,KAAI,SAACsE,EAASP,GACtB,OAAQO,EAAQ1F,MACd,IAAK,SACH,MAAwB,SAApB0F,EAAQC,QAER,cAAC,GAAD,CACE3F,KAAK,OACLmB,QAASuE,EAAQE,QACjBrF,YAAaA,EACbwB,cAAemD,GAAeC,EAAGC,KAKrC,cAAC,GAAD,CACEpF,KAAK,SACLmB,QAASuE,EAAQE,QACjBrF,YAAaA,EACbwB,cAAemD,GAAeC,EAAGC,KAGvC,IAAK,UACH,OACE,cAAC,GAAD,CACE/C,QAASqD,EAAQE,QAAQ,iBACzBrD,OAAQmD,EAAQE,QAAQ,kBACxBpD,UAAWkD,EAAQE,QAAQC,UAGjC,IAAK,cACH,OACE,cAAC,GAAD,CACE1C,IAAKuC,EAAQE,QAAQE,QACrB1C,SAAUsC,EAAQE,QAAQG,KAC1B1C,SAAUqC,EAAQE,QAAQrC,KAC1ByC,OAAO,mBAGb,IAAK,QACH,OACE,cAAC,GAAD,CACEzC,KAAMmC,EAAQE,UAGpB,IAAK,aACH,OACE,cAAC,GAAD,CACE5F,KAAK,aACLmB,QAASuE,EAAQE,QACjB7D,cAAemD,GAAeC,EAAGC,KAGvC,IAAK,YACH,OACE,cAAC,GAAD,CACEzB,UAAW+B,EAAQE,QAAQK,aAC3BrC,QAAS8B,EAAQE,QAAQM,aAG/B,IAAK,QACH,OACE,cAAC,GAAD,CACEjC,IAAKyB,EAAQE,UAGnB,IAAK,SACH,OACE,cAAC,GAAD,CACEpB,IAAKkB,EAAQE,UAGnB,QACE,OACE,cAAC,EAAD,CACE5F,KAAM0F,EAAQ1F,KACdC,KAAMyF,EAAQE,cAMxB,qBAAK1F,UAAU,oBAAf,SACE,oBAAGA,UAAU,aAAb,iBAEE,8BAGJ,qBAAKwE,GAAG,mBAAR,sBC9GAyB,GAAgB,SAAC,GAAD,IACpBf,EADoB,EACpBA,SACA7E,EAFoB,EAEpBA,YACAkF,EAHoB,EAGpBA,iBAHoB,OAKpB,sBAAKvF,UAAU,yDAAyDN,MAAO,CAACwG,YAAY,QAA5F,UACE,qBAAKlG,UAAU,kDAAf,SACE,mBAAGA,UAAU,aAAb,gCAEF,qBAAKwE,GAAG,+BAA+BxE,UAAU,+BAAjD,SACE,cAAC,GAAD,CACEkF,SAAUA,EACV7E,YAAaA,EACbkF,iBAAkBA,MAGtB,qBAAKvF,UAAU,iDAAf,SACE,cAAC,kBAAD,CACEwE,GAAG,cACH2B,SAAU,SAACC,GACT/F,EAAY,OAAQ+F,EAAEvB,OAAOlD,OAC7ByE,EAAEvB,OAAOlD,MAAQ,IAEnB0E,YAAY,uBAMpBJ,GAAc/F,aAAe,CAC3BqF,iBAAkB,MASLU,UCjCAK,GAXI,SAACC,EAAQC,EAAYC,GAClCC,OAAOC,kBACTD,OAAOC,iBAAiBL,WAAW,eAAgB,CACjDM,aAAcF,OAAOG,YAAYC,KAAKC,SAASH,aAC/CL,SACAC,aACAC,Y,6BCJFO,GAAY,KAEhB,SAASC,GAAWlH,EAAMmH,EAASC,EAAcC,GAE/C,IAAMnG,EAAU,CACd8C,IAAI,UAAD,OAAW2C,OAAOW,SAASC,SAA3B,YAAuCZ,OAAOW,SAASE,KAAvD,gBACHC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAM,CACJC,WAAYZ,GACZpF,MAAO,CAAE7B,QACTmH,UACAW,YAAaV,IAGjBW,IAAM7G,GACH8G,MAAK,SAACJ,GACLK,QAAQC,IAAIN,GAGRP,EAAS,KAAMO,MAIpBO,OAAM,SAACC,GAENH,QAAQC,IAAIE,MAmClB,IAAMC,GAAe,SAACrI,EAAMmH,EAASC,EAAckB,EAAcjB,GAE3DiB,IACFrB,GAAY,MAEI,OAAdA,GApCN,SAAsBI,GACpBkB,MAAM,UAAD,OAAW5B,OAAOW,SAASC,SAA3B,YAAuCZ,OAAOW,SAASE,KAAvD,gBAA2E,CAC9EC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAGjBK,MAAK,SAACJ,GACLA,EAAKY,OACFR,MAAK,SAACQ,GACDA,EAAKC,KACPpB,EAASmB,IAETvB,GAAYuB,EAAKE,OAAOb,WACxBR,EAAS,aAIhBc,OAAM,SAACC,GACNf,EAASe,MAiBXO,CAAY,yCAAC,WAAOP,GAAP,UAAAQ,EAAA,sDACPR,IACFH,QAAQC,IAAR,gBAAqBW,KAAKC,UAAUV,KACpCf,EAASe,IAEXlB,GAAWlH,EAAMmH,EAASC,EAAcC,GAL7B,2CAAD,uDAUZH,GAAWlH,EAAMmH,EAASC,EAAcC,IAgEtC0B,GAAyB,SAACC,GAiF9B,OAhF4BtH,OAAOuH,KAAKD,GAAW7H,KAAI,SAACqF,GACtD,OAAQA,GACN,IAAK,sBACH,MAAO,CACLzG,KAAM,UACN4F,QAASqD,EAAUE,qBAGvB,IAAK,sBACH,MAAO,CACLnJ,KAAM,cACN4F,QAASqD,EAAUG,qBAGvB,IAAK,gBACH,MAAO,CACLpJ,KAAM,QACN4F,SAAS,IAAIyD,MAAOC,mBAAmB,UAG3C,IAAK,qBACH,IAAMC,EAAiBN,EAAUO,mBAAmBC,aAkCpD,MAAO,CACLzJ,KAAM,aACN4F,QAnCY,CACZ,CACElB,GAAI,EACJ7C,MAAO,iBACPb,SAAU,iBACVC,YAAa,wCAEf,CACEyD,GAAI,EACJ7C,MAAO,SACPb,SAAU,iBACVC,YAAa,yDAEf,CACEyD,GAAI,EACJ7C,MAAO,eACPb,SAAU,mBACVC,YAAa,+BAEf,CACEyD,GAAI,EACJ7C,MAAO,eACPb,SAAU,8BACVC,YAAa,6CAEf,CACEyD,GAAI,EACJ7C,MAAO,kBACPb,SAAU,4BACVC,YAAa,yCAGUyI,QAAO,SAAAC,GAAI,OAAIJ,EAAerF,SAASyF,EAAK9H,WAMzE,IAAK,oBACH,MAAO,CACL7B,KAAM,YACN4F,QAASqD,EAAUW,mBAGvB,IAAK,uBACH,MAAO,CACL5J,KAAM,eACNC,KAAMgJ,EAAUY,qBAAqBC,YACrCC,KAAOd,EAAUY,qBAAqBG,WAClCf,EAAUY,qBAAqBG,WAC/B,MAGR,QACE,OAAO,UC5LfC,EAAQ,KAAyBC,W,IAo1BlBC,G,kDA70Bb,aAAe,IAAD,gCACZ,gBAiFFC,SAAW,WACTpC,IAAMqC,IAAN,UAAa,EAAK7I,MAAM8I,MAAxB,wBAAoDrC,MAAK,SAAAzD,GAEvD,IAAMmD,EAAUhG,OAAOuH,KAAK1E,EAAIqD,KAAK,IAClC6B,QAAO,SAACa,GAAD,MAAiB,OAARA,KAChBnJ,KAAI,SAACmJ,GACQ,iBAARA,IACF/F,EAAIqD,KAAOrD,EAAIqD,KAAKzG,KAAI,SAAAoJ,GACtB,IAAMC,EAAOD,EAAKD,GAAKG,MAAM,KACvB3E,EAAO,IAAIsD,KAAKoB,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAG7C,OAFAvC,QAAQC,IAAIpC,GACZyE,EAAKD,GAAOxE,EAAK4E,UAAY,OAAS5E,EAAK6E,cACpCJ,MAGC,cAARD,GAA+B,aAARA,GAA8B,YAARA,IAC/C/F,EAAIqD,KAAOrD,EAAIqD,KAAKzG,KAAI,SAAAoJ,GAKtB,OAJAtC,QAAQC,IAAIqC,EAAKD,IACL,aAARA,IACFC,EAAKD,GAAOC,EAAKD,GAAKM,YACxBL,EAAKD,GAAOC,EAAKD,GAAK9F,MAAM,EAAG,GAAK,QAC7B+F,MAMX,IADA,IAAIM,EAAeP,EAAIG,MAAM,KACpBvF,EAAI,EAAGA,EAAI2F,EAAajG,OAAQM,IACvC2F,EAAa3F,GAAK2F,EAAa3F,GAAG4F,OAAO,GAAGC,cAC1CF,EAAa3F,GAAGL,UAAU,GAE9B,OAAOgG,EAAaG,KAAK,QAE7B,EAAKvJ,SAAS,CAAEmG,KAAMrD,EAAIqD,KAAMF,UAASuD,SAAS,EAAOC,OAAO,OAC/D/C,OAAM,SAAAC,GACP,EAAK3G,SAAS,CAAEwJ,SAAS,EAAOC,OAAO,IACvCjD,QAAQC,IAAI,QAASE,OAtHX,EA2Hd+C,aAAe,SAAC9E,IAGiF,IAA3F,EAAK9E,MAAM,UAAY8E,EAAEvB,OAAOsG,KAAKN,OAAO,GAAGC,cAAgB1E,EAAEvB,OAAOsG,KAAK5G,MAAM,KACrF,EAAK/C,SAAL,eAAiB,UAAY4E,EAAEvB,OAAOsG,KAAKN,OAAO,GAAGC,cAAgB1E,EAAEvB,OAAOsG,KAAK5G,MAAM,IAAK,IAJ5E,MAMI6B,EAAEvB,OAAlBsG,EANY,EAMZA,KAAMxJ,EANM,EAMNA,MACd,EAAKH,SAAL,eACG2J,EAAOxJ,KAnIE,EAuIdyJ,aAAe,WACb,GAAwB,KAApB,EAAK9J,MAAM6J,MAAoC,KAArB,EAAK7J,MAAM+J,OAAuC,KAAvB,EAAK/J,MAAMsE,QAIlE,MAHwB,KAApB,EAAKtE,MAAM6J,MAAa,EAAK3J,SAAS,CAAE8J,aAAa,IAChC,KAArB,EAAKhK,MAAM+J,OAAc,EAAK7J,SAAS,CAAE+J,cAAc,SAChC,KAAvB,EAAKjK,MAAMsE,SAAgB,EAAKpE,SAAS,CAAEgK,gBAAgB,KAGjE,EAAKhK,SAAS,CAAEwJ,SAAS,IACzB,IAAMS,EAASC,KAAKC,MAAsB,GAAhBD,KAAKD,UACzBG,EAAQH,EAAS,EAAKnK,MAAM+J,MAAM1G,OAAS,EAAI8G,EAASA,EAAS,EACjEI,EAAS,EAAKvK,MAAM6J,KAAKvG,UAAU,EAAG,GAAGkG,cAAgB,EAAKxJ,MAAM+J,MAAMzG,UAAUgH,EAAOA,EAAQ,IAAM,IAAIzC,MAAQ2C,UAAY,IACjIjG,EAAO,IAAIsD,KACX4C,EAAU,IAAI5C,KAAKtD,EAAKmG,SAASnG,EAAKoG,WAAa,EAAK3K,MAAM4K,UAC9DC,EAAcJ,EAAQtB,UAAY,KAAOsB,EAAQE,WAAa,GAAK,IAAMpG,EAAK6E,cACpF,EAAKlJ,SAAS,CAAEqK,SAAQM,gBACxBnE,QAAQC,IAAI4D,EAAQM,GAGpB,IAAIrE,EAAQiC,EAAQ,IAEdpC,EAAOiB,KAAKC,UAAU,CAC1B,KAAQ,EAAKvH,MAAM6J,KACnB,SAAYiB,OAAO,EAAK9K,MAAMkH,KAAO,EAAKlH,MAAM+J,OAChD,UAAaQ,EACb,aAAgBM,EAChB,eAAkB,EAAK7K,MAAM+K,OAAS,EAAK/K,MAAM4K,QACjD,QAAW,EAAK5K,MAAMsE,UAaxBkC,EATa,CACXN,OAAQ,OACRzD,IAAI,GAAD,OAAK,EAAKzC,MAAM8I,MAAhB,0BACH3C,QAAS,CACP,eAAgB,oBAElBE,KAAOA,IAIRI,MAAK,SAACzD,GACL0D,QAAQC,IAAI3D,IACS,IAAlBA,EAAIqD,KAAK2E,KACV,EAAK9K,SAAS,CAAEwJ,SAAS,EAAOuB,SAAS,EAAMC,YAAW,EAAOC,WAAW,IAE5E,EAAKjL,SAAS,CAAEwJ,SAAS,EAAOuB,SAAS,EAAMC,YAAW,EAAMC,WAAW,IAC7E,EAAKvC,WACL,EAAKwC,SAASC,QAAQC,oBACrB1E,OAAM,SAAAC,GACPH,QAAQC,IAAI,QAASE,OAxLX,EA4Ld0E,QAAU,WACR,EAAKC,oBAAoBnJ,IACzByE,GAAa,GAAI,GAAI,EAAKjB,cAAc,GAAO,SAACgB,EAAKR,GAInD,GAFAK,QAAQC,IAAIN,GAERQ,QAAgB4E,IAATpF,EAUT,MATA,EAAKmF,oBAAoBjJ,IAEzB,EAAKmJ,eAAe,CAClBlN,KAAM,MACN4F,QAAS,0EAKL,IAAIuH,MAFQ9E,GAAQR,GAK5B,EAAKmF,oBAAoBlJ,IACzBoE,QAAQC,IAAI,QAEZ,EAAKiF,kBAAkBvF,EAAKA,MAG5B,EAAKwF,qBAAqBvE,KAAKC,UAAUlB,EAAKA,OAG9C,EAAKyF,0BAA0BzF,EAAKA,KAAKc,OAAOvB,aAxNtC,EAgTdmG,sCAAwC,SAACC,GACvC,IAAMC,EAAY,GAyDlB,OAxDAD,EAAWE,SAAQ,SAACC,GAClB,GAA+B,UAA3BA,EAASC,cACXH,EAAUI,KAAK,CACb7N,KAAM,MACN4F,QAAS+H,EAAS1N,YAEf,GAA+B,WAA3B0N,EAASC,cAA4B,CAC9CH,EAAUI,KAAK,CACb7N,KAAM,MACN4F,QAAS+H,EAAShJ,QAGpB,IAAImJ,EAAa,YACWb,IAAxBU,EAASG,aACXA,EAAaH,EAASG,YAGxB,IAAMtJ,EAAM,CACVxE,KAAM,SACN2F,QAAS,OACTC,QAAS+H,EAASxM,SAGD,WAAf2M,IACFtJ,EAAImB,QAAU,UAEhB8H,EAAUI,KAAKrJ,OACqB,UAA3BmJ,EAASC,cAClBH,EAAUI,KAAK,CACb7N,KAAM2N,EAASC,cACfrK,KAAMoK,EAASpK,KACfwK,OAAQJ,EAASI,SAEiB,SAA3BJ,EAASC,cACI,KAAlBD,EAAS1N,MACXwN,EAAUI,KAAK,CACb7N,KAAM,MACN4F,QAAS+H,EAAS1N,OAGc,UAA3B0N,EAASC,cAClBH,EAAUI,KAAK,CACb7N,KAAM,QACN4F,QAAS+H,EAASK,SAEgB,WAA3BL,EAASC,gBAClBH,EAAUI,KAAK,CACb7N,KAAM,MACN4F,QAAS+H,EAASM,SAEpBR,EAAUI,KAAK,CACb7N,KAAM2N,EAASC,cACfhI,QAAS+H,EAASO,cAIjBT,GAvWP,EAAKpG,aAAe,KACpB,EAAKuF,SAAW1K,IAAMiM,YACtB,EAAKC,SAAWlM,IAAMiM,YACtB,EAAKE,SAAWnM,IAAMiM,YACtB,EAAK3M,OAAL,GACE4D,SAAU,CAAC,CACTpF,KAAM,MACN4F,QAAS,qEAEX,CACE5F,KAAM,SACN2E,MAAO,YACPiB,QAAS,CACP,CACE,MAAS,WACT,MAAS,CACP,MAAS,CACP,KAAQ,cAId,CACE,MAAS,gBACT,MAAS,CACP,MAAS,CACP,KAAQ,mBAId,CACE,MAAS,gBACT,MAAS,CACP,MAAS,CACP,KAAQ,sBAMlByF,KAAM,GACNE,MAAO,GACPQ,OAAQ,GACRjG,QAAS,GACT6G,WAAW,EACX2B,QAAS,UACTlC,QAAS,EACTG,OAAQ,IA1CV,uBA2CU,IA3CV,gCA4CkB,GA5ClB,6BA6Ce,GA7Cf,8BA8CgB,GA9ChB,yBA+CW,GA/CX,yBAgDW,GAhDX,qBAiDQ,MAjDR,uBAkDS,GAlDT,4BAmDc,GAnDd,GAPY,E,qDA+Dd,WAAqB,IAAD,OAClBvE,IAAMqC,IAAN,iBAAoBzD,OAAOW,SAASC,SAApC,YAAgDZ,OAAOW,SAASE,KAAhE,WAA8EQ,MAAK,SAAAzD,GACjF,IAAIP,EAAM,GACgB,MAAvBO,EAAIqD,KAAKpD,OAAO,IACjBR,EAAMO,EAAIqD,KAAKpD,MAAM,GAAI,GACzB,EAAK/C,SAAS,CAAC4I,MAAOrG,MAGtBA,EAAMO,EAAIqD,KACV,EAAKnG,SAAS,CAAC4I,MAAOrG,KAExB,EAAKmG,cACJhC,OAAM,SAAAC,GACPkG,MAAM,0CACN3H,OAAOW,SAASiH,QAAhB,iBAAkC5H,OAAOW,SAASC,SAAlD,YAA8DZ,OAAOW,SAASE,KAA9E,UACAS,QAAQC,IAAIE,Q,gCA8IhB,SAAmBrI,EAAMC,GAGvB,GAFAuG,GAAW,eAAgB,YAAa,kBAEpB,KAAhBvG,EAAKwO,OAAe,CAQtB,GANa,WAATzO,GACFyB,KAAKyL,eAAe,CAClBlN,KAAM,OACN4F,QAAS3F,IAGA,aAATA,EAKF,OAHA2G,OAAOW,SAASiH,QAAhB,iBAAkC5H,OAAOW,SAASC,SAAlD,YAA8DZ,OAAOW,SAASE,KAA9E,mBACAhG,KAAKsL,UAIP,GAAa,kBAAT9M,EAIF,YADAwB,KAAKsL,UAGP,GAAa,kBAAT9M,EAA0B,CAC5B,IAAyB,IAArBwB,KAAKD,MAAM2J,MAEbvE,OAAOW,SAASiH,QAAhB,iBAAkC5H,OAAOW,SAASC,SAAlD,YAA8DZ,OAAOW,SAASE,KAA9E,kBAEK,CACOhG,KAAKD,MAAM4D,SAKrB3D,KAAKyL,eAJW,CACdlN,KAAM,MACN4F,QAAS,kDAKf,YADAnE,KAAKsL,UAGPtL,KAAKiN,0BAA0BzO,EAAMwB,KAAKD,MAAMmN,uB,uCAIpD,SAA0BA,GACxBlN,KAAKC,SAAS,CAAEiN,yB,iCAGlB,SAAoBlJ,GAClBhE,KAAKC,SAAS,CAAE+D,uB,uCAGlB,SAA0BxF,GAAuB,IAAD,OAAhBmH,EAAgB,uDAAN,KACxC3F,KAAKuL,oBAAoBnJ,IACzByE,GAAarI,EAAMmH,EAAS3F,KAAK4F,cAAc,GAAO,SAACgB,EAAKR,GAI1D,GAFAK,QAAQC,IAAIN,GAERQ,QAAgB4E,IAATpF,EAUT,MATA,EAAKmF,oBAAoBjJ,IAEzB,EAAKmJ,eAAe,CAClBlN,KAAM,MACN4F,QAAS,0EAKL,IAAIuH,MAFQ9E,GAAQR,GAK5B,EAAKmF,oBAAoBlJ,IACzBoE,QAAQC,IAAI,QAEZ,EAAKiF,kBAAkBvF,EAAKA,MAG5B,EAAKwF,qBAAqBvE,KAAKC,UAAUlB,EAAKA,OAG9C,EAAKyF,0BAA0BzF,EAAKA,KAAKc,OAAOvB,c,+BAiEpD,SAAkBwH,GAAgB,IAAD,OAEzBC,EAAYD,EAAcjG,OAChCT,QAAQC,IAAI0G,GACZ,IAAIC,GAAwB,EACxBrB,EAAY,SAEiBR,IAA7B4B,EAAUE,OAAOC,UACnBvB,EAAYA,EAAUwB,OAAOxN,KAAK8L,sCAAsCsB,EAAUE,OAAOC,WAIvFH,EAAUE,OAAOG,SAChBL,EAAUE,OAAOG,QAAQrK,OAAS,KACrCqD,QAAQC,IAAIW,KAAKC,UAAU8F,EAAUK,QAAS,KAAM,IAChCL,EAAUE,OAAtBG,QACAxB,SAAQ,SAACyB,IDxUK,SAAClG,GAC3B,IAAImG,EACAvN,EAEJ,OAAQoH,EAAUoC,MAChB,IAAK,cACH+D,EAAW,iBACXvN,EAAQoH,EAAUoG,WAAWC,WAC7B,MACF,IAAK,cACHF,EAAW,cACXvN,EAAQoH,EAAUoG,WAAWE,UAC7B,MACF,IAAK,gBACHH,EAAW,iBACXvN,EAAK,WAAOoH,EAAUoG,WAAWG,eAA5B,KACL,MACF,QACE,OAAO,KAIX,IAAMC,EAAqB,UAAML,EAAN,kBAAwBvN,GAEnD,OAAO,IAAI6N,SAAQ,SAACC,EAASC,GAC3BpH,MAAMiH,EAAuB,CAC3B/H,OAAQ,MACRC,QAAS,CACPC,OAAQ,sBAGTK,MAAK,SAACJ,GACLA,EAAKY,OACFR,MAAK,SAACQ,GACLkH,EAAQlH,SAGbL,OAAM,SAACC,GACNuH,EAAO,IAAIzC,MAAM9E,WCmSjBwH,CAAoBV,GACjBlH,MAAK,SAACU,GACL,QAA0BsE,IAAtB4B,EAAUzH,QACZ,EAAKsH,0BAA0B/F,EAAOA,aACjC,GAAsB,cAAlBA,EAAOA,OAAwB,CACxC,IAAMlC,EAASuC,GAAuB,CAAEY,kBAAmBjB,EAAOmH,QAClErC,EAAUI,KAAKpH,gBAOawG,IAAlC4B,EAAUE,OAAOgB,mBACyB9C,IAAzC4B,EAAUE,OAAOgB,aAAatJ,QACLuC,GAAuB6F,EAAUE,OAAOgB,aAAatJ,QAE7DiH,SAAQ,SAACsC,GACC,iBAAxBA,EAAehQ,KACjByN,EAAUI,KAAKmC,IAEflB,GAAwB,EACxB,EAAKmB,oBAAoBD,EAAe/P,KAAM+P,EAAejG,eAM7BkD,IAAlC4B,EAAUE,OAAOgB,mBAC4B9C,IAA5C4B,EAAUE,OAAOgB,aAAaG,WACLlH,GAAuB6F,EAAUE,OAAOgB,aAAaG,WAE7DxC,SAAQ,SAACsC,GACC,iBAAxBA,EAAehQ,MACjBkI,QAAQC,IAAIW,KAAKC,UAAUiH,IAC3BvC,EAAUI,KAAKmC,KAEflB,GAAwB,EACxB,EAAKmB,oBAAoBD,EAAe/P,KAAM+P,EAAejG,WAK9D+E,GAAyB,YAAaD,GAAa,WAAYA,EAAUzH,SAAW,cAAeyH,EAAUzH,QAAQ+I,QACxH1O,KAAKwO,oBAAoB,qIAG3BxO,KAAK2O,iBAAiB3C,EAAW,K,kCAGnC,SAAqB4C,GACnB5O,KAAKC,SAAS,CAAE2O,sB,8BAGlB,SAAiB5C,EAAW6C,GAAQ,IAAD,OACjC,GAAIA,EAAQ7C,EAAU5I,OAAQ,CAC5B,IAAML,EAAMiJ,EAAU6C,GACtB,GAAiB,UAAb9L,EAAIxE,KACNyB,KAAKyL,eAAe1I,GACpB/C,KAAK2O,iBAAiB3C,EAAW6C,EAAQ,OACpC,CACL,IAAMC,EAAaC,SAASC,eAAe,eACvCjM,EAAIuJ,SACNwC,EAAWhK,YAAc,uBAE3BmK,YAAW,WACTH,EAAWhK,YAAc,eACzB,EAAK6J,iBAAiB3C,EAAW6C,EAAQ,KACxC9L,EAAIjB,U,4BAKb,SAAeoN,GACb,IAAMC,EAAWJ,SAASC,eAAe,aACzChP,KAAKC,SAAS,CAAE0D,SAAS,GAAD,mBAAM3D,KAAKD,MAAM4D,UAAjB,CAA2BuL,MAAe,WAExC,SAApBA,EAAW3Q,MACb0Q,YAAW,WAETE,EAASC,OAAO,CAAEC,IAAKF,EAASG,aAAcC,SAAU,WAGxDJ,EAASK,UAAYL,EAASG,aAAeH,EAASM,eACrD,U,oBAKT,WAAU,IAAD,OA4BDC,EAAc,CAClB,CACEzM,GAAI,WACJzE,KAAM,mBACNmR,KAAM,OACNrF,OAAQ,mBAEV,CACErH,GAAI,WACJzE,KAAM,gBACNmR,KAAM,OACNrF,OAAQ,gBAEV,CACErH,GAAI,WACJzE,KAAM,qBACNmR,KAAM,OACNrF,OAAQ,sBAIZ,OACEtK,KAAKD,MAAM0J,QACT,8BACE,cAACmG,EAAA,EAAD,MAGF,sBAAKnR,UAAU,6CAA6CN,MAAO,CAAEC,QAAS,IAAKyR,eAAgB,SAAUC,WAAY,SAAUC,gBAAiB,iBAApJ,UACE,sBAAKtR,UAAU,+BAA+BwE,GAAG,WAAW+M,IAAKhQ,KAAKmL,SAAUhN,MAAO,CAAEC,QAAS,OAAQyR,eAAgB,SAAUxQ,OAAQ,QAAS0Q,gBAAiB,iBAAtK,UACE,sBAAKtR,UAAU,gCAAf,UACE,oBAAIA,UAAU,wBAAwBN,MAAO,CAAE8R,MAAO,SAAtD,iDAEe,uBACf,mBAAG9R,MAAO,CAAE8R,MAAO,SAAnB,mFAEI,0BAEN,qBAAKxR,UAAU,gBAAgBN,MAAO,CAAE+R,WAAY,KAApD,SACE,qBAAK/R,MAAO,CAAE+F,QAASlE,KAAKD,MAAMiL,QAAU,GAAK,QAAjD,SACE,cAAC,IAAD,CACEmF,aAAa,EACbC,KAAMpQ,KAAKD,MAAMkL,WAAW,QAAQ,UACpCoF,gBAAgB,QAChBC,QAAStQ,KAAKD,MAAMkL,WAAW,8BAA8B,mDAC7D9M,MAAO,CAAEoS,SAAU,QAASC,aAAc,QAC1CC,SAAUzQ,KAAKD,MAAMkL,WAAW,sBAAMmF,KAAK,UAAX,+CAA8D,sBAAMA,KAAK,UAAX,wFAC9FlN,MAAOlD,KAAKD,MAAMkL,WAAW,0BAA0B,mCAIzD,uBACN,qBAAKxM,UAAU,UAAf,SACE,qBAAKA,UAAU,+BAA+BN,MAAO,CAAEuS,UAAW,SAAlE,SACE,cAAC,GAAD,CACE/M,SAAU3D,KAAKD,MAAM4D,SACrBgN,YAAa3Q,KAAKD,MAAM4Q,YACxB7R,YAAa,SAACP,EAAMC,GAAW,EAAKoS,mBAAmBrS,EAAMC,IAC7DwF,iBAAkBhE,KAAKD,MAAMiE,uBAG7B,uBAAM,uBACZ,qBAAK7F,MAAO,CAACC,QAAS,UAGtB,sBAAK6E,GAAG,WAAW+M,IAAKhQ,KAAK2M,SAAWxO,MAAO,CAAEkB,OAAQ,QAAS6Q,WAAW,QAA7E,UACE,sBAAKzR,UAAU,+BAA+BN,MAAO,CAAEC,QAAS,OAAQyR,eAAgB,SAAUxQ,OAAQ,QAAS0Q,gBAAiB,iBAApI,UACE,sBAAKtR,UAAU,gCAAf,UACE,oBAAIA,UAAU,wBAAwBN,MAAO,CAAE8R,MAAO,SAAtD,8BAGA,mBAAG9R,MAAO,CAAE8R,MAAO,SAAnB,yDAIF,qBAAKxR,UAAU,gBAAgBN,MAAO,CAAE+R,WAAY,UAEhD,uBAEN,sBAAKzR,UAAU,UAAUN,MAAO,CAAE+R,WAAY,OAAQW,cAAe,QAArE,UAEE,cAACC,EAAA,EAAD,CAEEC,KAAM/Q,KAAKD,MAAMmL,UACjB8F,aAAa,WACbC,WAAW,WACXC,kBAAkB,SAClBC,gBAAiBnR,KAAK6J,aACtBuH,eAAgB,WAAQ,EAAKnR,SAAS,CAAEiL,WAAW,KACnDmG,kBAAmB,WAAQ,EAAKpR,SAAS,CAAEiL,WAAW,KACtDoG,oBAAoB,SACpBnS,KAAK,KAVP,SAWE,8BACE,eAACoS,EAAA,EAAD,WACGvR,KAAKD,MAAM0J,QACV,cAACmG,EAAA,EAAD,CACE4B,aAAa,IAGf,6BAGF,cAACC,EAAA,EAAD,CACExO,GAAG,OACHyO,YAAY,4BACZC,QAAS3R,KAAKD,MAAMgK,YACpB6H,UAAU,OACV9M,YAAY,WACZ8E,KAAK,OACLiI,SAAU7R,KAAK2J,aACfvJ,MAAOJ,KAAKD,MAAM6J,OAClB,uBAEF,qBAAKnL,UAAU,uCAAf,SACE,uBAAOqT,IAAI,QAAQC,MAAM,YAAzB,qBAEF,sBAAKA,MAAM,gCAAX,UACE,uBAAOtT,UAAU,iCAAiCqG,YAAY,MAAM3G,MAAO,CAAE6T,SAAU,OAASpI,KAAK,OAAOiI,SAAU7R,KAAK2J,aAAcvJ,MAAOJ,KAAKD,MAAMkH,OAC3J,sBAAM9I,MAAO,CAAEiB,MAAO,MAAtB,iBACA,uBAAOX,UAAU,iCAAiCqG,YAAY,aAAa3G,MAAO,CAAE6T,SAAU,OAASpI,KAAK,QAAQiI,SAAU7R,KAAK2J,aAAcvJ,MAAOJ,KAAKD,MAAM+J,WAC/J,uBAEN,cAAC2H,EAAA,EAAD,CACExO,GAAG,UACHyO,YAAY,4BACZC,QAAS3R,KAAKD,MAAMkK,eACpB2H,UAAU,UACV9M,YAAY,iBACZ8E,KAAK,UACLiI,SAAU7R,KAAK2J,aACfvJ,MAAOJ,KAAKD,MAAMsE,UAClB,uBACF,cAAC4N,EAAA,EAAD,CACEhP,GAAG,UACHiP,UAAU,iBACVC,WAAW,uCACXlT,MAAM,UACNmT,UAAU,MACVC,MApKK,CACrB,CACEpP,GAAI,WACJzE,KAAM,UACNK,OAAQ,UACR8L,QAAS,GAEX,CACE1H,GAAI,WACJzE,KAAM,YACNK,OAAQ,YACR8L,QAAS,GAEX,CACE1H,GAAI,WACJzE,KAAM,gBACNK,OAAQ,eACR8L,QAAS,GAEX,CACE1H,GAAI,WACJzE,KAAM,WACNK,OAAQ,WACR8L,QAAS,KA8IK2H,OAAO,EACPC,aAAc,SAACxJ,GAAD,OAAWA,EAAOA,EAAKvK,KAAO,IAC5CqT,SAAU,SAAChN,GACT,EAAK5E,SAAS,CAAE4M,QAAShI,EAAE2N,aAAa3T,OAAQ8L,QAAS9F,EAAE2N,aAAa7H,aAE1E,uBAEF,cAAC8G,EAAA,EAAD,CACE/S,UAAQ,EACRuE,GAAG,SACH2O,UAAS,yBAAoB5R,KAAKD,MAAM8M,SACxC/H,YAAY,SACZ8E,KAAK,UACLiI,SAAU7R,KAAK2J,aACfvJ,MAAOJ,KAAKD,MAAM+K,OAAS9K,KAAKD,MAAM4K,UACtC,8BAMR,qBAAKlM,UAAU,+BAAf,SACE,eAACgU,EAAA,EAAD,CAAMtU,MAAO,CAAE8R,MAAO,QAASF,gBAAiB,iBAAhD,UACE,qBAAKnN,IAAK8P,EAAOvU,MAAO,CAAE6T,SAAU,4BAA8B,uBAAM,uBACxE,qBAAK7T,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,SAAUgB,cAAe,SAAUX,WAAY,UAAtH,SACE,oBAAIzR,UAAU,wBAAwBN,MAAO,CAAE0S,cAAe,QAA9D,SACGnB,EAAY,GAAGlR,SAGpB,sBAAKL,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,6BAAKH,EAAY,GAAGC,OACpB,uBAAMxR,MAAO,CAAE+F,QAAS,gBAAxB,UACE,qBAAK/F,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,OAAlE,gBACA,qBAAK1U,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,KAAlE,uBAEE,uBACN,qBAAK1U,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,SACE,eAACiD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,gCAGA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAGA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAKE,uBACN,sBAAK9R,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,cAACmD,EAAA,EAAD,CACE5C,KAAK,UACLjR,KAAK,QACL1B,QAAS,WACP,EAAKwC,SAAS,CAAEiL,WAAW,EAAM+H,SAAUvD,EAAY,GAAI5E,OAAQ4E,EAAY,GAAGC,QAJtF,qBAQuB,+BAI7B,qBAAKlR,UAAU,eAAf,SACE,eAACgU,EAAA,EAAD,CAAMtU,MAAO,CAAE8R,MAAO,QAASF,gBAAiB,iBAAhD,UACE,qBAAKnN,IAAK8P,EAAOvU,MAAO,CAAE6T,SAAU,4BAA8B,uBAAM,uBACxE,qBAAK7T,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,SAAUgB,cAAe,SAAUX,WAAY,UAAtH,SACE,oBAAIzR,UAAU,wBAAwBN,MAAO,CAAE0S,cAAe,QAA9D,SACGnB,EAAY,GAAGlR,SAGpB,sBAAKL,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,6BAAKH,EAAY,GAAGC,OACpB,uBAAMxR,MAAO,CAAE+F,QAAS,gBAAxB,UACE,qBAAK/F,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,OAAlE,gBACA,qBAAK1U,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,KAAlE,uBAEE,uBACN,qBAAK1U,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,SACE,eAACiD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,gCAGA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAIA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAIE,uBACN,sBAAK9R,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,cAACmD,EAAA,EAAD,CACE5C,KAAK,UACLjR,KAAK,QACL1B,QAAS,WACP,EAAKwC,SAAS,CAAEiL,WAAW,EAAM+H,SAAUvD,EAAY,GAAI5E,OAAQ4E,EAAY,GAAGC,QAJtF,qBASW,+BAIjB,qBAAKlR,UAAU,eAAf,SACE,eAACgU,EAAA,EAAD,CAAMtU,MAAO,CAAE8R,MAAO,QAASF,gBAAiB,iBAAhD,UACE,qBAAKnN,IAAK8P,EAAOvU,MAAO,CAAE6T,SAAU,4BAA8B,uBAAM,uBACxE,qBAAK7T,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,SAAUgB,cAAe,SAAUX,WAAY,UAAtH,SACE,oBAAIzR,UAAU,wBAAwBN,MAAO,CAAE0S,cAAe,QAA9D,SACGnB,EAAY,GAAGlR,SAGpB,sBAAKL,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,6BAAKH,EAAY,GAAGC,OACpB,uBAAMxR,MAAO,CAAE+F,QAAS,gBAAxB,UACE,qBAAK/F,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,OAAlE,gBACA,qBAAK1U,MAAO,CAAEyU,SAAU,WAAY1O,QAAS,QAAS2O,WAAY,KAAlE,uBAEE,uBACN,qBAAK1U,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,SACE,eAACiD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,gCAGA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAGA,cAAC8C,EAAA,EAAD,CAAU5U,MAAO,CAAE8R,MAAO,SAA1B,yCAKE,uBACN,sBAAK9R,MAAO,CAAE+F,QAAS,OAAQyO,aAAc,SAAU9C,eAAgB,UAAvE,UACE,cAACmD,EAAA,EAAD,CACE5C,KAAK,UACLjR,KAAK,QACL1B,QAAS,WACP,EAAKwC,SAAS,CAAEiL,WAAW,EAAM+H,SAAUvD,EAAY,GAAI5E,OAAQ4E,EAAY,GAAGC,QAJtF,qBASuB,qCAS/B3P,KAAKD,MAAM2J,MACT,gCACE,qBAAKzG,GAAG,WAAW+M,IAAKhQ,KAAK4M,SAAUzO,MAAO,CAAE+R,WAAY,UAG5D,sBAAK/R,MAAO,CAAEkB,OAAQ,SAAtB,UACE,sBAAKZ,UAAU,+BAA+BN,MAAO,CAAEC,QAAS,OAAQyR,eAAgB,SAAUC,WAAY,SAAUzQ,OAAQ,QAAS0Q,gBAAiB,iBAA1J,UACE,sBAAKtR,UAAU,gCAAf,UACE,oBAAIA,UAAU,wBAAwBN,MAAO,CAAE8R,MAAO,SAAtD,8BAEe,uBACf,mBAAG9R,MAAO,CAAE8R,MAAO,WAEf,0BAEN,qBAAKxR,UAAU,gBAAgBN,MAAO,CAAE+R,WAAY,UAEhD,uBAEN,qBAAKzR,UAAU,UAAUN,MAAO,CAAEC,QAAS,OAAQyS,cAAe,OAAQqC,OAAQ,KAAlF,SACE,qBAAKzU,UAAU,gCAAf,SACE,eAAC0U,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACGrT,KAAKD,MAAMmG,QAAQvG,KAAI,SAAC6M,GAAD,OACtB,cAAC8G,EAAA,EAAD,UAA2B9G,GAATA,UAIxB,cAAC+G,EAAA,EAAD,UACGvT,KAAKD,MAAMqG,KAAKzG,KAAI,SAAC6T,GAAD,OACnB,cAACH,EAAA,EAAD,UACGnT,OAAOuH,KAAK+L,GACVvL,QAAO,SAACa,GAAD,MAAiB,OAARA,KAChBnJ,KAAI,SAACmJ,GACJ,OAAO,cAAC2K,EAAA,EAAD,UAAsBD,EAAI1K,IAAVA,OAJd0K,EAAIvQ,sBAe/B,+B,GAt0BUxC,IAAMC,WCdjBgT,OAhBf,WACE,OACE,qCACI,cAAC,EAAD,IAEA,qBAAKvV,MAAO,CAACwV,UAAU,QAAvB,SACE,cAAC,IAAD,UAEE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpL,aCP9BqL,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzN,MAAK,YAAkD,IAA/C0N,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCEdO,IAASrX,OACP,cAAC,KAAD,UACE,cAAC,GAAD,MAEF6R,SAASC,eAAe,SAM1B+E,M","file":"static/js/main.22ac2abe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import HeaderC from './Header';\nexport default HeaderC;","import React from 'react';\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from 'carbon-components-react';\nimport { Link } from 'react-router-dom';\n\nconst HeaderC = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header>\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href=\"/\" prefix=\"Code Pattern\">\n          Authenticate your Chatbot\n        </HeaderName>\n        <SideNav\n          aria-label=\"Side navigation\"\n          expanded={isSideNavExpanded}\n          isPersistent={false}>\n          <SideNavItems>\n          </SideNavItems>\n        </SideNav>\n\n        \n            <HeaderNavigation style={{padding:\"0\"}}>\n              <HeaderMenuItem href=\"#section2\">Purchase Policy</HeaderMenuItem>\n            </HeaderNavigation>\n            <HeaderNavigation style={{padding:\"0\"}}>\n              <HeaderMenuItem href=\"#section3\">Display Users</HeaderMenuItem>\n            </HeaderNavigation>\n        \n      </Header>\n    )}\n  />\n);\n\nexport default HeaderC;","export default __webpack_public_path__ + \"static/media/sampleImage1.94cba3bf.jpg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ChatMessage = ({ type, text }) => {\n  if (type === 'bot') {\n    return (\n      <div className=\"chat-message chat-message--bot\">\n        <p className=\"ibm-type-c\">{text}</p>\n      </div>\n    );\n  }\n  if (type === 'user') {\n    return (\n      <div className=\"chat-message chat-message--anchor-right\">\n        <p className=\"chat-message--user ibm-type-b\">{text}</p>\n      </div>\n    );\n  }\n  if (type === 'option') {\n    return (\n      <div className=\"chat-option\">\n        <button\n          type=\"button\"\n          className=\"chat-option__button chat-option__button--selected\"\n          disabled\n        >\n          {text}\n        </button>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nChatMessage.propTypes = {\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string,\n};\n\nChatMessage.defaultProps = {\n  text: '',\n};\n\nexport default ChatMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ChatOption = ({ option, onUserInput, isSelected }) => {\n  const isSelectedClass = isSelected ? 'chat-option__button--selected' : '';\n  const classes = `ibm-type-b chat-option__button ${isSelectedClass}`;\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      disabled={isSelected}\n      onClick={() => {\n        onUserInput(option);\n      }}\n    >\n      {option.label}\n    </button>\n  );\n};\n\nChatOption.propTypes = {\n  option: PropTypes.object.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool,\n};\n\nChatOption.defaultProps = {\n  isSelected: false,\n};\n\nexport default ChatOption;\n","export default __webpack_public_path__ + \"static/media/arrow-right.1f18e857.svg\";","export default __webpack_public_path__ + \"static/media/arrow-left.6a817a2b.svg\";","export default __webpack_public_path__ + \"static/media/circle-arrow-right.35e11bb0.svg\";","export default __webpack_public_path__ + \"static/media/code.58753014.svg\";","export default __webpack_public_path__ + \"static/media/grid.ac61b776.svg\";","export default __webpack_public_path__ + \"static/media/restart.5515a627.svg\";","export default __webpack_public_path__ + \"static/media/share.5cffc6d4.svg\";","export default __webpack_public_path__ + \"static/media/calendar.d1466205.svg\";","export default __webpack_public_path__ + \"static/media/credit-card.004347f6.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ArrowRight from '../../images/arrow-right.svg';\nimport ArrowLeft from '../../images/arrow-left.svg';\nimport CircleArrowRight from '../../images/circle-arrow-right.svg';\nimport Code from '../../images/code.svg';\nimport Grid from '../../images/grid.svg';\nimport Restart from '../../images/restart.svg';\nimport Share from '../../images/share.svg';\nimport Calendar from '../../images/calendar.svg';\nimport CreditCard from '../../images/credit-card.svg';\n\nconst Icon = ({ type, size }) => {\n  switch (type) {\n    case 'arrow-right':\n      return (<ArrowRight width={size} height={size} />);\n    case 'arrow-left':\n      return (<ArrowLeft width={size} height={size} />);\n    case 'circle-arrow-right':\n      return (<CircleArrowRight width={size} height={size} />);\n    case 'code':\n      return (<Code width={size} height={size} />);\n    case 'path':\n      return (<Grid width={size} height={size} />);\n    case 'restart':\n      return (<Restart width={size} height={size} />);\n    case 'share':\n      return (<Share width={size} height={size} />);\n    case 'calendar':\n      return (<Calendar width={size} height={size} />);\n    case 'credit-card':\n      return (<CreditCard width={size} height={size} />);\n    default:\n      return (<Code width={size} height={size} />);\n  }\n};\n\nIcon.propTypes = {\n  type: PropTypes.string.isRequired,\n  size: PropTypes.number.isRequired,\n};\n\n\nexport default Icon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\n\nconst CreditCardOption = ({\n  onUserInput, cardName, description, isSelected,\n}) => {\n  const isSelectedClass = isSelected ? 'image-card--selected credit-card-option--selected' : '';\n  const classes = `credit-card-option image-card ${isSelectedClass}`;\n\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={() => {\n        onUserInput(cardName);\n      }}\n    >\n      <div className=\"credit-card-option__image\">\n        <Icon size={120} type=\"credit-card\" />\n        <div />\n      </div>\n      <div className=\"image-card__content credit-card-option__content\">\n        <p className=\"ibm-type-b ibm-type-semibold\">{cardName}</p>\n        <p className=\"ibm-type-a\">{description}</p>\n        <p className=\"ibm-type-a credit-card-option__link\">Learn More →</p>\n      </div>\n    </button>\n  );\n};\n\nCreditCardOption.propTypes = {\n  cardName: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool,\n};\n\nCreditCardOption.defaultProps = {\n  isSelected: false,\n};\n\nexport default CreditCardOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChatMessage from '../ChatMessage/ChatMessage';\n\nconst ChatUnorderedList = ({ options, onUserInput, isSelected }) => {\n  if (isSelected) {\n    return (\n      <ChatMessage\n        type=\"user\"\n        text={options[0].label}\n      />\n    );\n  }\n  return (\n    <ul>\n      {options.map(option => (\n        <li\n          className=\"chat-option-item\"\n          role=\"presentation\"\n          onClick={() => { onUserInput(option); }}\n        >\n          {option.label}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nChatUnorderedList.propTypes = {\n  options: PropTypes.object.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool,\n};\n\nChatUnorderedList.defaultProps = {\n  isSelected: false,\n};\n\nexport default ChatUnorderedList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatOption from '../ChatOption/ChatOption';\nimport CreditCardOption from '../CreditCardOption/CreditCardOption';\nimport ChatUnorderedList from '../ChatUnorderedList/ChatUnorderedList';\n\nclass ChatOptionList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: [],\n    };\n  }\n\n  componentWillMount() {\n    this.setState({ options: this.props.options });\n  }\n\n  optionSelect(option) {\n    this.setState({ options: [Object.assign(option, { isSelected: true })] });\n    this.props.onUserInput('option', option.value.input.text);\n  }\n\n  render() {\n    const options = this.props.isLastMessage || this.state.options[0].isSelected ? this.state.options : []; // eslint-disable-line\n\n    if (this.props.type === 'creditCard') {\n      return (\n        <div>\n          {options.map(option => (\n            <CreditCardOption\n              cardName={option.cardName}\n              description={option.description}\n              onUserInput={(value) => {\n                this.onUserInput(value);\n              }}\n            />\n          ))}\n        </div>\n      );\n    }\n    if (this.props.type === 'button') {\n      return (\n        <div className=\"chat-option-list\">\n          {options.map(option => (\n            <ChatOption\n              key={option.value.input.text}\n              option={option}\n              onUserInput={(selectedOption) => {\n                this.optionSelect(selectedOption);\n              }}\n              isSelected={option.isSelected}\n            />\n          ))}\n        </div>\n      );\n    }\n    if (this.props.type === 'list') {\n      return (\n        <div className=\"chat-option-list\">\n          <ChatUnorderedList\n            options={options}\n            onUserInput={(selectedOption) => {\n              this.optionSelect(selectedOption);\n            }}\n            isSelected={this.state.options[0].isSelected}\n          />\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nChatOptionList.propTypes = {\n  type: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  isLastMessage: PropTypes.bool.isRequired,\n};\n\nexport default ChatOptionList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BalanceCard = ({\n  balance,\n  minPay,\n  recPay,\n  accountId,\n}) => {\n  // generate currency formatter\n  const currencyFormatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n  });\n\n  // format props in USD currency style\n  const formattedBalance = currencyFormatter.format(balance);\n  const formattedMinPayment = currencyFormatter.format(minPay);\n  const formattedRecPayment = currencyFormatter.format(recPay);\n\n  return (\n    <div className=\"balance-card\">\n      <div className=\"balance-card__header ibm-padding\">\n        <p className=\"ibm-type-c ibm-type-semibold\">Remaining Statement Balance</p>\n        <p className=\"ibm-type-c ibm-type-semibold\">{formattedBalance}</p>\n      </div>\n      <div className=\"balance-card__content\">\n        <div className=\"balance-card__item\">\n          <p>\nAccount ending in\n            {accountId}\n          </p>\n        </div>\n        <div className=\"balance-card__item\">\n          <p>Minimum payment due</p>\n          <p>{formattedMinPayment}</p>\n        </div>\n        <div className=\"balance-card__item\">\n          <p>Recent payments</p>\n          <p>{formattedRecPayment}</p>\n        </div>\n      </div>\n    </div>\n\n  );\n};\n\nBalanceCard.propTypes = {\n  balance: PropTypes.number.isRequired,\n  recPay: PropTypes.number.isRequired,\n  accountId: PropTypes.string.isRequired,\n  minPay: PropTypes.number,\n};\n\nBalanceCard.defaultProps = {\n  minPay: 0,\n};\n\nexport default BalanceCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../Icon/Icon';\n\nconst ApptCard = ({ zip, apptDate, apptTime }) => (\n  <div className=\"appt-card chat-item\">\n    <div className=\"appt-card__header\">\n      <div className=\"appt-card__address\">\n        <p>Local Bank</p>\n        <p>132 14th Ave.</p>\n        <p>\nLocal Town\n          {zip}\n        </p>\n      </div>\n      <Icon type=\"calendar\" size={24} />\n    </div>\n    <div className=\"appt-card__content\">\n      <p>{apptDate}</p>\n      <p>{apptTime}</p>\n      <p>With Emma Banker</p>\n    </div>\n  </div>\n);\n\nApptCard.propTypes = {\n  zip: PropTypes.number.isRequired,\n  apptDate: PropTypes.string.isRequired,\n  apptTime: PropTypes.string.isRequired,\n};\n\nexport default ApptCard;\n","export default __webpack_public_path__ + \"static/media/linda.e6b23a6d.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LindaPic from '../../images/linda.png';\n\nconst AgentCard = ({ time }) => (\n  <div className=\"image-card agent-card\">\n    <div\n      className=\"image-card__image agent-card__image\"\n      style={{ backgroundImage: `url(${LindaPic})` }}\n    >\n      <div />\n    </div>\n    <div className=\"image-card__content agent-card__content\">\n      <p className=\"ibm-type-c\">\n        Your chat history, started at\n        {time}\n, has been transferred to Emma Banker.\n      </p>\n    </div>\n  </div>\n);\n\nAgentCard.propTypes = {\n  time: PropTypes.string.isRequired,\n};\n\nexport default AgentCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StatementCard = ({ startDate, endDate }) => (\n  <div className=\"balance-card\">\n    <div className=\"balance-card__header\">\n      <p className=\"ibm-type-c ibm-type-semibold\">Statement Period:</p>\n      <p className=\"ibm-type-c ibm-type-semibold\">\n        {startDate}\n-\n        {endDate}\n      </p>\n    </div>\n    <div className=\"balance-card__content\">\n      <div className=\"balance-card__item\">\n        <p>Card ending -23300</p>\n      </div>\n      <div className=\"balance-card__item\">\n        <p>Balance</p>\n        <p>$1,564.23</p>\n      </div>\n      <div className=\"balance-card__item\">\n        <p>Minimum Payment Due</p>\n        <p>$90.00</p>\n      </div>\n      <div className=\"balance-card__item\">\n        <p>Payment due date</p>\n        <p>10/16/17</p>\n      </div>\n    </div>\n  </div>\n);\n\nStatementCard.propTypes = {\n  startDate: PropTypes.string.isRequired,\n  endDate: PropTypes.string.isRequired,\n};\n\nexport default StatementCard;\n","export const IDLE = 'IDLE';\nexport const IN_PROGRESS = 'IN_PROGRESS';\nexport const COMPLETED = 'COMPLETE';\nexport const FAILED = 'FAILED';\n","export default __webpack_public_path__ + \"static/media/map-bank.f90c1bd9.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MapBank from '../../images/map-bank.png';\n\nfunction getIcon(url) {\n  if (url.includes('map-bank.png')) {\n    return MapBank;\n  }\n  return '';\n}\n\nconst ImageOption = ({ url }) => <img src={getIcon(url)} width=\"300\" alt={url} />;\n\nImageOption.propTypes = {\n  url: PropTypes.object.isRequired,\n};\n\nexport default ImageOption;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchResultsList = ({ res }) => (\n  <div>\n    {res.slice(0, 3).map(value => (\n      <div id=\"search-div\" className=\"search-item\">\n        <strong>{value.title}</strong>\n        <br />\n        {(value.body.length > 200) ? `${value.body.substring(0, 197)}...` : value.body}\n        <br />\n        <a href={`/search?id=${value.id}`} target=\"_blank\" rel=\"noopener noreferrer\">Full Document</a>\n        <div id={value.id} hidden>{value.body}</div>\n      </div>\n    ))}\n  </div>\n);\n\nSearchResultsList.propTypes = {\n  res: PropTypes.object.isRequired,\n};\n\nexport default SearchResultsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatMessage from '../ChatMessage/ChatMessage';\nimport ChatOptionList from '../ChatOptionList/ChatOptionList'; import BalanceCard from '../BalanceCard/BalanceCard';\nimport ApptCard from '../ApptCard/ApptCard';\nimport AgentCard from '../AgentCard/AgentCard';\nimport StatementCard from '../StatementCard/StatementCard';\nimport { IN_PROGRESS } from '../../constants';\nimport ImageOption from '../ImageOption/ImageOption';\nimport SearchResultsList from '../SearchResults/SearchResultsList';\n\nfunction lastBotMessage(i, messages) {\n  let isLastBotMessage = true;\n  // look forward to see if there is a user message\n  for (let x = i; x < messages.length && isLastBotMessage === true; x += 1) {\n    if (messages[x].type === 'user') {\n      isLastBotMessage = false;\n    }\n  }\n  return isLastBotMessage;\n}\n\nconst ChatList = ({ messages, onUserInput, botMessageStatus }) => {\n  // eslint-disable-next-line\n  const isBotLoading = (botMessageStatus === IN_PROGRESS);\n  const chatListClasses = isBotLoading ? 'ibm-lg-col-4 ibm-padding chat-list chat-list--loading' : 'ibm-lg-col-4 ibm-padding chat-list';\n  return (\n    <div id=\"chat-list\" className={chatListClasses} style={{height:\"60vh\"}}>\n      {messages.map((message, i) => {\n        switch (message.type) {\n          case 'option':\n            if (message.display === 'list') {\n              return (\n                <ChatOptionList\n                  type=\"list\"\n                  options={message.content}\n                  onUserInput={onUserInput}\n                  isLastMessage={lastBotMessage(i, messages)}\n                />\n              );\n            }\n            return (\n              <ChatOptionList\n                type=\"button\"\n                options={message.content}\n                onUserInput={onUserInput}\n                isLastMessage={lastBotMessage(i, messages)}\n              />\n            );\n          case 'balance':\n            return (\n              <BalanceCard\n                balance={message.content['Total Balance']}\n                recPay={message.content['Payment Amount']}\n                accountId={message.content.Account}\n              />\n            );\n          case 'appointment':\n            return (\n              <ApptCard\n                zip={message.content.address}\n                apptDate={message.content.date}\n                apptTime={message.content.time}\n                reason=\"this is a test\"\n              />\n            );\n          case 'agent':\n            return (\n              <AgentCard\n                time={message.content}\n              />\n            );\n          case 'creditCard':\n            return (\n              <ChatOptionList\n                type=\"creditCard\"\n                options={message.content}\n                isLastMessage={lastBotMessage(i, messages)}\n              />\n            );\n          case 'statement':\n            return (\n              <StatementCard\n                startDate={message.content.startingDate}\n                endDate={message.content.endingDate}\n              />\n            );\n          case 'image':\n            return (\n              <ImageOption\n                url={message.content}\n              />\n            );\n          case 'search':\n            return (\n              <SearchResultsList\n                res={message.content}\n              />\n            );\n          default:\n            return (\n              <ChatMessage\n                type={message.type}\n                text={message.content}\n              />\n            );\n        }\n      })}\n\n      <div className=\"chat-list__loader\">\n        <p className=\"ibm-type-c\">\n          &nbsp;\n          <span />\n        </p>\n      </div>\n      <div id=\"chat-list-bottom\">&nbsp;</div>\n    </div>\n  );\n};\n\nChatList.propTypes = {\n  messages: PropTypes.array.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  botMessageStatus: PropTypes.string.isRequired,\n};\n\nexport default ChatList;\n","import React from 'react';\nimport { InputWithButton } from 'watson-react-components';\nimport PropTypes from 'prop-types';\nimport ChatList from '../ChatList/ChatList';\n\nconst ChatContainer = ({\n  messages,\n  onUserInput,\n  botMessageStatus,\n}) => (\n  <div className=\"ibm-col-lg-13 ibm-col-md-6 ibm-col-sm-4 chat-container\" style={{paddingLeft:\"2rem\"}}>\n    <div className=\"ibm-lg-col-4 ibm-padding chat-container__header\">\n      <p className=\"ibm-type-a\">Watson Assistant</p>\n    </div>\n    <div id=\"chat-container__list-wrapper\" className=\"chat-container__list-wrapper\">\n      <ChatList\n        messages={messages}\n        onUserInput={onUserInput}\n        botMessageStatus={botMessageStatus}\n      />\n    </div>\n    <div className=\"ibm-lg-col-4 ibm-padding chat-container__input\">\n      <InputWithButton\n        id=\"input_field\"\n        onSubmit={(e) => {\n          onUserInput('user', e.target.value);\n          e.target.value = '';\n        }}\n        placeholder=\"Type here...\"\n      />\n    </div>\n  </div>\n);\n\nChatContainer.defaultProps = {\n  botMessageStatus: null,\n};\n\nChatContainer.propTypes = {\n  messages: PropTypes.array.isRequired,\n  onUserInput: PropTypes.func.isRequired,\n  botMessageStatus: PropTypes.string,\n};\n\nexport default ChatContainer;\n","const trackEvent = (action, objectType, object) => {\n  if (window.bluemixAnalytics) {\n    window.bluemixAnalytics.trackEvent('Custom Event', {\n      productTitle: window.digitalData.page.pageInfo.productTitle,\n      action,\n      objectType,\n      object,\n    });\n  }\n};\n\nexport default trackEvent;\n","import axios from \"axios\";\n\nlet sessionId = null;\n\nfunction getMessage(text, context, firstCallVal, callback) {\n\n  const options = {\n    url:`http://${window.location.hostname}:${window.location.port}/api/message`,\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    data: {\n      session_id: sessionId,\n      input: { text },\n      context,\n      isFirstCall: firstCallVal,\n    }\n  }\n  axios(options)\n    .then((data) => {\n      console.log(data)\n      // data.json()\n      //   .then((json) => {\n          callback(null, data);\n        // });\n      // return data\n    })\n    .catch((err) => {\n      // callback(err);\n      console.log(err)\n    });\n}\n\nfunction getSessionId(callback) {\n  fetch(`http://${window.location.hostname}:${window.location.port}/api/session`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((data) => {\n      data.json()\n        .then((json) => {\n          if (json.code) {\n            callback(json);\n          } else {\n            sessionId = json.result.session_id;\n            callback(null);\n          }\n        });\n    })\n    .catch((err) => {\n      callback(err);\n    });\n}\n\n\n/* makes a POST request to the message endpoint on the backend\n *\n * @param {String} text - the inputted text from the user\n * @param {Object} context - the current context object for the conversation\n * @param {boolean} firstCallVal - determines whether context is to be sent with payload\n */\nconst fetchMessage = (text, context, firstCallVal, clearSession, callback) => {\n  // console.log(text)\n  if (clearSession) {\n    sessionId = null;\n  }\n  if (sessionId === null) {\n    getSessionId(async (err) => {\n      if (err) {\n        console.log(`ERROR ${JSON.stringify(err)}`);\n        callback(err);\n      }\n      getMessage(text, context, firstCallVal, callback);\n      // console.log(ret)\n      // ret\n    });\n  } else {\n    getMessage(text, context, firstCallVal, callback);\n  }\n};\n\n\n/* executes programmatic calls to the backend\n *\n * @param {Object} actionObj - an object containing details about the\n * programmatic call\n *\n * @return {Promise} - promise that resolves into an object which contains the\n * response to send to conversation\n */\nconst executeClientAction = (actionObj) => {\n  let endpoint;\n  let value;\n\n  switch (actionObj.name) {\n    case 'ValidateAcc':\n      endpoint = '/bank/validate';\n      value = actionObj.parameters.chosen_acc;\n      break;\n    case 'RetrieveZip':\n      endpoint = 'bank/locate';\n      value = actionObj.parameters.zip_value;\n      break;\n    case 'ShowStatement':\n      endpoint = 'bank/statement';\n      value = `\"${actionObj.parameters.statement_date}\"`;\n      break;\n    default:\n      return null;\n  }\n\n  // construct the endpoint based on which client action\n  const parameterizedEndpoint = `${endpoint}?value=${value}`;\n\n  return new Promise((resolve, reject) => {\n    fetch(parameterizedEndpoint, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n      },\n    })\n      .then((data) => {\n        data.json()\n          .then((json) => {\n            resolve(json);\n          });\n      })\n      .catch((err) => {\n        reject(new Error(err));\n      });\n  });\n};\n\n/* executes the appropriate workspace action\n *\n * @param {Object} actionObj - an object containing keys relating to any\n * workspace actions\n *\n * @return {Object} - an object containing the type of response, and the\n * content of the response to be added to the ChatList\n */\nconst executeWorkspaceAction = (actionObj) => {\n  const actionResponseArray = Object.keys(actionObj).map((action) => {\n    switch (action) {\n      case 'cc_displaystatement': {\n        return {\n          type: 'balance',\n          content: actionObj.cc_displaystatement,\n        };\n      }\n      case 'appointment_display': {\n        return {\n          type: 'appointment',\n          content: actionObj.appointment_display,\n        };\n      }\n      case 'connect_agent': {\n        return {\n          type: 'agent',\n          content: new Date().toLocaleTimeString('en-US'),\n        };\n      }\n      case 'cc_selecteddisplay': {\n        const triggeredCards = actionObj.cc_selecteddisplay.CardCriteria;\n        const cards = [\n          {\n            id: 0,\n            value: 'Travel Rewards',\n            cardName: 'Travel Rewards',\n            description: '$150 online cash rewards bonus offer',\n          },\n          {\n            id: 1,\n            value: 'Saving',\n            cardName: 'The Mega Saver',\n            description: 'Save on interest to help pay down your balance faster',\n          },\n          {\n            id: 2,\n            value: 'Credit Level',\n            cardName: 'Mega Credit Card',\n            description: 'For users with good credit.',\n          },\n          {\n            id: 3,\n            value: 'Cash Rewards',\n            cardName: 'The Ultimate Cash Back Card',\n            description: 'Get the most cash back for your purchases',\n          },\n          {\n            id: 4,\n            value: 'General Rewards',\n            cardName: 'The Balanced Rewards Card',\n            description: 'Just the right amount of all rewards',\n          },\n        ];\n        const displayCards = cards.filter(card => triggeredCards.includes(card.value));\n        return {\n          type: 'creditCard',\n          content: displayCards,\n        };\n      }\n      case 'statement_display': {\n        return {\n          type: 'statement',\n          content: actionObj.statement_display,\n        };\n      }\n      case 'notification_display': {\n        return {\n          type: 'notification',\n          text: actionObj.notification_display.DisplayText,\n          link: (actionObj.notification_display.DisplayURL)\n            ? actionObj.notification_display.DisplayURL\n            : null,\n        };\n      }\n      default:\n        return null;\n    }\n  });\n\n  return actionResponseArray;\n};\n\nexport { fetchMessage, executeClientAction, executeWorkspaceAction };\n","import React from 'react';\nimport {\n  Form,\n  Button,\n  TextInput,\n  Modal,\n  Tile,\n  UnorderedList,\n  ListItem,\n  Dropdown,\n  ToastNotification,\n} from 'carbon-components-react';\n\nimport {\n  default as DataTable,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  Loading\n} from 'carbon-components-react';\n\nimport './_landing-page.scss'\nimport axios from 'axios';\nimport image from './../../assets/sampleImage1.jpg'\nimport ChatContainer from './../../components/ChatContainer/ChatContainer'\nimport trackEvent from '../../utils';\nimport {\n  IDLE, IN_PROGRESS, COMPLETED, FAILED,\n} from '../../constants';\nimport { fetchMessage, executeClientAction, executeWorkspaceAction } from '../../conversation';\n\nrequire('smoothscroll-polyfill').polyfill();\n\n// import PropTypes from 'prop-types'\n// require('./../../smoothscroll-polyfill').polyfill();\n\n\nclass LandingPage extends React.Component {\n  constructor() {\n    super()\n\n    this.firstCallVal = null;\n    this.section1 = React.createRef()\n    this.section2 = React.createRef()\n    this.section3 = React.createRef()\n    this.state = {\n      messages: [{\n        type: 'bot',\n        content: 'Hello, I\\'m your personal Insurance Assistant. How can I help you?'\n      },\n      {\n        type: 'option',\n        title: 'User Type',\n        content: [\n          {\n            \"label\": \"New User\",\n            \"value\": {\n              \"input\": {\n                \"text\": \"New User\"\n              }\n            }\n          },\n          {\n            \"label\": \"Existing User\",\n            \"value\": {\n              \"input\": {\n                \"text\": \"Existing User\"\n              }\n            }\n          },\n          {\n            \"label\": \"Display Users\",\n            \"value\": {\n              \"input\": {\n                \"text\": \"Display Users\"\n              }\n            }\n          }\n        ]\n      }],\n      name: \"\",\n      phone: \"\",\n      policy: \"\",\n      address: \"\",\n      modalOpen: false,\n      payment: \"monthly\",\n      dateAdd: 1,\n      amount: \"\",\n      policy: \"\",\n      invalidAddress: false,\n      invalidName: false,\n      invalidPhone: false,\n      loading: true,\n      success: false,\n      code: \"91\",\n      table: false,\n      sameNumber: false\n    }\n\n  }\n\n  componentDidMount() {\n    axios.get(`http://${window.location.hostname}:${window.location.port}/dbUrl`).then(res=>{\n      var url = ''\n      if(res.data.slice(-1) === '/'){\n        url = res.data.slice(0, -1)\n        this.setState({dbUrl: url})\n      }\n      else {\n        url = res.data\n        this.setState({dbUrl: url})\n      }\n      this.getTable()\n    }).catch(err=>{\n      alert('Authentication is required to continue')\n      window.location.replace(`http://${window.location.hostname}:${window.location.port}/auth`)\n      console.log(err)\n    })\n  }\n\n  getTable = ()=>{\n    axios.get(`${this.state.dbUrl}/api/v1.0/listusers`).then(res => {\n      // console.log(res.data)\n      const headers = Object.keys(res.data[0])\n        .filter((key) => key !== 'id')\n        .map((key) => {\n          if (key === \"premium_date\") {\n            res.data = res.data.map(item => {\n              const darr = item[key].split('/')\n              const date = new Date(darr[2], darr[1], darr[0])\n              console.log(date)\n              item[key] = date.getDate() + \"/XX/\" + date.getFullYear()\n              return item\n            })\n          }\n          if (key === \"policy_no\" || key === \"phone_no\" || key === \"address\") {\n            res.data = res.data.map(item => {\n              console.log(item[key])\n              if (key === \"phone_no\")\n                item[key] = item[key].toString()\n              item[key] = item[key].slice(0, 5) + \"XXXXX\"\n              return item\n              // console.log(item[key])\n            })\n            // console.log(res.data)\n          }\n          var separateWord = key.split('_');\n          for (var i = 0; i < separateWord.length; i++) {\n            separateWord[i] = separateWord[i].charAt(0).toUpperCase() +\n              separateWord[i].substring(1);\n          }\n          return separateWord.join(' ');\n        })\n      this.setState({ data: res.data, headers, loading: false, table: true })\n    }).catch(err => {\n      this.setState({ loading: false, table: false })\n      console.log(\"error\", err)\n    })\n  }\n\n\n  handleChange = (e) => {\n    // console.log(e)\n\n    if (this.state['invalid' + e.target.name.charAt(0).toUpperCase() + e.target.name.slice(1)] === true) {\n      this.setState({ ['invalid' + e.target.name.charAt(0).toUpperCase() + e.target.name.slice(1)]: false })\n    }\n    const { name, value } = e.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleSubmit = () => {\n    if (this.state.name === \"\" || this.state.phone === \"\" || this.state.address === \"\") {\n      if (this.state.name === \"\") this.setState({ invalidName: true })\n      if (this.state.phone === \"\") this.setState({ invalidPhone: true })\n      if (this.state.address === \"\") this.setState({ invalidAddress: true })\n      return\n    }\n    this.setState({ loading: true })\n    const random = Math.floor(Math.random() * 10)\n    const start = random < this.state.phone.length - 3 ? random : random - 3\n    const policy = this.state.name.substring(0, 3).toUpperCase() + this.state.phone.substring(start, start + 3) + (new Date()).getTime() % 100000\n    const date = new Date()\n    const curDate = new Date(date.setMonth(date.getMonth() + this.state.dateAdd));\n    const premiumDate = curDate.getDate() + '/' + (curDate.getMonth() + 1) + '/' + date.getFullYear()\n    this.setState({ policy, premiumDate })\n    console.log(policy, premiumDate)\n\n\n    var axios = require('axios');\n\n    const data = JSON.stringify({\n      \"name\": this.state.name,\n      \"phone_no\": Number(this.state.code + this.state.phone),\n      \"policy_no\": policy,\n      \"premium_date\": premiumDate,\n      \"premium_amount\": this.state.amount * this.state.dateAdd,\n      \"address\": this.state.address\n    })\n\n\n    var config = {\n      method: 'post',\n      url: `${this.state.dbUrl}/api/v1.0/registeruser`,\n      headers: { \n        'Content-Type': 'application/json'\n      },\n      data : data\n    };\n\n    axios(config)\n    .then((res) => {\n      console.log(res)\n      if(res.data.flag === true)\n        this.setState({ loading: false, success: true, sameNumber:false, modalOpen: false })\n      else \n        this.setState({ loading: false, success: true, sameNumber:true, modalOpen: false })\n      this.getTable()\n      this.section1.current.scrollIntoView()\n    }).catch(err => {\n      console.log('error', err)\n    })\n  }\n\n  initBot = () => {\n    this.updateMessageStatus(IN_PROGRESS);\n    fetchMessage(\"\", \"\", this.firstCallVal, false, (err, data) => {\n      // data.code is set for an error response\n      console.log(data)\n\n      if (err || data === undefined) {\n        this.updateMessageStatus(FAILED);\n\n        this.updateChatList({\n          type: 'bot',\n          content: 'I\\'m having trouble connecting to the server, please refresh the page.',\n        });\n\n        const errorMsg = (err) || data;\n\n        throw new Error(errorMsg);\n      }\n      // update message status\n      this.updateMessageStatus(COMPLETED);\n      console.log('here')\n      // render appropriate data\n      this.botMessageHandler(data.data);\n\n      // send stringified JSON to sidebar\n      this.updateOptionsSidebar(JSON.stringify(data.data));\n\n      // update context\n      this.updateConversationContext(data.data.result.context);\n    });\n  }\n\n  userMessageHandler(type, text) {\n    trackEvent('Sent Message', 'TextInput', 'Chat TextInput');\n    // do not accept empty inputs\n    if (text.trim() !== '') {\n      // add user message to state\n      if (type !== 'option') {\n        this.updateChatList({\n          type: 'user',\n          content: text,\n        });\n      }\n      if (text === 'New User') {\n        // this.section2.current.scrollIntoView()\n        window.location.replace(`http://${window.location.hostname}:${window.location.port}#section2`);\n        this.initBot()\n        // console.log('yes')\n        return\n      }\n      if (text === 'Existing User') {\n        // console.log('yes')\n        // return\n        this.initBot()\n        return\n      }\n      if (text === 'Display Users') {\n        if (this.state.table === true){\n          // this.section3.current.scrollIntoView()\n          window.location.replace(`http://${window.location.hostname}:${window.location.port}#section3`);\n          // console.log('yes')\n        } else {\n            var obj = this.state.messages\n            const message = {\n              type: 'bot',\n              content: 'Sorry, No users are registered at the moment.'\n            }\n            this.updateChatList(message)\n        }\n        this.initBot()\n        return\n      }\n      this.sendMessageToConversation(text, this.state.lastMessageContext);\n    }\n  }\n\n  updateConversationContext(lastMessageContext) {\n    this.setState({ lastMessageContext });\n  }\n\n  updateMessageStatus(botMessageStatus) {\n    this.setState({ botMessageStatus });\n  }\n\n  sendMessageToConversation(text, context = null) {\n    this.updateMessageStatus(IN_PROGRESS);\n    fetchMessage(text, context, this.firstCallVal, false, (err, data) => {\n      // data.code is set for an error response\n      console.log(data)\n\n      if (err || data === undefined) {\n        this.updateMessageStatus(FAILED);\n\n        this.updateChatList({\n          type: 'bot',\n          content: 'I\\'m having trouble connecting to the server, please refresh the page.',\n        });\n\n        const errorMsg = (err) || data;\n\n        throw new Error(errorMsg);\n      }\n      // update message status\n      this.updateMessageStatus(COMPLETED);\n      console.log('here')\n      // render appropriate data\n      this.botMessageHandler(data.data);\n\n      // send stringified JSON to sidebar\n      this.updateOptionsSidebar(JSON.stringify(data.data));\n\n      // update context\n      this.updateConversationContext(data.data.result.context);\n    });\n  }\n\n  parseNonGenericResponsesFromBotOutput = (genericObj) => {\n    const responses = [];\n    genericObj.forEach((response) => {\n      if (response.response_type === 'title') {\n        responses.push({\n          type: 'bot',\n          content: response.text,\n        });\n      } else if (response.response_type === 'option') {\n        responses.push({\n          type: 'bot',\n          content: response.title,\n        });\n\n        let preference = 'text';\n        if (response.preference !== undefined) {\n          preference = response.preference;\n        }\n\n        const res = {\n          type: 'option',\n          display: 'list',\n          content: response.options,\n        };\n\n        if (preference === 'button') {\n          res.display = 'button';\n        }\n        responses.push(res);\n      } else if (response.response_type === 'pause') {\n        responses.push({\n          type: response.response_type,\n          time: response.time,\n          typing: response.typing,\n        });\n      } else if (response.response_type === 'text') {\n        if (response.text !== '') {\n          responses.push({\n            type: 'bot',\n            content: response.text,\n          });\n        }\n      } else if (response.response_type === 'image') {\n        responses.push({\n          type: 'image',\n          content: response.source,\n        });\n      } else if (response.response_type === 'search') {\n        responses.push({\n          type: 'bot',\n          content: response.header,\n        });\n        responses.push({\n          type: response.response_type,\n          content: response.results,\n        });\n      }\n    });\n    return responses;\n  };\n\n  botMessageHandler(fullOutputObj) {\n    // console.log(fullOutputObj)\n    const outputObj = fullOutputObj.result;\n    console.log(outputObj)\n    let isNotificationPresent = false;\n    let responses = [];\n    // check for chat options in generic options object\n    if (outputObj.output.generic !== undefined) {\n      responses = responses.concat(this.parseNonGenericResponsesFromBotOutput(outputObj.output.generic));\n    }\n\n    // execute client programmatic actions if they exist\n    if (outputObj.output.actions\n      && outputObj.output.actions.length > 0) {\n      console.log(JSON.stringify(outputObj.actions, null, 2));\n      const { actions } = outputObj.output;\n      actions.forEach((act) => {\n        executeClientAction(act)\n          .then((result) => {\n            if (outputObj.context === undefined) {\n              this.sendMessageToConversation(result.result);\n            } else if (result.result === 'statement') {\n              const action = executeWorkspaceAction({ statement_display: result.dates });\n              responses.push(action);\n            }\n          });\n      });\n    }\n\n    // execute standard workspace actions if they exist\n    if (outputObj.output.user_defined !== undefined\n      && outputObj.output.user_defined.action !== undefined) {\n      const actionResponseArray = executeWorkspaceAction(outputObj.output.user_defined.action);\n\n      actionResponseArray.forEach((actionResponse) => {\n        if (actionResponse.type !== 'notification') {\n          responses.push(actionResponse);\n        } else {\n          isNotificationPresent = true;\n          this.displayNotification(actionResponse.text, actionResponse.link);\n        }\n      });\n    }\n\n    // execute standard workspace UI Action if they exist\n    if (outputObj.output.user_defined !== undefined\n      && outputObj.output.user_defined.ui_action !== undefined) {\n      const actionResponseArray = executeWorkspaceAction(outputObj.output.user_defined.ui_action);\n\n      actionResponseArray.forEach((actionResponse) => {\n        if (actionResponse.type !== 'notification') {\n          console.log(JSON.stringify(actionResponse));\n          responses.push(actionResponse);\n        } else {\n          isNotificationPresent = true;\n          this.displayNotification(actionResponse.text, actionResponse.link);\n        }\n      });\n    }\n    // serve notification if digression occured\n    if (!isNotificationPresent && 'context' in outputObj && 'system' in outputObj.context && 'digressed' in outputObj.context.system) {\n      this.displayNotification('The virtual assistant is able to answer an unrelated question and return back to the original flow using the Digressions feature.');\n    }\n\n    this.iterateResponese(responses, 0);\n  }\n\n  updateOptionsSidebar(lastMessageJson) {\n    this.setState({ lastMessageJson });\n  }\n\n  iterateResponese(responses, index) {\n    if (index < responses.length) {\n      const res = responses[index];\n      if (res.type !== 'pause') {\n        this.updateChatList(res);\n        this.iterateResponese(responses, index + 1);\n      } else {\n        const inputField = document.getElementById('input_field');\n        if (res.typing) {\n          inputField.placeholder = 'Watson is typing...';\n        }\n        setTimeout(() => {\n          inputField.placeholder = 'Type here...';\n          this.iterateResponese(responses, index + 1);\n        }, res.time);\n      }\n    }\n  }\n\n  updateChatList(messageObj) {\n    const chatList = document.getElementById('chat-list');\n    this.setState({ messages: [...this.state.messages, messageObj] }, () => {\n      // only scroll when watson responds\n      if (messageObj.type !== 'user') {\n        setTimeout(() => {\n          // scroll to bottom of #chat-list on each update\n          chatList.scroll({ top: chatList.scrollHeight, behavior: 'smooth' });\n          // IBM Firefox ignores previous scroll()\n          // this works. uses scroll-behavior: smooth in css for smooth scrolling\n          chatList.scrollTop = chatList.scrollHeight - chatList.clientHeight;\n        }, 100);\n      }\n    });\n  }\n\n  render() {\n    const paymentOptions = [\n      {\n        id: 'option-0',\n        text: 'Monthly',\n        option: 'monthly',\n        dateAdd: 1\n      },\n      {\n        id: 'option-1',\n        text: 'Quarterly',\n        option: 'quarterly',\n        dateAdd: 3\n      },\n      {\n        id: 'option-2',\n        text: 'Semi-Annually',\n        option: 'semiAnnually',\n        dateAdd: 6\n      },\n      {\n        id: 'option-3',\n        text: 'Annually',\n        option: 'annually',\n        dateAdd: 12\n      }\n    ]\n\n    const cardOptions = [\n      {\n        id: 'option-0',\n        text: 'Health Insurance',\n        base: '4500',\n        policy: 'healthInsurance'\n      },\n      {\n        id: 'option-1',\n        text: 'Car Insurance',\n        base: '5500',\n        policy: 'carInsurance'\n      },\n      {\n        id: 'option-2',\n        text: 'Property Insurance',\n        base: '6500',\n        policy: 'propertyInsurance'\n      }\n    ]\n\n    return (\n      this.state.loading ?\n        <div>\n          <Loading />\n        </div>\n        :\n        <div className=\"bx--grid bx--grid--full-width landing-page\" style={{ padding: \"0\", justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"rgb(38,38,38)\" }}>\n          <div className=\"bx--row landing-page__banner\" id=\"section1\" ref={this.section1} style={{ padding: \"2rem\", justifyContent: \"center\", height: \"10rem\", backgroundColor: \"rgb(61,61,61)\" }}>\n            <div className=\"bx--col-lg-10 bx--offset-lg-2\">\n              <h1 className=\"landing-page__heading\" style={{ color: \"white\" }} >\n                Welcome to Sample Insurance Company\n                        </h1><br />\n              <p style={{ color: \"white\" }}>\n                Interact with the Watson Assistant to know details about your policy.\n              </p><br />\n            </div>\n            <div className=\"bx--col-lg-4 \" style={{ paddingTop: \"0\" }} >\n              <div style={{ display: this.state.success ? \"\" : \"none\" }}>\n                <ToastNotification\n                  lowContrast={false}\n                  kind={this.state.sameNumber?\"error\":\"success\"}\n                  iconDescription=\"Close\"\n                  caption={this.state.sameNumber?\"Kindly use another number. \":\"To know more about policy, ask Watson Assistant.\"}\n                  style={{ minWidth: '25rem', marginBottom: '1rem' }}\n                  subtitle={this.state.sameNumber?<span kind='success'>This phone number already exists.</span>:<span kind='success'>An SMS has been sent to your registered phone number with policy details. </span>}\n                  title={this.state.sameNumber?\"Error while Registering\":\"Successfully Registered\"}\n                />\n              </div>\n            </div>\n          </div><br />\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-8 bx--offset-lg-2\" style={{ maxHeight: \"60rem\" }}>\n              <ChatContainer\n                messages={this.state.messages}\n                chatOptions={this.state.chatOptions}\n                onUserInput={(type, text) => { this.userMessageHandler(type, text); }}\n                botMessageStatus={this.state.botMessageStatus}\n              />\n            </div>\n          </div><br /><br />\n          <div style={{padding: \"3rem\"}}>\n\n          </div>\n          <div id=\"section2\" ref={this.section2}  style={{ height: \"100vh\", paddingTop:\"3rem\" }}>\n            <div className=\"bx--row landing-page__banner\" style={{ padding: \"2rem\", justifyContent: \"center\", height: \"10rem\", backgroundColor: \"rgb(61,61,61)\" }}>\n              <div className=\"bx--col-lg-10 bx--offset-lg-2\">\n                <h1 className=\"landing-page__heading\" style={{ color: \"white\" }} >\n                  Buy a new Policy\n                  </h1>\n                <p style={{ color: \"white\" }}>\n                  Choose from the options available below.\n                </p>\n              </div>\n              <div className=\"bx--col-lg-4 \" style={{ paddingTop: \"0\" }} >\n              </div>\n            </div><br />\n\n            <div className=\"bx--row\" style={{ paddingTop: \"6rem\", paddingBottom: \"6rem\" }}>\n\n              <Modal\n\n                open={this.state.modalOpen}\n                modalHeading=\"New User\"\n                modalLabel=\"Register\"\n                primaryButtonText=\"Submit\"\n                onRequestSubmit={this.handleSubmit}\n                onRequestClose={() => { this.setState({ modalOpen: false }) }}\n                onSecondarySubmit={() => { this.setState({ modalOpen: false }) }}\n                secondaryButtonText=\"Cancel\"\n                size='sm'>\n                <div>\n                  <Form >\n                    {this.state.loading ?\n                      <Loading\n                        withOverlay={true}\n                      />\n                      :\n                      <>\n                      </>\n                    }\n                    <TextInput\n                      id=\"name\"\n                      invalidText=\"A valid value is required\"\n                      invalid={this.state.invalidName}\n                      labelText=\"Name\"\n                      placeholder=\"John Doe\"\n                      name=\"name\"\n                      onChange={this.handleChange}\n                      value={this.state.name}\n                    /><br />\n\n                    <div className=\"bx--form-item bx--text-input-wrapper\">\n                      <label for=\"phone\" class=\"bx--label\">Phone</label>\n                    </div>\n                    <div class=\"bx--text-input__field-wrapper\">\n                      <input className=\"bx--text-input bx--text__input\" placeholder=\"+91\" style={{ maxWidth: \"12%\" }} name=\"code\" onChange={this.handleChange} value={this.state.code} />\n                      <span style={{ width: \"3%\" }}> - </span>\n                      <input className=\"bx--text-input bx--text__input\" placeholder=\"9876543210\" style={{ maxWidth: \"85%\" }} name=\"phone\" onChange={this.handleChange} value={this.state.phone} />\n                    </div><br />\n\n                    <TextInput\n                      id=\"address\"\n                      invalidText=\"A valid value is required\"\n                      invalid={this.state.invalidAddress}\n                      labelText=\"Address\"\n                      placeholder=\"Random Address\"\n                      name=\"address\"\n                      onChange={this.handleChange}\n                      value={this.state.address}\n                    /><br />\n                    <Dropdown\n                      id=\"default\"\n                      titleText=\"Dropdown label\"\n                      helperText=\"Kindly select premium payment method\"\n                      label=\"Monthly\"\n                      direction=\"top\"\n                      items={paymentOptions}\n                      light={true}\n                      itemToString={(item) => (item ? item.text : '')}\n                      onChange={(e) => {\n                        this.setState({ payment: e.selectedItem.option, dateAdd: e.selectedItem.dateAdd })\n                      }}\n                    /><br />\n\n                    <TextInput\n                      disabled\n                      id=\"amount\"\n                      labelText={`Amount payable ${this.state.payment}`}\n                      placeholder=\"Amount\"\n                      name=\"address\"\n                      onChange={this.handleChange}\n                      value={this.state.amount * this.state.dateAdd}\n                    /><br />\n                  </Form>\n\n                </div>\n              </Modal>\n\n              <div className=\"bx--col-lg-4 bx--offset-lg-2\" >\n                <Tile style={{ color: \"white\", backgroundColor: \"rgb(61,61,61)\" }}>\n                  <img src={image} style={{ maxWidth: \"-webkit-fill-available\" }} /><br /><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\", paddingBottom: \"1.2rem\", paddingTop: \"1.2rem\" }}>\n                    <h1 className=\"landing-page__heading\" style={{ paddingBottom: \"1rem\" }}>\n                      {cardOptions[0].text}\n                    </h1>\n                  </div>\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <h2>{cardOptions[0].base}</h2>\n                    <span style={{ display: \"inline-block\" }}>\n                      <sup style={{ position: \"relative\", display: \"block\", lineHeight: \"1.2\" }}>Rs</sup>\n                      <sub style={{ position: \"relative\", display: \"block\", lineHeight: \"2\" }}>/mo</sub>\n                    </span>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <UnorderedList>\n                      <ListItem style={{ color: \"white\" }}>\n                        Full Life Coverage\n                                      </ListItem>\n                      <ListItem style={{ color: \"white\" }}>\n                        Payable Monthly / Quarterly\n                                      </ListItem>\n                      <ListItem style={{ color: \"white\" }}>\n                        Unordered list level 1\n                                      </ListItem>\n\n                    </UnorderedList>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <Button\n                      kind=\"primary\"\n                      size='small'\n                      onClick={() => {\n                        this.setState({ modalOpen: true, selected: cardOptions[0], amount: cardOptions[0].base })\n                      }}\n                    >\n                      Buy now\n                                  </Button><br />\n                  </div>\n                </Tile>\n              </div>\n              <div className=\"bx--col-lg-4\" >\n                <Tile style={{ color: \"white\", backgroundColor: \"rgb(61,61,61)\" }}>\n                  <img src={image} style={{ maxWidth: \"-webkit-fill-available\" }} /><br /><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\", paddingBottom: \"1.2rem\", paddingTop: \"1.2rem\" }}>\n                    <h1 className=\"landing-page__heading\" style={{ paddingBottom: \"1rem\" }}>\n                      {cardOptions[1].text}\n                    </h1>\n                  </div>\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <h2>{cardOptions[1].base}</h2>\n                    <span style={{ display: \"inline-block\" }}>\n                      <sup style={{ position: \"relative\", display: \"block\", lineHeight: \"1.2\" }}>Rs</sup>\n                      <sub style={{ position: \"relative\", display: \"block\", lineHeight: \"2\" }}>/mo</sub>\n                    </span>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <UnorderedList>\n                      <ListItem style={{ color: \"white\" }}>\n                        Full Life Coverage\n                                      </ListItem>\n                      <ListItem style={{ color: \"white\" }}>\n                        Payable Monthly / Quarterly\n                                      </ListItem>\n\n                      <ListItem style={{ color: \"white\" }}>\n                        Unordered list level 1\n                                      </ListItem >\n                    </UnorderedList>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <Button\n                      kind=\"primary\"\n                      size='small'\n                      onClick={() => {\n                        this.setState({ modalOpen: true, selected: cardOptions[1], amount: cardOptions[1].base })\n                      }}\n                    >\n                      Buy now\n\n                      </Button><br />\n                  </div>\n                </Tile>\n              </div>\n              <div className=\"bx--col-lg-4\" >\n                <Tile style={{ color: \"white\", backgroundColor: \"rgb(61,61,61)\" }}>\n                  <img src={image} style={{ maxWidth: \"-webkit-fill-available\" }} /><br /><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\", paddingBottom: \"1.2rem\", paddingTop: \"1.2rem\" }}>\n                    <h1 className=\"landing-page__heading\" style={{ paddingBottom: \"1rem\" }}>\n                      {cardOptions[2].text}\n                    </h1>\n                  </div>\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <h2>{cardOptions[2].base}</h2>\n                    <span style={{ display: \"inline-block\" }}>\n                      <sup style={{ position: \"relative\", display: \"block\", lineHeight: \"1.2\" }}>Rs</sup>\n                      <sub style={{ position: \"relative\", display: \"block\", lineHeight: \"2\" }}>/mo</sub>\n                    </span>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <UnorderedList>\n                      <ListItem style={{ color: \"white\" }}>\n                        Full Life Coverage\n                                      </ListItem>\n                      <ListItem style={{ color: \"white\" }}>\n                        Payable Monthly / Quarterly\n                                      </ListItem>\n                      <ListItem style={{ color: \"white\" }}>\n                        Unordered list level 1\n                                      </ListItem>\n\n                    </UnorderedList>\n                  </div><br />\n                  <div style={{ display: \"flex\", alignContent: \"center\", justifyContent: \"center\" }}>\n                    <Button\n                      kind=\"primary\"\n                      size='small'\n                      onClick={() => {\n                        this.setState({ modalOpen: true, selected: cardOptions[2], amount: cardOptions[2].base })\n                      }}\n                    >\n                      Buy now\n\n                                  </Button><br />\n                  </div>\n                </Tile>\n              </div>\n            </div>\n\n          </div>\n          \n          {\n            this.state.table ?\n              <div>\n                <div id=\"section3\" ref={this.section3} style={{ paddingTop: \"3rem\" }}>\n\n                </div>\n                <div style={{ height: \"100vh\" }}>\n                  <div className=\"bx--row landing-page__banner\" style={{ padding: \"2rem\", justifyContent: \"center\", alignItems: \"center\", height: \"10rem\", backgroundColor: \"rgb(61,61,61)\" }}>\n                    <div className=\"bx--col-lg-10 bx--offset-lg-2\">\n                      <h1 className=\"landing-page__heading\" style={{ color: \"white\" }} >\n                        View our Clients\n                                </h1><br />\n                      <p style={{ color: \"white\" }}>\n\n                      </p><br />\n                    </div>\n                    <div className=\"bx--col-lg-4 \" style={{ paddingTop: \"0\" }} >\n                    </div>\n                  </div><br />\n\n                  <div className=\"bx--row\" style={{ padding: \"2rem\", paddingBottom: \"6rem\", margin: \"0\" }}>\n                    <div className=\"bx--col-lg-12 bx--offset-lg-2\">\n                      <Table>\n                        <TableHead>\n                          <TableRow>\n                            {this.state.headers.map((header) => (\n                              <TableHeader key={header}>{header}</TableHeader>\n                            ))}\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {this.state.data.map((row) => (\n                            <TableRow key={row.id}>\n                              {Object.keys(row)\n                                .filter((key) => key !== 'id')\n                                .map((key) => {\n                                  return <TableCell key={key}>{row[key]}</TableCell>;\n                                })}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n              : <div></div>\n          }\n\n        </div>\n    );\n  }\n};\n\nexport default LandingPage;","import logo from './logo.svg';\nimport './App.css';\nimport './App.scss';\nimport './app2.scss';\nimport { Button, Content } from 'carbon-components-react';\nimport HeaderC from './components/Header';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage/LandingPage';\n// import DisplayPage from './content/DisplayPage/DisplayPage';\n\n\nfunction App() {\n  return (\n    <>\n        <HeaderC />\n        {/* <Content> */}\n        <div style={{marginTop:\"3rem\"}}>\n          <Switch>\n            {/* <Route exact path=\"/display\" component={DisplayPage} /> */}\n            <Route exact path=\"/\" component={LandingPage} />\n          </Switch>\n        </div>\n        {/* </Content> */}\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './scss/main.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}